/root/Targets/authorify-websocket
└── authorify-websocket@1.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/authorify-websocket/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 38% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 38% coverage ] ****** [2 done /1 queued / 1 running / 1 errors / 60% coverage ] ****** [2 done /0 queued / 2 running / 1 errors / 60% coverage ] ****** [2 done /0 queued / 2 running / 1 errors / 60% coverage ] ****** [3 done /0 queued / 2 running / 2 errors / 60% coverage ] ****** [3 done /0 queued / 2 running / 2 errors / 60% coverage ] ****** [4 done /1 queued / 2 running / 3 errors / 60% coverage ] ****** [4 done /0 queued / 3 running / 3 errors / 60% coverage ] ****** [4 done /0 queued / 3 running / 3 errors / 60% coverage ] ****** [5 done /1 queued / 3 running / 4 errors / 60% coverage ] ****** [5 done /0 queued / 4 running / 4 errors / 60% coverage ] ****** [5 done /0 queued / 4 running / 4 errors / 60% coverage ] ****** [6 done /1 queued / 4 running / 5 errors / 60% coverage ] ****** [6 done /0 queued / 5 running / 5 errors / 60% coverage ] ****** [6 done /0 queued / 5 running / 5 errors / 60% coverage ] ****** [7 done /0 queued / 5 running / 6 errors / 60% coverage ] ****** [7 done /0 queued / 5 running / 6 errors / 60% coverage ] ****** [8 done /0 queued / 5 running / 7 errors / 60% coverage ] ****** [8 done /0 queued / 5 running / 7 errors / 60% coverage ] ****** [9 done /0 queued / 4 running / 8 errors / 60% coverage ] ****** [10 done /1 queued / 4 running / 9 errors / 60% coverage ] ****** [10 done /0 queued / 5 running / 9 errors / 60% coverage ] ****** [10 done /0 queued / 5 running / 9 errors / 60% coverage ] ****** [11 done /2 queued / 5 running / 10 errors / 60% coverage ] ****** [11 done /1 queued / 6 running / 10 errors / 60% coverage ] ****** [11 done /0 queued / 7 running / 10 errors / 60% coverage ] ****** [11 done /0 queued / 7 running / 10 errors / 60% coverage ] ****** [12 done /0 queued / 7 running / 11 errors / 60% coverage ] ****** [12 done /0 queued / 7 running / 11 errors / 60% coverage ] ****** [13 done /4 queued / 7 running / 12 errors / 60% coverage ] ****** [13 done /3 queued / 8 running / 12 errors / 60% coverage ] ****** [13 done /2 queued / 9 running / 12 errors / 60% coverage ] ****** [13 done /1 queued / 10 running / 12 errors / 60% coverage ] ****** [13 done /0 queued / 11 running / 12 errors / 60% coverage ] ****** [13 done /0 queued / 11 running / 12 errors / 60% coverage ] ****** [14 done /0 queued / 10 running / 13 errors / 60% coverage ] ****** [15 done /1 queued / 10 running / 14 errors / 60% coverage ] ****** [15 done /0 queued / 11 running / 14 errors / 60% coverage ] ****** [15 done /0 queued / 11 running / 14 errors / 60% coverage ] ****** [16 done /2 queued / 11 running / 15 errors / 60% coverage ] ****** [16 done /1 queued / 12 running / 15 errors / 60% coverage ] ****** [16 done /0 queued / 13 running / 15 errors / 60% coverage ] ****** [16 done /0 queued / 13 running / 15 errors / 60% coverage ] ****** [17 done /1 queued / 13 running / 16 errors / 60% coverage ] ****** [17 done /0 queued / 14 running / 16 errors / 60% coverage ] ****** [17 done /0 queued / 14 running / 16 errors / 60% coverage ] ****** [18 done /0 queued / 13 running / 17 errors / 60% coverage ] ****** [19 done /1 queued / 13 running / 18 errors / 60% coverage ] ****** [19 done /0 queued / 14 running / 18 errors / 60% coverage ] ****** [19 done /0 queued / 14 running / 18 errors / 60% coverage ] ****** [20 done /1 queued / 14 running / 19 errors / 60% coverage ] ****** [20 done /0 queued / 15 running / 19 errors / 60% coverage ] ****** [20 done /0 queued / 15 running / 19 errors / 60% coverage ] ****** [21 done /0 queued / 14 running / 20 errors / 60% coverage ] ****** [22 done /0 queued / 13 running / 21 errors / 60% coverage ] ****** [23 done /0 queued / 12 running / 22 errors / 60% coverage ] ****** [24 done /0 queued / 11 running / 23 errors / 60% coverage ] ****** [25 done /1 queued / 11 running / 24 errors / 60% coverage ] ****** [25 done /0 queued / 12 running / 24 errors / 60% coverage ] ****** [25 done /0 queued / 12 running / 24 errors / 60% coverage ] ****** [26 done /1 queued / 12 running / 25 errors / 60% coverage ] ****** [26 done /0 queued / 13 running / 25 errors / 60% coverage ] ****** [26 done /0 queued / 13 running / 25 errors / 60% coverage ] ****** [27 done /3 queued / 13 running / 26 errors / 60% coverage ] ****** [27 done /2 queued / 14 running / 26 errors / 60% coverage ] ****** [27 done /1 queued / 15 running / 26 errors / 60% coverage ] ****** [27 done /0 queued / 16 running / 26 errors / 60% coverage ] ****** [27 done /0 queued / 16 running / 26 errors / 60% coverage ] ****** [28 done /0 queued / 16 running / 27 errors / 60% coverage ] ****** [28 done /0 queued / 16 running / 27 errors / 60% coverage ] ****** [29 done /0 queued / 15 running / 28 errors / 60% coverage ] ****** [30 done /2 queued / 15 running / 29 errors / 60% coverage ] ****** [30 done /1 queued / 16 running / 29 errors / 60% coverage ] ****** [30 done /1 queued / 16 running / 29 errors / 60% coverage ] ****** [31 done /0 queued / 16 running / 30 errors / 60% coverage ] ****** [31 done /0 queued / 16 running / 30 errors / 60% coverage ] ****** [32 done /0 queued / 15 running / 31 errors / 60% coverage ] ****** [33 done /1 queued / 15 running / 32 errors / 60% coverage ] ****** [33 done /0 queued / 16 running / 32 errors / 60% coverage ] ****** [33 done /0 queued / 16 running / 32 errors / 60% coverage ] ****** [34 done /1 queued / 16 running / 33 errors / 60% coverage ] ****** [34 done /1 queued / 16 running / 33 errors / 60% coverage ] ****** [35 done /3 queued / 16 running / 34 errors / 60% coverage ] ****** [35 done /3 queued / 16 running / 34 errors / 60% coverage ] ****** [36 done /4 queued / 16 running / 35 errors / 60% coverage ] ****** [36 done /4 queued / 16 running / 35 errors / 60% coverage ] ****** [37 done /3 queued / 16 running / 36 errors / 60% coverage ] ****** [37 done /3 queued / 16 running / 36 errors / 60% coverage ] ****** [38 done /5 queued / 16 running / 37 errors / 60% coverage ] ****** [38 done /5 queued / 16 running / 37 errors / 60% coverage ] ****** [39 done /4 queued / 16 running / 38 errors / 60% coverage ] ****** [39 done /4 queued / 16 running / 38 errors / 60% coverage ] ****** [40 done /6 queued / 16 running / 39 errors / 60% coverage ] ****** [40 done /6 queued / 16 running / 39 errors / 60% coverage ] ****** [41 done /7 queued / 16 running / 40 errors / 60% coverage ] ****** [41 done /7 queued / 16 running / 40 errors / 60% coverage ] ****** [42 done /9 queued / 16 running / 41 errors / 60% coverage ] ****** [42 done /9 queued / 16 running / 41 errors / 60% coverage ] ****** [43 done /10 queued / 16 running / 42 errors / 60% coverage ] ****** [43 done /10 queued / 16 running / 42 errors / 60% coverage ] ****** [44 done /10 queued / 16 running / 43 errors / 60% coverage ] ****** [44 done /10 queued / 16 running / 43 errors / 60% coverage ] ****** [45 done /9 queued / 16 running / 44 errors / 60% coverage ] ****** [45 done /9 queued / 16 running / 44 errors / 60% coverage ] ****** [46 done /12 queued / 16 running / 45 errors / 60% coverage ] ****** [46 done /12 queued / 16 running / 45 errors / 60% coverage ] ****** [47 done /13 queued / 16 running / 46 errors / 60% coverage ] ****** [47 done /13 queued / 16 running / 46 errors / 60% coverage ] ****** [48 done /16 queued / 16 running / 47 errors / 60% coverage ] ****** [48 done /16 queued / 16 running / 47 errors / 60% coverage ] ****** [49 done /19 queued / 16 running / 48 errors / 60% coverage ] ****** [49 done /19 queued / 16 running / 48 errors / 60% coverage ] ****** [50 done /20 queued / 16 running / 49 errors / 60% coverage ] ****** [50 done /20 queued / 16 running / 49 errors / 60% coverage ] ****** [51 done /20 queued / 16 running / 50 errors / 60% coverage ] ****** [51 done /20 queued / 16 running / 50 errors / 60% coverage ] ****** [52 done /20 queued / 16 running / 51 errors / 60% coverage ] ****** [52 done /20 queued / 16 running / 51 errors / 60% coverage ] ****** [53 done /21 queued / 16 running / 52 errors / 60% coverage ] ****** [53 done /21 queued / 16 running / 52 errors / 60% coverage ] ****** [54 done /22 queued / 16 running / 53 errors / 60% coverage ] ****** [54 done /22 queued / 16 running / 53 errors / 60% coverage ] ****** [55 done /24 queued / 16 running / 54 errors / 60% coverage ] ****** [55 done /24 queued / 16 running / 54 errors / 60% coverage ] ****** [56 done /23 queued / 16 running / 55 errors / 60% coverage ] ****** [56 done /23 queued / 16 running / 55 errors / 60% coverage ] ****** [57 done /24 queued / 16 running / 56 errors / 60% coverage ] ****** [57 done /24 queued / 16 running / 56 errors / 60% coverage ] ****** [58 done /23 queued / 16 running / 57 errors / 60% coverage ] ****** [58 done /23 queued / 16 running / 57 errors / 60% coverage ] ****** [59 done /23 queued / 16 running / 58 errors / 60% coverage ] ****** [59 done /23 queued / 16 running / 58 errors / 60% coverage ] ****** [60 done /24 queued / 16 running / 59 errors / 60% coverage ] ****** [60 done /24 queued / 16 running / 59 errors / 60% coverage ] ****** [61 done /25 queued / 16 running / 60 errors / 60% coverage ] ****** [61 done /25 queued / 16 running / 60 errors / 60% coverage ] ****** [62 done /25 queued / 16 running / 61 errors / 60% coverage ] ****** [62 done /25 queued / 16 running / 61 errors / 60% coverage ] ****** [63 done /24 queued / 16 running / 62 errors / 60% coverage ] ****** [63 done /24 queued / 16 running / 62 errors / 60% coverage ] ****** [64 done /24 queued / 16 running / 63 errors / 60% coverage ] ****** [64 done /24 queued / 16 running / 63 errors / 60% coverage ] ****** [65 done /25 queued / 16 running / 64 errors / 60% coverage ] ****** [65 done /25 queued / 16 running / 64 errors / 60% coverage ] ****** [66 done /27 queued / 16 running / 65 errors / 60% coverage ] ****** [66 done /27 queued / 16 running / 65 errors / 60% coverage ] ****** [67 done /28 queued / 16 running / 66 errors / 60% coverage ] ****** [67 done /28 queued / 16 running / 66 errors / 60% coverage ] ****** [68 done /28 queued / 16 running / 67 errors / 60% coverage ] ****** [68 done /28 queued / 16 running / 67 errors / 60% coverage ] ****** [69 done /27 queued / 16 running / 68 errors / 60% coverage ] ****** [69 done /27 queued / 16 running / 68 errors / 60% coverage ] ****** [70 done /27 queued / 16 running / 69 errors / 60% coverage ] ****** [70 done /27 queued / 16 running / 69 errors / 60% coverage ] ****** [71 done /29 queued / 16 running / 70 errors / 60% coverage ] ****** [71 done /29 queued / 16 running / 70 errors / 60% coverage ] ****** [72 done /30 queued / 16 running / 71 errors / 60% coverage ] ****** [72 done /30 queued / 16 running / 71 errors / 60% coverage ] ****** [73 done /31 queued / 16 running / 72 errors / 60% coverage ] ****** [73 done /31 queued / 16 running / 72 errors / 60% coverage ] ****** [74 done /34 queued / 16 running / 73 errors / 60% coverage ] ****** [74 done /34 queued / 16 running / 73 errors / 60% coverage ] ****** [75 done /34 queued / 16 running / 74 errors / 60% coverage ] ****** [75 done /34 queued / 16 running / 74 errors / 60% coverage ] ****** [76 done /35 queued / 16 running / 75 errors / 60% coverage ] ****** [76 done /35 queued / 16 running / 75 errors / 60% coverage ] ****** [77 done /35 queued / 16 running / 76 errors / 60% coverage ] ****** [77 done /35 queued / 16 running / 76 errors / 60% coverage ] ****** [78 done /36 queued / 16 running / 77 errors / 60% coverage ] ****** [78 done /36 queued / 16 running / 77 errors / 60% coverage ] ****** [79 done /37 queued / 16 running / 78 errors / 60% coverage ] ****** [79 done /37 queued / 16 running / 78 errors / 60% coverage ] ****** [80 done /39 queued / 16 running / 79 errors / 60% coverage ] ****** [80 done /39 queued / 16 running / 79 errors / 60% coverage ] ****** [81 done /39 queued / 16 running / 80 errors / 60% coverage ] ****** [81 done /39 queued / 16 running / 80 errors / 60% coverage ] ****** [82 done /40 queued / 16 running / 81 errors / 60% coverage ] ****** [82 done /40 queued / 16 running / 81 errors / 60% coverage ] ****** [83 done /42 queued / 16 running / 82 errors / 60% coverage ] ****** [83 done /42 queued / 16 running / 82 errors / 60% coverage ] ****** [84 done /43 queued / 16 running / 83 errors / 60% coverage ] ****** [84 done /43 queued / 16 running / 83 errors / 60% coverage ] ****** [85 done /44 queued / 16 running / 84 errors / 60% coverage ] ****** [85 done /44 queued / 16 running / 84 errors / 60% coverage ] ****** [86 done /45 queued / 16 running / 85 errors / 60% coverage ] ****** [86 done /45 queued / 16 running / 85 errors / 60% coverage ] ****** [87 done /46 queued / 16 running / 86 errors / 60% coverage ] ****** [87 done /46 queued / 16 running / 86 errors / 60% coverage ] ****** [88 done /48 queued / 16 running / 87 errors / 60% coverage ] ****** [88 done /48 queued / 16 running / 87 errors / 60% coverage ] ****** [89 done /49 queued / 16 running / 88 errors / 60% coverage ] ****** [89 done /49 queued / 16 running / 88 errors / 60% coverage ] ****** [90 done /49 queued / 16 running / 89 errors / 60% coverage ] ****** [90 done /49 queued / 16 running / 89 errors / 60% coverage ] ****** [91 done /50 queued / 16 running / 90 errors / 60% coverage ] ****** [91 done /50 queued / 16 running / 90 errors / 60% coverage ] ****** [92 done /50 queued / 16 running / 91 errors / 60% coverage ] ****** [92 done /50 queued / 16 running / 91 errors / 60% coverage ] ****** [93 done /50 queued / 16 running / 92 errors / 60% coverage ] ****** [93 done /50 queued / 16 running / 92 errors / 60% coverage ] ****** [94 done /51 queued / 16 running / 93 errors / 60% coverage ] ****** [94 done /51 queued / 16 running / 93 errors / 60% coverage ] ****** [95 done /53 queued / 16 running / 94 errors / 60% coverage ] ****** [95 done /53 queued / 16 running / 94 errors / 60% coverage ] ****** [96 done /54 queued / 16 running / 95 errors / 60% coverage ] ****** [96 done /54 queued / 16 running / 95 errors / 60% coverage ] ****** [97 done /53 queued / 16 running / 96 errors / 60% coverage ] ****** [97 done /53 queued / 16 running / 96 errors / 60% coverage ] ****** [98 done /55 queued / 16 running / 97 errors / 60% coverage ] ****** [98 done /55 queued / 16 running / 97 errors / 60% coverage ] ****** [99 done /57 queued / 16 running / 98 errors / 60% coverage ] ****** [99 done /57 queued / 16 running / 98 errors / 60% coverage ] ****** [100 done /58 queued / 16 running / 99 errors / 60% coverage ] ****** [100 done /58 queued / 16 running / 99 errors / 60% coverage ] ****** [101 done /61 queued / 16 running / 100 errors / 60% coverage ] ****** [101 done /61 queued / 16 running / 100 errors / 60% coverage ] ****** [102 done /63 queued / 16 running / 101 errors / 60% coverage ] ****** [102 done /63 queued / 16 running / 101 errors / 60% coverage ] ****** [103 done /66 queued / 16 running / 102 errors / 60% coverage ] ****** [103 done /66 queued / 16 running / 102 errors / 60% coverage ] ****** [104 done /67 queued / 16 running / 103 errors / 60% coverage ] ****** [104 done /67 queued / 16 running / 103 errors / 60% coverage ] ****** [105 done /68 queued / 16 running / 104 errors / 60% coverage ] ****** [105 done /68 queued / 16 running / 104 errors / 60% coverage ] ****** [106 done /68 queued / 16 running / 105 errors / 60% coverage ] ****** [106 done /68 queued / 16 running / 105 errors / 60% coverage ] ****** [107 done /69 queued / 16 running / 106 errors / 60% coverage ] ****** [107 done /69 queued / 16 running / 106 errors / 60% coverage ] ****** [108 done /71 queued / 16 running / 107 errors / 60% coverage ] ****** [108 done /71 queued / 16 running / 107 errors / 60% coverage ] ****** [109 done /72 queued / 16 running / 108 errors / 60% coverage ] ****** [109 done /72 queued / 16 running / 108 errors / 60% coverage ] ****** [110 done /72 queued / 16 running / 109 errors / 60% coverage ] ****** [110 done /72 queued / 16 running / 109 errors / 60% coverage ] ****** [111 done /75 queued / 16 running / 110 errors / 60% coverage ] ****** [111 done /75 queued / 16 running / 110 errors / 60% coverage ] ****** [112 done /77 queued / 16 running / 111 errors / 60% coverage ] ****** [112 done /77 queued / 16 running / 111 errors / 60% coverage ] ****** [113 done /76 queued / 16 running / 112 errors / 60% coverage ] ****** [113 done /76 queued / 16 running / 112 errors / 60% coverage ] ****** [114 done /76 queued / 16 running / 113 errors / 60% coverage ] ****** [114 done /76 queued / 16 running / 113 errors / 60% coverage ] ****** [115 done /77 queued / 16 running / 114 errors / 60% coverage ] ****** [115 done /77 queued / 16 running / 114 errors / 60% coverage ] ****** [116 done /76 queued / 16 running / 115 errors / 60% coverage ] ****** [116 done /76 queued / 16 running / 115 errors / 60% coverage ] ****** [117 done /77 queued / 16 running / 116 errors / 60% coverage ] ****** [117 done /77 queued / 16 running / 116 errors / 60% coverage ] ****** [118 done /77 queued / 16 running / 117 errors / 60% coverage ] ****** [118 done /77 queued / 16 running / 117 errors / 60% coverage ] ****** [119 done /78 queued / 16 running / 118 errors / 60% coverage ] ****** [119 done /78 queued / 16 running / 118 errors / 60% coverage ] ****** [120 done /77 queued / 16 running / 119 errors / 60% coverage ] ****** [120 done /77 queued / 16 running / 119 errors / 60% coverage ] ****** [121 done /78 queued / 16 running / 120 errors / 60% coverage ] ****** [121 done /78 queued / 16 running / 120 errors / 60% coverage ] ****** [122 done /78 queued / 16 running / 121 errors / 60% coverage ] ****** [122 done /78 queued / 16 running / 121 errors / 60% coverage ] ****** [123 done /78 queued / 16 running / 122 errors / 60% coverage ] ****** [123 done /78 queued / 16 running / 122 errors / 60% coverage ] ****** [124 done /80 queued / 16 running / 123 errors / 60% coverage ] ****** [124 done /80 queued / 16 running / 123 errors / 60% coverage ] ****** [125 done /80 queued / 16 running / 124 errors / 60% coverage ] ****** [125 done /80 queued / 16 running / 124 errors / 60% coverage ] ****** [126 done /80 queued / 16 running / 125 errors / 60% coverage ] ****** [126 done /80 queued / 16 running / 125 errors / 60% coverage ] ****** [127 done /80 queued / 16 running / 126 errors / 60% coverage ] ****** [127 done /80 queued / 16 running / 126 errors / 60% coverage ] ****** [128 done /81 queued / 16 running / 127 errors / 60% coverage ] ****** [128 done /81 queued / 16 running / 127 errors / 60% coverage ] ****** [129 done /80 queued / 16 running / 128 errors / 60% coverage ] ****** [129 done /80 queued / 16 running / 128 errors / 60% coverage ] ****** [130 done /80 queued / 16 running / 129 errors / 60% coverage ] ****** [130 done /80 queued / 16 running / 129 errors / 60% coverage ] ****** [131 done /81 queued / 16 running / 130 errors / 60% coverage ] ****** [131 done /81 queued / 16 running / 130 errors / 60% coverage ] ****** [132 done /82 queued / 16 running / 131 errors / 60% coverage ] ****** [132 done /82 queued / 16 running / 131 errors / 60% coverage ] ****** [133 done /82 queued / 16 running / 132 errors / 60% coverage ] ****** [133 done /82 queued / 16 running / 132 errors / 60% coverage ] ****** [134 done /83 queued / 16 running / 133 errors / 60% coverage ] ****** [134 done /83 queued / 16 running / 133 errors / 60% coverage ] ****** [135 done /84 queued / 16 running / 134 errors / 60% coverage ] ****** [135 done /84 queued / 16 running / 134 errors / 60% coverage ] ****** [136 done /86 queued / 16 running / 135 errors / 60% coverage ] ****** [136 done /86 queued / 16 running / 135 errors / 60% coverage ] ****** [137 done /85 queued / 16 running / 136 errors / 60% coverage ] ****** [137 done /85 queued / 16 running / 136 errors / 60% coverage ] ****** [138 done /84 queued / 16 running / 137 errors / 60% coverage ] ****** [138 done /84 queued / 16 running / 137 errors / 60% coverage ] ****** [139 done /85 queued / 16 running / 138 errors / 60% coverage ] ****** [139 done /85 queued / 16 running / 138 errors / 60% coverage ] ****** [140 done /88 queued / 16 running / 139 errors / 60% coverage ] ****** [140 done /88 queued / 16 running / 139 errors / 60% coverage ] ****** [141 done /90 queued / 16 running / 140 errors / 60% coverage ] ****** [141 done /90 queued / 16 running / 140 errors / 60% coverage ] ****** [142 done /90 queued / 16 running / 141 errors / 60% coverage ] ****** [142 done /90 queued / 16 running / 141 errors / 60% coverage ] ****** [143 done /91 queued / 16 running / 142 errors / 60% coverage ] ****** [143 done /91 queued / 16 running / 142 errors / 60% coverage ] ****** [144 done /93 queued / 16 running / 143 errors / 60% coverage ] ****** [144 done /93 queued / 16 running / 143 errors / 60% coverage ] ****** [145 done /94 queued / 16 running / 144 errors / 60% coverage ] ****** [145 done /94 queued / 16 running / 144 errors / 60% coverage ] ****** [146 done /95 queued / 16 running / 145 errors / 60% coverage ] ****** [146 done /95 queued / 16 running / 145 errors / 60% coverage ] ****** [147 done /96 queued / 16 running / 146 errors / 60% coverage ] ****** [147 done /96 queued / 16 running / 146 errors / 60% coverage ] ****** [148 done /97 queued / 16 running / 147 errors / 60% coverage ] ****** [148 done /97 queued / 16 running / 147 errors / 60% coverage ] ****** [149 done /98 queued / 16 running / 148 errors / 60% coverage ] ****** [149 done /98 queued / 16 running / 148 errors / 60% coverage ] ****** [150 done /101 queued / 16 running / 149 errors / 60% coverage ] ****** [150 done /101 queued / 16 running / 149 errors / 60% coverage ] ****** [151 done /102 queued / 16 running / 150 errors / 60% coverage ] ****** [151 done /102 queued / 16 running / 150 errors / 60% coverage ] ****** [152 done /105 queued / 16 running / 151 errors / 60% coverage ] ****** [152 done /105 queued / 16 running / 151 errors / 60% coverage ] ****** [153 done /105 queued / 16 running / 152 errors / 60% coverage ] ****** [153 done /105 queued / 16 running / 152 errors / 60% coverage ] ****** [154 done /106 queued / 16 running / 153 errors / 60% coverage ] ****** [154 done /106 queued / 16 running / 153 errors / 60% coverage ] ****** [155 done /107 queued / 16 running / 154 errors / 60% coverage ] ****** [155 done /107 queued / 16 running / 154 errors / 60% coverage ] ****** [156 done /108 queued / 16 running / 155 errors / 60% coverage ] ****** [156 done /108 queued / 16 running / 155 errors / 60% coverage ] ****** [157 done /107 queued / 16 running / 156 errors / 60% coverage ] ****** [157 done /107 queued / 16 running / 156 errors / 60% coverage ] ****** [158 done /109 queued / 16 running / 157 errors / 60% coverage ] ****** [158 done /109 queued / 16 running / 157 errors / 60% coverage ] ****** [159 done /110 queued / 16 running / 158 errors / 60% coverage ] ****** [159 done /110 queued / 16 running / 158 errors / 60% coverage ] ****** [160 done /110 queued / 16 running / 159 errors / 60% coverage ] ****** [160 done /110 queued / 16 running / 159 errors / 60% coverage ] ****** [161 done /110 queued / 16 running / 160 errors / 60% coverage ] ****** [161 done /110 queued / 16 running / 160 errors / 60% coverage ] ****** [162 done /110 queued / 16 running / 161 errors / 60% coverage ] ****** [162 done /110 queued / 16 running / 161 errors / 60% coverage ] ****** [163 done /109 queued / 16 running / 162 errors / 60% coverage ] ****** [163 done /109 queued / 16 running / 162 errors / 60% coverage ] ****** [164 done /110 queued / 16 running / 163 errors / 60% coverage ] ****** [164 done /110 queued / 16 running / 163 errors / 60% coverage ] ****** [165 done /109 queued / 16 running / 164 errors / 60% coverage ] ****** [165 done /109 queued / 16 running / 164 errors / 60% coverage ] ****** [166 done /108 queued / 16 running / 165 errors / 60% coverage ] ****** [166 done /108 queued / 16 running / 165 errors / 60% coverage ] ****** [167 done /108 queued / 16 running / 166 errors / 60% coverage ] ****** [167 done /108 queued / 16 running / 166 errors / 60% coverage ] ****** [168 done /110 queued / 16 running / 167 errors / 60% coverage ] ****** [168 done /110 queued / 16 running / 167 errors / 60% coverage ] ****** [169 done /110 queued / 16 running / 168 errors / 60% coverage ] ****** [169 done /110 queued / 16 running / 168 errors / 60% coverage ] ****** [170 done /110 queued / 16 running / 169 errors / 60% coverage ] ****** [170 done /110 queued / 16 running / 169 errors / 60% coverage ] ****** [171 done /113 queued / 16 running / 170 errors / 60% coverage ] ****** [171 done /113 queued / 16 running / 170 errors / 60% coverage ] ****** [172 done /113 queued / 16 running / 171 errors / 60% coverage ] ****** [172 done /113 queued / 16 running / 171 errors / 60% coverage ] ****** [173 done /114 queued / 16 running / 172 errors / 60% coverage ] ****** [173 done /114 queued / 16 running / 172 errors / 60% coverage ] ****** [174 done /113 queued / 16 running / 173 errors / 60% coverage ] ****** [174 done /113 queued / 16 running / 173 errors / 60% coverage ] ****** [175 done /112 queued / 16 running / 174 errors / 60% coverage ] ****** [175 done /112 queued / 16 running / 174 errors / 60% coverage ] ****** [176 done /114 queued / 16 running / 175 errors / 60% coverage ] ****** [176 done /114 queued / 16 running / 175 errors / 60% coverage ] ****** [177 done /115 queued / 16 running / 176 errors / 60% coverage ] ****** [177 done /115 queued / 16 running / 176 errors / 60% coverage ] ****** [178 done /116 queued / 16 running / 177 errors / 60% coverage ] ****** [178 done /116 queued / 16 running / 177 errors / 60% coverage ] ****** [179 done /117 queued / 16 running / 178 errors / 60% coverage ] ****** [179 done /117 queued / 16 running / 178 errors / 60% coverage ] ****** [180 done /118 queued / 16 running / 179 errors / 60% coverage ] ****** [180 done /118 queued / 16 running / 179 errors / 60% coverage ] ****** [181 done /119 queued / 16 running / 180 errors / 60% coverage ] ****** [181 done /119 queued / 16 running / 180 errors / 60% coverage ] ****** [182 done /119 queued / 16 running / 181 errors / 60% coverage ] ****** [182 done /119 queued / 16 running / 181 errors / 60% coverage ] ****** [183 done /120 queued / 16 running / 182 errors / 60% coverage ] ****** [183 done /120 queued / 16 running / 182 errors / 60% coverage ] ****** [184 done /121 queued / 16 running / 183 errors / 60% coverage ] ****** [184 done /121 queued / 16 running / 183 errors / 60% coverage ] ****** [185 done /123 queued / 16 running / 184 errors / 60% coverage ] ****** [185 done /123 queued / 16 running / 184 errors / 60% coverage ] ****** [186 done /124 queued / 16 running / 185 errors / 60% coverage ] ****** [186 done /124 queued / 16 running / 185 errors / 60% coverage ] ****** [187 done /127 queued / 16 running / 186 errors / 60% coverage ] ****** [187 done /127 queued / 16 running / 186 errors / 60% coverage ] ****** [188 done /127 queued / 16 running / 187 errors / 60% coverage ] ****** [188 done /127 queued / 16 running / 187 errors / 60% coverage ] ****** [189 done /127 queued / 16 running / 188 errors / 60% coverage ] ****** [189 done /127 queued / 16 running / 188 errors / 60% coverage ] ****** [190 done /128 queued / 16 running / 189 errors / 60% coverage ] ****** [190 done /128 queued / 16 running / 189 errors / 60% coverage ] ****** [191 done /130 queued / 16 running / 190 errors / 60% coverage ] ****** [191 done /130 queued / 16 running / 190 errors / 60% coverage ] ****** [192 done /132 queued / 16 running / 191 errors / 60% coverage ] ****** [192 done /132 queued / 16 running / 191 errors / 60% coverage ] ****** [193 done /132 queued / 16 running / 192 errors / 60% coverage ] ****** [193 done /132 queued / 16 running / 192 errors / 60% coverage ] ****** [194 done /132 queued / 16 running / 193 errors / 60% coverage ] ****** [194 done /132 queued / 16 running / 193 errors / 60% coverage ] ****** [195 done /133 queued / 16 running / 194 errors / 60% coverage ] ****** [195 done /133 queued / 16 running / 194 errors / 60% coverage ] ****** [196 done /132 queued / 16 running / 195 errors / 60% coverage ] ****** [196 done /132 queued / 16 running / 195 errors / 60% coverage ] ****** [197 done /131 queued / 16 running / 196 errors / 60% coverage ] ****** [197 done /131 queued / 16 running / 196 errors / 60% coverage ] ****** [198 done /133 queued / 16 running / 197 errors / 60% coverage ] ****** [198 done /133 queued / 16 running / 197 errors / 60% coverage ] ****** [199 done /135 queued / 16 running / 198 errors / 60% coverage ] ****** [199 done /135 queued / 16 running / 198 errors / 60% coverage ] ****** [200 done /135 queued / 16 running / 199 errors / 60% coverage ] ****** [200 done /135 queued / 16 running / 199 errors / 60% coverage ] ****** [201 done /137 queued / 16 running / 200 errors / 60% coverage ] ****** [201 done /137 queued / 16 running / 200 errors / 60% coverage ] ****** [202 done /137 queued / 16 running / 201 errors / 60% coverage ] ****** [202 done /137 queued / 16 running / 201 errors / 60% coverage ] ****** [203 done /140 queued / 16 running / 202 errors / 60% coverage ] ****** [203 done /140 queued / 16 running / 202 errors / 60% coverage ] ****** [204 done /140 queued / 16 running / 203 errors / 60% coverage ] ****** [204 done /140 queued / 16 running / 203 errors / 60% coverage ] ****** [205 done /139 queued / 16 running / 204 errors / 60% coverage ] ****** [205 done /139 queued / 16 running / 204 errors / 60% coverage ] ****** [206 done /139 queued / 16 running / 205 errors / 60% coverage ] ****** [206 done /139 queued / 16 running / 205 errors / 60% coverage ] ****** [207 done /138 queued / 16 running / 206 errors / 60% coverage ] ****** [207 done /138 queued / 16 running / 206 errors / 60% coverage ] ****** [208 done /139 queued / 16 running / 207 errors / 60% coverage ] ****** [208 done /139 queued / 16 running / 207 errors / 60% coverage ] ****** [209 done /138 queued / 16 running / 208 errors / 60% coverage ] ****** [209 done /138 queued / 16 running / 208 errors / 60% coverage ] ****** [210 done /139 queued / 16 running / 209 errors / 60% coverage ] ****** [210 done /139 queued / 16 running / 209 errors / 60% coverage ] ****** [211 done /140 queued / 16 running / 210 errors / 60% coverage ] ****** [211 done /140 queued / 16 running / 210 errors / 60% coverage ] ****** [212 done /141 queued / 16 running / 211 errors / 60% coverage ] ****** [212 done /141 queued / 16 running / 211 errors / 60% coverage ] ****** [213 done /142 queued / 16 running / 212 errors / 60% coverage ] ****** [213 done /142 queued / 16 running / 212 errors / 60% coverage ] ****** [214 done /142 queued / 16 running / 213 errors / 60% coverage ] ****** [214 done /142 queued / 16 running / 213 errors / 60% coverage ] ****** [215 done /142 queued / 16 running / 214 errors / 60% coverage ] ****** [215 done /142 queued / 16 running / 214 errors / 60% coverage ] ****** [216 done /142 queued / 16 running / 215 errors / 60% coverage ] ****** [216 done /142 queued / 16 running / 215 errors / 60% coverage ] ****** [217 done /142 queued / 16 running / 216 errors / 60% coverage ] ****** [217 done /142 queued / 16 running / 216 errors / 60% coverage ] ****** [218 done /143 queued / 16 running / 217 errors / 60% coverage ] ****** [218 done /143 queued / 16 running / 217 errors / 60% coverage ] ****** [219 done /146 queued / 16 running / 218 errors / 60% coverage ] ****** [219 done /146 queued / 16 running / 218 errors / 60% coverage ] ****** [220 done /146 queued / 16 running / 219 errors / 60% coverage ] ****** [220 done /146 queued / 16 running / 219 errors / 60% coverage ] ****** [221 done /147 queued / 16 running / 220 errors / 60% coverage ] ****** [221 done /147 queued / 16 running / 220 errors / 60% coverage ] ****** [222 done /151 queued / 16 running / 221 errors / 60% coverage ] ****** [222 done /151 queued / 16 running / 221 errors / 60% coverage ] ****** [223 done /151 queued / 16 running / 222 errors / 60% coverage ] ****** [223 done /151 queued / 16 running / 222 errors / 60% coverage ] ****** [224 done /153 queued / 16 running / 223 errors / 60% coverage ] ****** [224 done /153 queued / 16 running / 223 errors / 60% coverage ] ****** [225 done /157 queued / 16 running / 224 errors / 60% coverage ] ****** [225 done /157 queued / 16 running / 224 errors / 60% coverage ] ****** [226 done /160 queued / 16 running / 225 errors / 60% coverage ] ****** [226 done /160 queued / 16 running / 225 errors / 60% coverage ] ****** [227 done /162 queued / 16 running / 226 errors / 60% coverage ] ****** [227 done /162 queued / 16 running / 226 errors / 60% coverage ] ****** [228 done /163 queued / 16 running / 227 errors / 60% coverage ] ****** [228 done /163 queued / 16 running / 227 errors / 60% coverage ] ****** [229 done /164 queued / 16 running / 228 errors / 60% coverage ] ****** [229 done /164 queued / 16 running / 228 errors / 60% coverage ] ****** [230 done /167 queued / 16 running / 229 errors / 60% coverage ] ****** [230 done /167 queued / 16 running / 229 errors / 60% coverage ] ****** [231 done /168 queued / 16 running / 230 errors / 60% coverage ] ****** [231 done /168 queued / 16 running / 230 errors / 60% coverage ] ****** [232 done /169 queued / 16 running / 231 errors / 60% coverage ] ****** [232 done /169 queued / 16 running / 231 errors / 60% coverage ] ****** [233 done /170 queued / 16 running / 232 errors / 60% coverage ] ****** [233 done /170 queued / 16 running / 232 errors / 60% coverage ] ****** [234 done /170 queued / 16 running / 233 errors / 60% coverage ] ****** [234 done /170 queued / 16 running / 233 errors / 60% coverage ] ****** [235 done /171 queued / 16 running / 234 errors / 60% coverage ] ****** [235 done /171 queued / 16 running / 234 errors / 60% coverage ] ****** [236 done /172 queued / 16 running / 235 errors / 60% coverage ] ****** [236 done /172 queued / 16 running / 235 errors / 60% coverage ] ****** [237 done /175 queued / 16 running / 236 errors / 60% coverage ] ****** [237 done /175 queued / 16 running / 236 errors / 60% coverage ] ****** [238 done /177 queued / 16 running / 237 errors / 60% coverage ] ****** [238 done /177 queued / 16 running / 237 errors / 60% coverage ] ****** [239 done /178 queued / 16 running / 238 errors / 60% coverage ] ****** [239 done /178 queued / 16 running / 238 errors / 60% coverage ] ****** [240 done /179 queued / 16 running / 239 errors / 60% coverage ] ****** [240 done /179 queued / 16 running / 239 errors / 60% coverage ] ****** [241 done /179 queued / 16 running / 240 errors / 60% coverage ] ****** [241 done /179 queued / 16 running / 240 errors / 60% coverage ] ****** [242 done /179 queued / 16 running / 241 errors / 60% coverage ] ****** [242 done /179 queued / 16 running / 241 errors / 60% coverage ] ****** [243 done /179 queued / 16 running / 242 errors / 60% coverage ] ****** [243 done /179 queued / 16 running / 242 errors / 60% coverage ] ****** [244 done /179 queued / 16 running / 243 errors / 60% coverage ] ****** [244 done /179 queued / 16 running / 243 errors / 60% coverage ] ****** [245 done /179 queued / 16 running / 244 errors / 60% coverage ] ****** [245 done /179 queued / 16 running / 244 errors / 60% coverage ] ****** [246 done /178 queued / 16 running / 245 errors / 60% coverage ] ****** [246 done /178 queued / 16 running / 245 errors / 60% coverage ] ****** [247 done /178 queued / 16 running / 246 errors / 60% coverage ] ****** [247 done /178 queued / 16 running / 246 errors / 60% coverage ] ****** [248 done /178 queued / 16 running / 247 errors / 60% coverage ] ****** [248 done /178 queued / 16 running / 247 errors / 60% coverage ] ****** [249 done /178 queued / 16 running / 248 errors / 60% coverage ] ****** [249 done /178 queued / 16 running / 248 errors / 60% coverage ] ****** [250 done /179 queued / 16 running / 249 errors / 60% coverage ] ****** [250 done /179 queued / 16 running / 249 errors / 60% coverage ] ****** [251 done /179 queued / 16 running / 250 errors / 60% coverage ] ****** [251 done /179 queued / 16 running / 250 errors / 60% coverage ] ****** [252 done /180 queued / 16 running / 251 errors / 60% coverage ] ****** [252 done /180 queued / 16 running / 251 errors / 60% coverage ] ****** [253 done /179 queued / 16 running / 252 errors / 60% coverage ] ****** [253 done /179 queued / 16 running / 252 errors / 60% coverage ] ****** [254 done /179 queued / 16 running / 253 errors / 60% coverage ] ****** [254 done /179 queued / 16 running / 253 errors / 60% coverage ] ****** [255 done /179 queued / 16 running / 254 errors / 60% coverage ] ****** [255 done /179 queued / 16 running / 254 errors / 60% coverage ] ****** [256 done /180 queued / 16 running / 255 errors / 60% coverage ] ****** [256 done /180 queued / 16 running / 255 errors / 60% coverage ] ****** [257 done /182 queued / 16 running / 256 errors / 60% coverage ] ****** [257 done /182 queued / 16 running / 256 errors / 60% coverage ] ****** [258 done /182 queued / 16 running / 257 errors / 60% coverage ] ****** [258 done /182 queued / 16 running / 257 errors / 60% coverage ] ****** [259 done /182 queued / 16 running / 258 errors / 60% coverage ] ****** [259 done /182 queued / 16 running / 258 errors / 60% coverage ] ****** [260 done /182 queued / 16 running / 259 errors / 60% coverage ] ****** [260 done /182 queued / 16 running / 259 errors / 60% coverage ] ****** [261 done /181 queued / 16 running / 260 errors / 60% coverage ] ****** [261 done /181 queued / 16 running / 260 errors / 60% coverage ] ****** [262 done /183 queued / 16 running / 261 errors / 60% coverage ] ****** [262 done /183 queued / 16 running / 261 errors / 60% coverage ] ****** [263 done /182 queued / 16 running / 262 errors / 60% coverage ] ****** [263 done /182 queued / 16 running / 262 errors / 60% coverage ] ****** [264 done /183 queued / 16 running / 263 errors / 60% coverage ] ****** [264 done /183 queued / 16 running / 263 errors / 60% coverage ] ****** [265 done /185 queued / 16 running / 264 errors / 60% coverage ] ****** [265 done /185 queued / 16 running / 264 errors / 60% coverage ] ****** [266 done /186 queued / 16 running / 265 errors / 60% coverage ] ****** [266 done /186 queued / 16 running / 265 errors / 60% coverage ] ****** [267 done /186 queued / 16 running / 266 errors / 60% coverage ] ****** [267 done /186 queued / 16 running / 266 errors / 60% coverage ] ****** [268 done /185 queued / 16 running / 267 errors / 60% coverage ] ****** [268 done /185 queued / 16 running / 267 errors / 60% coverage ] ****** [269 done /186 queued / 16 running / 268 errors / 60% coverage ] ****** [269 done /186 queued / 16 running / 268 errors / 60% coverage ] ****** [270 done /187 queued / 16 running / 269 errors / 60% coverage ] ****** [270 done /187 queued / 16 running / 269 errors / 60% coverage ] ****** [271 done /188 queued / 16 running / 270 errors / 60% coverage ] ****** [271 done /188 queued / 16 running / 270 errors / 60% coverage ] ****** [272 done /192 queued / 16 running / 271 errors / 60% coverage ] ****** [272 done /192 queued / 16 running / 271 errors / 60% coverage ] ****** [273 done /192 queued / 16 running / 272 errors / 60% coverage ] ****** [273 done /192 queued / 16 running / 272 errors / 60% coverage ] ****** [274 done /194 queued / 16 running / 273 errors / 60% coverage ] ****** [274 done /194 queued / 16 running / 273 errors / 60% coverage ] ****** [275 done /195 queued / 16 running / 274 errors / 60% coverage ] ****** [275 done /195 queued / 16 running / 274 errors / 60% coverage ] ****** [276 done /199 queued / 16 running / 275 errors / 60% coverage ] ****** [276 done /199 queued / 16 running / 275 errors / 60% coverage ] ****** [277 done /200 queued / 16 running / 276 errors / 60% coverage ] ****** [277 done /200 queued / 16 running / 276 errors / 60% coverage ] ****** [278 done /201 queued / 16 running / 277 errors / 60% coverage ] ****** [278 done /201 queued / 16 running / 277 errors / 60% coverage ] ****** [279 done /202 queued / 16 running / 278 errors / 60% coverage ] ****** [279 done /202 queued / 16 running / 278 errors / 60% coverage ] ****** [280 done /203 queued / 16 running / 279 errors / 60% coverage ] ****** [280 done /203 queued / 16 running / 279 errors / 60% coverage ] ****** [281 done /204 queued / 16 running / 280 errors / 60% coverage ] ****** [281 done /204 queued / 16 running / 280 errors / 60% coverage ] ****** [282 done /205 queued / 16 running / 281 errors / 60% coverage ] ****** [282 done /205 queued / 16 running / 281 errors / 60% coverage ] ****** [283 done /207 queued / 16 running / 282 errors / 60% coverage ] ****** [283 done /207 queued / 16 running / 282 errors / 60% coverage ] ****** [284 done /210 queued / 16 running / 283 errors / 60% coverage ] ****** [284 done /210 queued / 16 running / 283 errors / 60% coverage ] ****** [285 done /211 queued / 16 running / 284 errors / 60% coverage ] ****** [285 done /211 queued / 16 running / 284 errors / 60% coverage ] ****** [286 done /211 queued / 16 running / 285 errors / 60% coverage ] ****** [286 done /211 queued / 16 running / 285 errors / 60% coverage ] ****** [287 done /212 queued / 16 running / 286 errors / 60% coverage ] ****** [287 done /212 queued / 16 running / 286 errors / 60% coverage ] ****** [288 done /215 queued / 16 running / 287 errors / 60% coverage ] ****** [288 done /215 queued / 16 running / 287 errors / 60% coverage ] ****** [289 done /214 queued / 16 running / 288 errors / 60% coverage ] ****** [289 done /214 queued / 16 running / 288 errors / 60% coverage ] ****** [290 done /214 queued / 16 running / 289 errors / 60% coverage ] ****** [290 done /214 queued / 16 running / 289 errors / 60% coverage ] ****** [291 done /215 queued / 16 running / 290 errors / 60% coverage ] ****** [291 done /215 queued / 16 running / 290 errors / 60% coverage ] ****** [292 done /215 queued / 16 running / 291 errors / 60% coverage ] ****** [292 done /215 queued / 16 running / 291 errors / 60% coverage ] ****** [293 done /214 queued / 16 running / 292 errors / 60% coverage ] ****** [293 done /214 queued / 16 running / 292 errors / 60% coverage ] ****** [294 done /215 queued / 16 running / 293 errors / 60% coverage ] ****** [294 done /215 queued / 16 running / 293 errors / 60% coverage ] ****** [295 done /215 queued / 16 running / 294 errors / 60% coverage ] ****** [295 done /215 queued / 16 running / 294 errors / 60% coverage ] ****** [296 done /215 queued / 16 running / 295 errors / 60% coverage ] ****** [296 done /215 queued / 16 running / 295 errors / 60% coverage ] ****** [297 done /214 queued / 16 running / 296 errors / 60% coverage ] ****** [297 done /214 queued / 16 running / 296 errors / 60% coverage ] ****** [298 done /214 queued / 16 running / 297 errors / 60% coverage ] ****** [298 done /214 queued / 16 running / 297 errors / 60% coverage ] ****** [299 done /214 queued / 16 running / 298 errors / 60% coverage ] ****** [299 done /214 queued / 16 running / 298 errors / 60% coverage ] ****** [300 done /214 queued / 16 running / 299 errors / 60% coverage ] ****** [300 done /214 queued / 16 running / 299 errors / 60% coverage ] ****** [301 done /214 queued / 16 running / 300 errors / 60% coverage ] ****** [301 done /214 queued / 16 running / 300 errors / 60% coverage ] ****** [302 done /217 queued / 16 running / 301 errors / 60% coverage ] ****** [302 done /217 queued / 16 running / 301 errors / 60% coverage ] ****** [303 done /217 queued / 16 running / 302 errors / 60% coverage ] ****** [303 done /217 queued / 16 running / 302 errors / 60% coverage ] ****** [304 done /216 queued / 16 running / 303 errors / 60% coverage ] ****** [304 done /216 queued / 16 running / 303 errors / 60% coverage ] ****** [305 done /215 queued / 16 running / 304 errors / 60% coverage ] ****** [305 done /215 queued / 16 running / 304 errors / 60% coverage ] ****** [306 done /215 queued / 16 running / 305 errors / 60% coverage ] ****** [306 done /215 queued / 16 running / 305 errors / 60% coverage ] ****** [307 done /219 queued / 16 running / 306 errors / 60% coverage ] ****** [307 done /219 queued / 16 running / 306 errors / 60% coverage ] ****** [308 done /220 queued / 16 running / 307 errors / 60% coverage ] ****** [308 done /220 queued / 16 running / 307 errors / 60% coverage ] ****** [309 done /221 queued / 16 running / 308 errors / 60% coverage ] ****** [309 done /221 queued / 16 running / 308 errors / 60% coverage ] ****** [310 done /221 queued / 16 running / 309 errors / 60% coverage ] ****** [310 done /221 queued / 16 running / 309 errors / 60% coverage ] ****** [311 done /221 queued / 16 running / 310 errors / 60% coverage ] ****** [311 done /221 queued / 16 running / 310 errors / 60% coverage ] ****** [312 done /222 queued / 16 running / 311 errors / 60% coverage ] ****** [312 done /222 queued / 16 running / 311 errors / 60% coverage ] ****** [313 done /224 queued / 16 running / 312 errors / 60% coverage ] ****** [313 done /224 queued / 16 running / 312 errors / 60% coverage ] ****** [314 done /227 queued / 16 running / 313 errors / 60% coverage ] ****** [314 done /227 queued / 16 running / 313 errors / 60% coverage ] ****** [315 done /228 queued / 16 running / 314 errors / 60% coverage ] ****** [315 done /228 queued / 16 running / 314 errors / 60% coverage ] ****** [316 done /227 queued / 16 running / 315 errors / 60% coverage ] ****** [316 done /227 queued / 16 running / 315 errors / 60% coverage ] ****** [317 done /231 queued / 16 running / 316 errors / 60% coverage ] ****** [317 done /231 queued / 16 running / 316 errors / 60% coverage ] ****** [318 done /232 queued / 16 running / 317 errors / 60% coverage ] ****** [318 done /232 queued / 16 running / 317 errors / 60% coverage ] ****** [319 done /233 queued / 16 running / 318 errors / 60% coverage ] ****** [319 done /233 queued / 16 running / 318 errors / 60% coverage ] ****** [320 done /233 queued / 16 running / 319 errors / 60% coverage ] ****** [320 done /233 queued / 16 running / 319 errors / 60% coverage ] ****** [321 done /233 queued / 16 running / 320 errors / 60% coverage ] ****** [321 done /233 queued / 16 running / 320 errors / 60% coverage ] ****** [322 done /234 queued / 16 running / 321 errors / 60% coverage ] ****** [322 done /234 queued / 16 running / 321 errors / 60% coverage ] ****** [323 done /235 queued / 16 running / 322 errors / 60% coverage ] ****** [323 done /235 queued / 16 running / 322 errors / 60% coverage ] ****** [324 done /236 queued / 16 running / 323 errors / 60% coverage ] ****** [324 done /236 queued / 16 running / 323 errors / 60% coverage ] ****** [325 done /236 queued / 16 running / 324 errors / 60% coverage ] ****** [325 done /236 queued / 16 running / 324 errors / 60% coverage ] ****** [326 done /236 queued / 16 running / 325 errors / 60% coverage ] ****** [326 done /236 queued / 16 running / 325 errors / 60% coverage ] ****** [327 done /236 queued / 16 running / 326 errors / 60% coverage ] ****** [327 done /236 queued / 16 running / 326 errors / 60% coverage ] ****** [328 done /236 queued / 16 running / 327 errors / 60% coverage ] ****** [328 done /236 queued / 16 running / 327 errors / 60% coverage ] ****** [329 done /236 queued / 16 running / 328 errors / 60% coverage ] ****** [329 done /236 queued / 16 running / 328 errors / 60% coverage ] ****** [330 done /237 queued / 16 running / 329 errors / 60% coverage ] ****** [330 done /237 queued / 16 running / 329 errors / 60% coverage ] ****** [331 done /238 queued / 16 running / 330 errors / 60% coverage ] ****** [331 done /238 queued / 16 running / 330 errors / 60% coverage ] ****** [332 done /237 queued / 16 running / 331 errors / 60% coverage ] ****** [332 done /237 queued / 16 running / 331 errors / 60% coverage ] ****** [333 done /236 queued / 16 running / 332 errors / 60% coverage ] ****** [333 done /236 queued / 16 running / 332 errors / 60% coverage ] ****** [334 done /235 queued / 16 running / 333 errors / 60% coverage ] ****** [334 done /235 queued / 16 running / 333 errors / 60% coverage ] ****** [335 done /238 queued / 16 running / 334 errors / 60% coverage ] ****** [335 done /238 queued / 16 running / 334 errors / 60% coverage ] ****** [336 done /238 queued / 16 running / 335 errors / 60% coverage ] ****** [336 done /238 queued / 16 running / 335 errors / 60% coverage ] ****** [337 done /239 queued / 16 running / 336 errors / 60% coverage ] ****** [337 done /239 queued / 16 running / 336 errors / 60% coverage ] ****** [338 done /240 queued / 16 running / 337 errors / 60% coverage ] ****** [338 done /240 queued / 16 running / 337 errors / 60% coverage ] ****** [339 done /240 queued / 16 running / 338 errors / 60% coverage ] ****** [339 done /240 queued / 16 running / 338 errors / 60% coverage ] ****** [340 done /241 queued / 16 running / 339 errors / 60% coverage ] ****** [340 done /241 queued / 16 running / 339 errors / 60% coverage ] ****** [341 done /242 queued / 16 running / 340 errors / 60% coverage ] ****** [341 done /242 queued / 16 running / 340 errors / 60% coverage ] ****** [342 done /243 queued / 16 running / 341 errors / 60% coverage ] ****** [342 done /243 queued / 16 running / 341 errors / 60% coverage ] ****** [343 done /245 queued / 16 running / 342 errors / 60% coverage ] ****** [343 done /245 queued / 16 running / 342 errors / 60% coverage ] ****** [344 done /245 queued / 16 running / 343 errors / 60% coverage ] ****** [344 done /245 queued / 16 running / 343 errors / 60% coverage ] ****** [345 done /245 queued / 16 running / 344 errors / 60% coverage ] ****** [345 done /245 queued / 16 running / 344 errors / 60% coverage ] ****** [346 done /246 queued / 16 running / 345 errors / 60% coverage ] ****** [346 done /246 queued / 16 running / 345 errors / 60% coverage ] ****** [347 done /247 queued / 16 running / 346 errors / 60% coverage ] ****** [347 done /247 queued / 16 running / 346 errors / 60% coverage ] ****** [348 done /247 queued / 16 running / 347 errors / 60% coverage ] ****** [348 done /247 queued / 16 running / 347 errors / 60% coverage ] ****** [349 done /248 queued / 16 running / 348 errors / 60% coverage ] ****** [349 done /248 queued / 16 running / 348 errors / 60% coverage ] ****** [350 done /250 queued / 16 running / 349 errors / 60% coverage ] ****** [350 done /250 queued / 16 running / 349 errors / 60% coverage ] ****** [351 done /250 queued / 16 running / 350 errors / 60% coverage ] ****** [351 done /250 queued / 16 running / 350 errors / 60% coverage ] ****** [352 done /252 queued / 16 running / 351 errors / 60% coverage ] ****** [352 done /252 queued / 16 running / 351 errors / 60% coverage ] ****** [353 done /253 queued / 16 running / 352 errors / 60% coverage ] ****** [353 done /253 queued / 16 running / 352 errors / 60% coverage ] ****** [354 done /254 queued / 16 running / 353 errors / 60% coverage ] ****** [354 done /254 queued / 16 running / 353 errors / 60% coverage ] ****** [355 done /254 queued / 16 running / 354 errors / 60% coverage ] ****** [355 done /254 queued / 16 running / 354 errors / 60% coverage ] ****** [356 done /256 queued / 16 running / 355 errors / 60% coverage ] ****** [356 done /256 queued / 16 running / 355 errors / 60% coverage ] ****** [357 done /259 queued / 16 running / 356 errors / 60% coverage ] ****** [357 done /259 queued / 16 running / 356 errors / 60% coverage ] ****** [358 done /260 queued / 16 running / 357 errors / 60% coverage ] ****** [358 done /260 queued / 16 running / 357 errors / 60% coverage ] ****** [359 done /264 queued / 16 running / 358 errors / 60% coverage ] ****** [359 done /264 queued / 16 running / 358 errors / 60% coverage ] ****** [360 done /266 queued / 16 running / 359 errors / 60% coverage ] ****** [360 done /266 queued / 16 running / 359 errors / 60% coverage ] ****** [361 done /268 queued / 16 running / 360 errors / 60% coverage ] ****** [361 done /268 queued / 16 running / 360 errors / 60% coverage ] ****** [362 done /268 queued / 16 running / 361 errors / 60% coverage ] ****** [362 done /268 queued / 16 running / 361 errors / 60% coverage ] ****** [363 done /268 queued / 16 running / 362 errors / 60% coverage ] ****** [363 done /268 queued / 16 running / 362 errors / 60% coverage ] ****** [364 done /268 queued / 16 running / 363 errors / 60% coverage ] ****** [364 done /268 queued / 16 running / 363 errors / 60% coverage ] ****** [365 done /269 queued / 16 running / 364 errors / 60% coverage ] ****** [365 done /269 queued / 16 running / 364 errors / 60% coverage ] ****** [366 done /270 queued / 16 running / 365 errors / 60% coverage ] ****** [366 done /270 queued / 16 running / 365 errors / 60% coverage ] ****** [367 done /272 queued / 16 running / 366 errors / 60% coverage ] ****** [367 done /272 queued / 16 running / 366 errors / 60% coverage ] ****** [368 done /275 queued / 16 running / 367 errors / 60% coverage ] ****** [368 done /275 queued / 16 running / 367 errors / 60% coverage ] ****** [369 done /276 queued / 16 running / 368 errors / 60% coverage ] ****** [369 done /276 queued / 16 running / 368 errors / 60% coverage ] ****** [370 done /276 queued / 16 running / 369 errors / 60% coverage ] ****** [370 done /276 queued / 16 running / 369 errors / 60% coverage ] ****** [371 done /278 queued / 16 running / 370 errors / 60% coverage ] ****** [371 done /278 queued / 16 running / 370 errors / 60% coverage ] ****** [372 done /281 queued / 16 running / 371 errors / 60% coverage ] ****** [372 done /281 queued / 16 running / 371 errors / 60% coverage ] ****** [373 done /282 queued / 16 running / 372 errors / 60% coverage ] ****** [373 done /282 queued / 16 running / 372 errors / 60% coverage ] ****** [374 done /284 queued / 16 running / 373 errors / 60% coverage ] ****** [374 done /284 queued / 16 running / 373 errors / 60% coverage ] ****** [375 done /284 queued / 16 running / 374 errors / 60% coverage ] ****** [375 done /284 queued / 16 running / 374 errors / 60% coverage ] ****** [376 done /285 queued / 16 running / 375 errors / 60% coverage ] ****** [376 done /285 queued / 16 running / 375 errors / 60% coverage ] ****** [377 done /285 queued / 16 running / 376 errors / 60% coverage ] ****** [377 done /285 queued / 16 running / 376 errors / 60% coverage ] ****** [378 done /286 queued / 16 running / 377 errors / 60% coverage ] ****** [378 done /286 queued / 16 running / 377 errors / 60% coverage ] ****** [379 done /287 queued / 16 running / 378 errors / 60% coverage ] ****** [379 done /287 queued / 16 running / 378 errors / 60% coverage ] ****** [380 done /286 queued / 16 running / 379 errors / 60% coverage ] ****** [380 done /286 queued / 16 running / 379 errors / 60% coverage ] ****** [381 done /288 queued / 16 running / 380 errors / 60% coverage ] ****** [381 done /288 queued / 16 running / 380 errors / 60% coverage ] ****** [382 done /289 queued / 16 running / 381 errors / 60% coverage ] ****** [382 done /289 queued / 16 running / 381 errors / 60% coverage ] ****** [383 done /291 queued / 16 running / 382 errors / 60% coverage ] ****** [383 done /291 queued / 16 running / 382 errors / 60% coverage ] ****** [384 done /293 queued / 16 running / 383 errors / 60% coverage ] ****** [384 done /293 queued / 16 running / 383 errors / 60% coverage ] ****** [385 done /292 queued / 16 running / 384 errors / 60% coverage ] ****** [385 done /292 queued / 16 running / 384 errors / 60% coverage ] ****** [386 done /292 queued / 16 running / 385 errors / 60% coverage ] ****** [386 done /292 queued / 16 running / 385 errors / 60% coverage ] ****** [387 done /293 queued / 16 running / 386 errors / 60% coverage ] ****** [387 done /293 queued / 16 running / 386 errors / 60% coverage ] ****** [388 done /292 queued / 16 running / 387 errors / 60% coverage ] ****** [388 done /292 queued / 16 running / 387 errors / 60% coverage ] ****** [389 done /291 queued / 16 running / 388 errors / 60% coverage ] ****** [389 done /291 queued / 16 running / 388 errors / 60% coverage ] ****** [390 done /291 queued / 16 running / 389 errors / 60% coverage ] ****** [390 done /291 queued / 16 running / 389 errors / 60% coverage ] ****** [391 done /291 queued / 16 running / 390 errors / 60% coverage ] ****** [391 done /291 queued / 16 running / 390 errors / 60% coverage ] ****** [392 done /291 queued / 16 running / 391 errors / 60% coverage ] ****** [392 done /291 queued / 16 running / 391 errors / 60% coverage ] ****** [393 done /290 queued / 16 running / 392 errors / 60% coverage ] ****** [393 done /290 queued / 16 running / 392 errors / 60% coverage ] ****** [394 done /290 queued / 16 running / 393 errors / 60% coverage ] ****** [394 done /290 queued / 16 running / 393 errors / 60% coverage ] ****** [395 done /289 queued / 16 running / 394 errors / 60% coverage ] ****** [395 done /289 queued / 16 running / 394 errors / 60% coverage ] ****** [396 done /288 queued / 16 running / 395 errors / 60% coverage ] ****** [396 done /288 queued / 16 running / 395 errors / 60% coverage ] ****** [397 done /287 queued / 16 running / 396 errors / 60% coverage ] ****** [397 done /287 queued / 16 running / 396 errors / 60% coverage ] ****** [398 done /287 queued / 16 running / 397 errors / 60% coverage ] ****** [398 done /287 queued / 16 running / 397 errors / 60% coverage ] ****** [399 done /287 queued / 16 running / 398 errors / 60% coverage ] ****** [399 done /287 queued / 16 running / 398 errors / 60% coverage ] ****** [400 done /286 queued / 16 running / 399 errors / 60% coverage ] ****** [400 done /286 queued / 16 running / 399 errors / 60% coverage ] ****** [401 done /288 queued / 16 running / 400 errors / 60% coverage ] ****** [401 done /288 queued / 16 running / 400 errors / 60% coverage ] ****** [402 done /289 queued / 16 running / 401 errors / 60% coverage ] ****** [402 done /289 queued / 16 running / 401 errors / 60% coverage ] ****** [403 done /289 queued / 16 running / 402 errors / 60% coverage ] ****** [403 done /289 queued / 16 running / 402 errors / 60% coverage ] ****** [404 done /292 queued / 16 running / 403 errors / 60% coverage ] ****** [404 done /292 queued / 16 running / 403 errors / 60% coverage ] ****** [405 done /292 queued / 16 running / 404 errors / 60% coverage ] ****** [405 done /292 queued / 16 running / 404 errors / 60% coverage ] ****** [406 done /293 queued / 16 running / 405 errors / 60% coverage ] ****** [406 done /293 queued / 16 running / 405 errors / 60% coverage ] ****** [407 done /297 queued / 16 running / 406 errors / 60% coverage ] ****** [407 done /297 queued / 16 running / 406 errors / 60% coverage ] ****** [408 done /298 queued / 16 running / 407 errors / 60% coverage ] ****** [408 done /298 queued / 16 running / 407 errors / 60% coverage ] ****** [409 done /301 queued / 16 running / 408 errors / 60% coverage ] ****** [409 done /301 queued / 16 running / 408 errors / 60% coverage ] ****** [410 done /302 queued / 16 running / 409 errors / 60% coverage ] ****** [410 done /302 queued / 16 running / 409 errors / 60% coverage ] ****** [411 done /303 queued / 16 running / 410 errors / 60% coverage ] ****** [411 done /303 queued / 16 running / 410 errors / 60% coverage ] ****** [412 done /304 queued / 16 running / 411 errors / 60% coverage ] ****** [412 done /304 queued / 16 running / 411 errors / 60% coverage ] ****** [413 done /305 queued / 16 running / 412 errors / 60% coverage ] ****** [413 done /305 queued / 16 running / 412 errors / 60% coverage ] ****** [414 done /305 queued / 16 running / 413 errors / 60% coverage ] ****** [414 done /305 queued / 16 running / 413 errors / 60% coverage ] ****** [415 done /306 queued / 16 running / 414 errors / 60% coverage ] ****** [415 done /306 queued / 16 running / 414 errors / 60% coverage ] ****** [416 done /308 queued / 16 running / 415 errors / 60% coverage ] ****** [416 done /308 queued / 16 running / 415 errors / 60% coverage ] ****** [417 done /308 queued / 16 running / 416 errors / 60% coverage ] ****** [417 done /308 queued / 16 running / 416 errors / 60% coverage ] ****** [418 done /308 queued / 16 running / 417 errors / 60% coverage ] ****** [418 done /308 queued / 16 running / 417 errors / 60% coverage ] ****** [419 done /309 queued / 16 running / 418 errors / 60% coverage ] ****** [419 done /309 queued / 16 running / 418 errors / 60% coverage ] ****** [420 done /312 queued / 16 running / 419 errors / 60% coverage ] ****** [420 done /312 queued / 16 running / 419 errors / 60% coverage ] ****** [421 done /313 queued / 16 running / 420 errors / 60% coverage ] ****** [421 done /313 queued / 16 running / 420 errors / 60% coverage ] ****** [422 done /315 queued / 16 running / 421 errors / 60% coverage ] ****** [422 done /315 queued / 16 running / 421 errors / 60% coverage ] ****** [423 done /317 queued / 16 running / 422 errors / 60% coverage ] ****** [423 done /317 queued / 16 running / 422 errors / 60% coverage ] ****** [424 done /320 queued / 16 running / 423 errors / 60% coverage ] ****** [424 done /320 queued / 16 running / 423 errors / 60% coverage ] ****** [425 done /321 queued / 16 running / 424 errors / 60% coverage ] ****** [425 done /321 queued / 16 running / 424 errors / 60% coverage ] ****** [426 done /320 queued / 16 running / 425 errors / 60% coverage ] ****** [426 done /320 queued / 16 running / 425 errors / 60% coverage ] ****** [427 done /323 queued / 16 running / 426 errors / 60% coverage ] ****** [427 done /323 queued / 16 running / 426 errors / 60% coverage ] ****** [428 done /322 queued / 16 running / 427 errors / 60% coverage ] ****** [428 done /322 queued / 16 running / 427 errors / 60% coverage ] ****** [429 done /323 queued / 16 running / 428 errors / 60% coverage ] ****** [429 done /323 queued / 16 running / 428 errors / 60% coverage ] ****** [430 done /324 queued / 16 running / 429 errors / 60% coverage ] ****** [430 done /324 queued / 16 running / 429 errors / 60% coverage ] ****** [431 done /325 queued / 16 running / 430 errors / 60% coverage ] ****** [431 done /325 queued / 16 running / 430 errors / 60% coverage ] ****** [432 done /325 queued / 16 running / 431 errors / 60% coverage ] ****** [432 done /325 queued / 16 running / 431 errors / 60% coverage ] ****** [433 done /324 queued / 16 running / 432 errors / 60% coverage ] ****** [433 done /324 queued / 16 running / 432 errors / 60% coverage ] ****** [434 done /325 queued / 16 running / 433 errors / 60% coverage ] ****** [434 done /325 queued / 16 running / 433 errors / 60% coverage ] ****** [435 done /327 queued / 16 running / 434 errors / 60% coverage ] ****** [435 done /327 queued / 16 running / 434 errors / 60% coverage ] ****** [436 done /329 queued / 16 running / 435 errors / 60% coverage ] ****** [436 done /329 queued / 16 running / 435 errors / 60% coverage ] ****** [437 done /331 queued / 16 running / 436 errors / 60% coverage ] ****** [437 done /331 queued / 16 running / 436 errors / 60% coverage ] ****** [438 done /331 queued / 16 running / 437 errors / 60% coverage ] ****** [438 done /331 queued / 16 running / 437 errors / 60% coverage ] ****** [439 done /331 queued / 16 running / 438 errors / 60% coverage ] ****** [439 done /331 queued / 16 running / 438 errors / 60% coverage ] ****** [440 done /332 queued / 16 running / 439 errors / 60% coverage ] ****** [440 done /332 queued / 16 running / 439 errors / 60% coverage ] ****** [441 done /333 queued / 16 running / 440 errors / 60% coverage ] ****** [441 done /333 queued / 16 running / 440 errors / 60% coverage ] ****** [442 done /332 queued / 16 running / 441 errors / 60% coverage ] ****** [442 done /332 queued / 16 running / 441 errors / 60% coverage ] ****** [443 done /333 queued / 16 running / 442 errors / 60% coverage ] ****** [443 done /333 queued / 16 running / 442 errors / 60% coverage ] ****** [444 done /333 queued / 16 running / 443 errors / 60% coverage ] ****** [444 done /333 queued / 16 running / 443 errors / 60% coverage ] ****** [445 done /332 queued / 16 running / 444 errors / 60% coverage ] ****** [445 done /332 queued / 16 running / 444 errors / 60% coverage ] ****** [446 done /332 queued / 16 running / 445 errors / 60% coverage ] ****** [446 done /332 queued / 16 running / 445 errors / 60% coverage ] ****** [447 done /331 queued / 16 running / 446 errors / 60% coverage ] ****** [447 done /331 queued / 16 running / 446 errors / 60% coverage ] ****** [448 done /331 queued / 16 running / 447 errors / 60% coverage ] ****** [448 done /331 queued / 16 running / 447 errors / 60% coverage ] ****** [449 done /331 queued / 16 running / 448 errors / 60% coverage ] ****** [449 done /331 queued / 16 running / 448 errors / 60% coverage ] ****** [450 done /333 queued / 16 running / 449 errors / 60% coverage ] ****** [450 done /333 queued / 16 running / 449 errors / 60% coverage ] ****** [451 done /334 queued / 16 running / 450 errors / 60% coverage ] ****** [451 done /334 queued / 16 running / 450 errors / 60% coverage ] ****** [452 done /338 queued / 16 running / 451 errors / 60% coverage ] ****** [452 done /338 queued / 16 running / 451 errors / 60% coverage ] ****** [453 done /338 queued / 16 running / 452 errors / 60% coverage ] ****** [453 done /338 queued / 16 running / 452 errors / 60% coverage ] ****** [454 done /340 queued / 16 running / 453 errors / 60% coverage ] ****** [454 done /340 queued / 16 running / 453 errors / 60% coverage ] ****** [455 done /339 queued / 16 running / 454 errors / 60% coverage ] ****** [455 done /339 queued / 16 running / 454 errors / 60% coverage ] ****** [456 done /340 queued / 16 running / 455 errors / 60% coverage ] ****** [456 done /340 queued / 16 running / 455 errors / 60% coverage ] ****** [457 done /345 queued / 16 running / 456 errors / 60% coverage ] ****** [457 done /345 queued / 16 running / 456 errors / 60% coverage ] ****** [458 done /346 queued / 16 running / 457 errors / 60% coverage ] ****** [458 done /346 queued / 16 running / 457 errors / 60% coverage ] ****** [459 done /348 queued / 16 running / 458 errors / 60% coverage ] ****** [459 done /348 queued / 16 running / 458 errors / 60% coverage ] ****** [460 done /348 queued / 16 running / 459 errors / 60% coverage ] ****** [460 done /348 queued / 16 running / 459 errors / 60% coverage ] ****** [461 done /348 queued / 16 running / 460 errors / 60% coverage ] ****** [461 done /348 queued / 16 running / 460 errors / 60% coverage ] ****** [462 done /351 queued / 16 running / 461 errors / 60% coverage ] ****** [462 done /351 queued / 16 running / 461 errors / 60% coverage ] ****** [463 done /353 queued / 16 running / 462 errors / 60% coverage ] ****** [463 done /353 queued / 16 running / 462 errors / 60% coverage ] ****** [464 done /355 queued / 16 running / 463 errors / 60% coverage ] ****** [464 done /355 queued / 16 running / 463 errors / 60% coverage ] ****** [465 done /357 queued / 16 running / 464 errors / 60% coverage ] ****** [465 done /357 queued / 16 running / 464 errors / 60% coverage ] ****** [466 done /357 queued / 16 running / 465 errors / 60% coverage ] ****** [466 done /357 queued / 16 running / 465 errors / 60% coverage ] ****** [467 done /358 queued / 16 running / 466 errors / 60% coverage ] ****** [467 done /358 queued / 16 running / 466 errors / 60% coverage ] ****** [468 done /359 queued / 16 running / 467 errors / 60% coverage ] ****** [468 done /359 queued / 16 running / 467 errors / 60% coverage ] ****** [469 done /360 queued / 16 running / 468 errors / 60% coverage ] ****** [469 done /360 queued / 16 running / 468 errors / 60% coverage ] ****** [470 done /360 queued / 16 running / 469 errors / 60% coverage ] ****** [470 done /360 queued / 16 running / 469 errors / 60% coverage ] ****** [471 done /361 queued / 16 running / 470 errors / 60% coverage ] ****** [471 done /361 queued / 16 running / 470 errors / 60% coverage ] ****** [472 done /363 queued / 16 running / 471 errors / 60% coverage ] ****** [472 done /363 queued / 16 running / 471 errors / 60% coverage ] ****** [473 done /364 queued / 16 running / 472 errors / 60% coverage ] ****** [473 done /364 queued / 16 running / 472 errors / 60% coverage ] ****** [474 done /365 queued / 16 running / 473 errors / 60% coverage ] ****** [474 done /365 queued / 16 running / 473 errors / 60% coverage ] ****** [475 done /367 queued / 16 running / 474 errors / 60% coverage ] ****** [475 done /367 queued / 16 running / 474 errors / 60% coverage ] ****** [476 done /369 queued / 16 running / 475 errors / 60% coverage ] ****** [476 done /369 queued / 16 running / 475 errors / 60% coverage ] ****** [477 done /370 queued / 16 running / 476 errors / 60% coverage ] ****** [477 done /370 queued / 16 running / 476 errors / 60% coverage ] ****** [478 done /369 queued / 16 running / 477 errors / 60% coverage ] ****** [478 done /369 queued / 16 running / 477 errors / 60% coverage ] ****** [479 done /369 queued / 16 running / 478 errors / 60% coverage ] ****** [479 done /369 queued / 16 running / 478 errors / 60% coverage ] ****** [480 done /369 queued / 16 running / 479 errors / 60% coverage ] ****** [480 done /369 queued / 16 running / 479 errors / 60% coverage ] ****** [481 done /371 queued / 16 running / 480 errors / 60% coverage ] ****** [481 done /371 queued / 16 running / 480 errors / 60% coverage ] ****** [482 done /373 queued / 16 running / 481 errors / 60% coverage ] ****** [482 done /373 queued / 16 running / 481 errors / 60% coverage ] ****** [483 done /373 queued / 16 running / 482 errors / 60% coverage ] ****** [483 done /373 queued / 16 running / 482 errors / 60% coverage ] ****** [484 done /375 queued / 16 running / 483 errors / 60% coverage ] ****** [484 done /375 queued / 16 running / 483 errors / 60% coverage ] ****** [485 done /374 queued / 16 running / 484 errors / 60% coverage ] ****** [485 done /374 queued / 16 running / 484 errors / 60% coverage ] ****** [486 done /376 queued / 16 running / 485 errors / 60% coverage ] ****** [486 done /376 queued / 16 running / 485 errors / 60% coverage ] ****** [487 done /377 queued / 16 running / 486 errors / 60% coverage ] ****** [487 done /377 queued / 16 running / 486 errors / 60% coverage ] ****** [488 done /376 queued / 16 running / 487 errors / 60% coverage ] ****** [488 done /376 queued / 16 running / 487 errors / 60% coverage ] ****** [489 done /377 queued / 16 running / 488 errors / 60% coverage ] ****** [489 done /377 queued / 16 running / 488 errors / 60% coverage ] ****** [490 done /379 queued / 16 running / 489 errors / 60% coverage ] ****** [490 done /379 queued / 16 running / 489 errors / 60% coverage ] ****** [491 done /379 queued / 16 running / 490 errors / 60% coverage ] ****** [491 done /379 queued / 16 running / 490 errors / 60% coverage ] ****** [492 done /379 queued / 16 running / 491 errors / 60% coverage ] ****** [492 done /379 queued / 16 running / 491 errors / 60% coverage ] ****** [493 done /380 queued / 16 running / 492 errors / 60% coverage ] ****** [493 done /380 queued / 16 running / 492 errors / 60% coverage ] ****** [494 done /384 queued / 16 running / 493 errors / 60% coverage ] ****** [494 done /384 queued / 16 running / 493 errors / 60% coverage ] ****** [495 done /385 queued / 16 running / 494 errors / 60% coverage ] ****** [495 done /385 queued / 16 running / 494 errors / 60% coverage ] ****** [496 done /386 queued / 16 running / 495 errors / 60% coverage ] ****** [496 done /386 queued / 16 running / 495 errors / 60% coverage ] ****** [497 done /387 queued / 16 running / 496 errors / 60% coverage ] ****** [497 done /387 queued / 16 running / 496 errors / 60% coverage ] ****** [498 done /388 queued / 16 running / 497 errors / 60% coverage ] ****** [498 done /388 queued / 16 running / 497 errors / 60% coverage ] ****** [499 done /388 queued / 16 running / 498 errors / 60% coverage ] ****** [499 done /388 queued / 16 running / 498 errors / 60% coverage ] ****** [500 done /389 queued / 16 running / 499 errors / 60% coverage ] ****** [500 done /389 queued / 16 running / 499 errors / 60% coverage ] ****** [501 done /391 queued / 16 running / 500 errors / 60% coverage ] ****** [501 done /391 queued / 16 running / 500 errors / 60% coverage ] ****** [502 done /394 queued / 16 running / 501 errors / 60% coverage ] ****** [502 done /394 queued / 16 running / 501 errors / 60% coverage ] ****** [503 done /395 queued / 16 running / 502 errors / 60% coverage ] ****** [503 done /395 queued / 16 running / 502 errors / 60% coverage ] ****** [504 done /395 queued / 16 running / 503 errors / 60% coverage ] ****** [504 done /395 queued / 16 running / 503 errors / 60% coverage ] ****** [505 done /398 queued / 16 running / 504 errors / 60% coverage ] ****** [505 done /398 queued / 16 running / 504 errors / 60% coverage ] ****** [506 done /399 queued / 16 running / 505 errors / 60% coverage ] ****** [506 done /399 queued / 16 running / 505 errors / 60% coverage ] ****** [507 done /400 queued / 16 running / 506 errors / 60% coverage ] ****** [507 done /400 queued / 16 running / 506 errors / 60% coverage ] ****** [508 done /402 queued / 16 running / 507 errors / 60% coverage ] ****** [508 done /402 queued / 16 running / 507 errors / 60% coverage ] ****** [509 done /403 queued / 16 running / 508 errors / 60% coverage ] ****** [509 done /403 queued / 16 running / 508 errors / 60% coverage ] ****** [510 done /403 queued / 16 running / 509 errors / 60% coverage ] ****** [510 done /403 queued / 16 running / 509 errors / 60% coverage ] ****** [511 done /404 queued / 16 running / 510 errors / 60% coverage ] ****** [511 done /404 queued / 16 running / 510 errors / 60% coverage ] ****** [512 done /404 queued / 16 running / 511 errors / 60% coverage ] ****** [512 done /404 queued / 16 running / 511 errors / 60% coverage ] ****** [513 done /404 queued / 16 running / 512 errors / 60% coverage ] ****** [513 done /404 queued / 16 running / 512 errors / 60% coverage ] ****** [514 done /405 queued / 16 running / 513 errors / 60% coverage ] ****** [514 done /405 queued / 16 running / 513 errors / 60% coverage ] ****** [515 done /406 queued / 16 running / 514 errors / 60% coverage ] ****** [515 done /406 queued / 16 running / 514 errors / 60% coverage ] ****** [516 done /408 queued / 16 running / 515 errors / 60% coverage ] ****** [516 done /408 queued / 16 running / 515 errors / 60% coverage ] ****** [517 done /409 queued / 16 running / 516 errors / 60% coverage ] ****** [517 done /409 queued / 16 running / 516 errors / 60% coverage ] ****** [518 done /410 queued / 16 running / 517 errors / 60% coverage ] ****** [518 done /410 queued / 16 running / 517 errors / 60% coverage ] ****** [519 done /411 queued / 16 running / 518 errors / 60% coverage ] ****** [519 done /411 queued / 16 running / 518 errors / 60% coverage ] ****** [520 done /411 queued / 16 running / 519 errors / 60% coverage ] ****** [520 done /411 queued / 16 running / 519 errors / 60% coverage ] ****** [521 done /414 queued / 16 running / 520 errors / 60% coverage ] ****** [521 done /414 queued / 16 running / 520 errors / 60% coverage ] ****** [522 done /415 queued / 16 running / 521 errors / 60% coverage ] ****** [522 done /415 queued / 16 running / 521 errors / 60% coverage ] ****** [523 done /414 queued / 16 running / 522 errors / 60% coverage ] ****** [523 done /414 queued / 16 running / 522 errors / 60% coverage ] ****** [524 done /416 queued / 16 running / 523 errors / 60% coverage ] ****** [524 done /416 queued / 16 running / 523 errors / 60% coverage ] ****** [525 done /417 queued / 16 running / 524 errors / 60% coverage ] ****** [525 done /417 queued / 16 running / 524 errors / 60% coverage ] ****** [526 done /420 queued / 16 running / 525 errors / 60% coverage ] ****** [526 done /420 queued / 16 running / 525 errors / 60% coverage ] ****** [527 done /422 queued / 16 running / 526 errors / 60% coverage ] ****** [527 done /422 queued / 16 running / 526 errors / 60% coverage ] ****** [528 done /424 queued / 16 running / 527 errors / 60% coverage ] ****** [528 done /424 queued / 16 running / 527 errors / 60% coverage ] ****** [529 done /427 queued / 16 running / 528 errors / 60% coverage ] ****** [529 done /427 queued / 16 running / 528 errors / 60% coverage ] ****** [530 done /428 queued / 16 running / 529 errors / 60% coverage ] ****** [530 done /428 queued / 16 running / 529 errors / 60% coverage ] ****** [531 done /432 queued / 16 running / 530 errors / 60% coverage ] ****** [531 done /432 queued / 16 running / 530 errors / 60% coverage ] ****** [532 done /436 queued / 16 running / 531 errors / 60% coverage ] ****** [532 done /436 queued / 16 running / 531 errors / 60% coverage ] ****** [533 done /438 queued / 16 running / 532 errors / 60% coverage ] ****** [533 done /438 queued / 16 running / 532 errors / 60% coverage ] ****** [534 done /439 queued / 16 running / 533 errors / 60% coverage ] ****** [534 done /439 queued / 16 running / 533 errors / 60% coverage ] ****** [535 done /440 queued / 16 running / 534 errors / 60% coverage ] ****** [535 done /440 queued / 16 running / 534 errors / 60% coverage ] ****** [536 done /442 queued / 16 running / 535 errors / 60% coverage ] ****** [536 done /442 queued / 16 running / 535 errors / 60% coverage ] ****** [537 done /443 queued / 16 running / 536 errors / 60% coverage ] ****** [537 done /443 queued / 16 running / 536 errors / 60% coverage ] ****** [538 done /443 queued / 16 running / 537 errors / 60% coverage ] ****** [538 done /443 queued / 16 running / 537 errors / 60% coverage ] ****** [539 done /444 queued / 16 running / 538 errors / 60% coverage ] ****** [539 done /444 queued / 16 running / 538 errors / 60% coverage ] ****** [540 done /444 queued / 16 running / 539 errors / 60% coverage ] ****** [540 done /444 queued / 16 running / 539 errors / 60% coverage ] ****** [541 done /445 queued / 16 running / 540 errors / 60% coverage ] ****** [541 done /445 queued / 16 running / 540 errors / 60% coverage ] ****** [542 done /446 queued / 16 running / 541 errors / 60% coverage ] ****** [542 done /446 queued / 16 running / 541 errors / 60% coverage ] ****** [543 done /446 queued / 16 running / 542 errors / 60% coverage ] ****** [543 done /446 queued / 16 running / 542 errors / 60% coverage ] ****** [544 done /445 queued / 16 running / 543 errors / 60% coverage ] ****** [544 done /445 queued / 16 running / 543 errors / 60% coverage ] ****** [545 done /445 queued / 16 running / 544 errors / 60% coverage ] ****** [545 done /445 queued / 16 running / 544 errors / 60% coverage ] ****** [546 done /446 queued / 16 running / 545 errors / 60% coverage ] ****** [546 done /446 queued / 16 running / 545 errors / 60% coverage ] ****** [547 done /448 queued / 16 running / 546 errors / 60% coverage ] ****** [547 done /448 queued / 16 running / 546 errors / 60% coverage ] ****** [548 done /449 queued / 16 running / 547 errors / 60% coverage ] ****** [548 done /449 queued / 16 running / 547 errors / 60% coverage ] ****** [549 done /449 queued / 16 running / 548 errors / 60% coverage ] ****** [549 done /449 queued / 16 running / 548 errors / 60% coverage ] ****** [550 done /449 queued / 16 running / 549 errors / 60% coverage ] ****** [550 done /449 queued / 16 running / 549 errors / 60% coverage ] ****** [551 done /449 queued / 16 running / 550 errors / 60% coverage ] ****** [551 done /449 queued / 16 running / 550 errors / 60% coverage ] ****** [552 done /450 queued / 16 running / 551 errors / 60% coverage ] ****** [552 done /450 queued / 16 running / 551 errors / 60% coverage ] ****** [553 done /450 queued / 16 running / 552 errors / 60% coverage ] ****** [553 done /450 queued / 16 running / 552 errors / 60% coverage ] ****** [554 done /451 queued / 16 running / 553 errors / 60% coverage ] ****** [554 done /451 queued / 16 running / 553 errors / 60% coverage ] ****** [555 done /452 queued / 16 running / 554 errors / 60% coverage ] ****** [555 done /452 queued / 16 running / 554 errors / 60% coverage ] ****** [556 done /452 queued / 16 running / 555 errors / 60% coverage ] ****** [556 done /452 queued / 16 running / 555 errors / 60% coverage ] ****** [557 done /453 queued / 16 running / 556 errors / 60% coverage ] ****** [557 done /453 queued / 16 running / 556 errors / 60% coverage ] ****** [558 done /454 queued / 16 running / 557 errors / 60% coverage ] ****** [558 done /454 queued / 16 running / 557 errors / 60% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","toString","apply","bound ","stringify","call","getOwnPropertyDescriptor","getOwnPropertyNames","isArray","every","randomBytes","reduce","charCodeAt","join"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0} start 0.0669 took 3.8614s
*-- Test Case {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0} start 3.97 took 24.5233s
*-- Errors occured in test {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switch_Base":0,"_bound":1}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"_bound":3} start 28.8646 took 22.2573s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"_bound":3}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"_bound":2} start 28.7969 took 23.6814s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"_bound":2}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"_bound":2}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0} start 52.663 took 17.0165s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"_bound":3,"ExpansionArg_int":0} start 52.6134 took 18.5503s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"_bound":3,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0} start 51.2778 took 22.0536s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":6,"ExpansionArg_string":"PureString"} start 69.905 took 15.9397s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":6,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":5} start 69.9517 took 16.3461s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":5}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"_bound":4,"ExpansionArg_string":"PureString"} start 71.2993 took 16.2718s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"_bound":4,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":3,"_bound":5,"ExpansionArg_string":"PureString"} start 71.2553 took 19.6345s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":3,"_bound":5,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":3,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":5,"ExpansionArg_string":"PureString"} start 73.4474 took 19.3056s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":5,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"_bound":6,"ExpansionArg_array_length":0} start 87.6971 took 17.1804s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"_bound":6,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":7,"ExpansionArg_int_2":0} start 91.172 took 14.9698s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":7,"ExpansionArg_int_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":7,"ExpansionArg_array_length":0} start 85.9357 took 20.3373s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":7,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","ExpansionArg_type_2":0,"_bound":5,"ExpansionArg_array_length":0} start 87.6614 took 19.754s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","ExpansionArg_type_2":0,"_bound":5,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","ExpansionArg_type_2":0,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":6,"ExpansionArg_array_length":0} start 92.9005 took 16.5571s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":6,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":6} start 91.0452 took 19.0436s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":6}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":8,"ExpansionArg_array_length":0} start 91.2275 took 19.9885s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":8,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":8}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":9,"ExpansionArg_array_element_0_type":0} start 106.4395 took 14.8578s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":9,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":2,"ExpansionArg_array_length":0,"_bound":8,"ExpansionArg_int":0} start 105.1471 took 16.4308s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":2,"ExpansionArg_array_length":0,"_bound":8,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":2,"ExpansionArg_array_length":0,"_bound":8}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":3,"ExpansionArg_array_length":0,"_bound":9,"ExpansionArg_string_2":"PureString"} start 105.1969 took 16.9524s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":3,"ExpansionArg_array_length":0,"_bound":9,"ExpansionArg_string_2":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":3,"ExpansionArg_array_length":0,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"_bound":10,"ExpansionArg_bool":false} start 105.0069 took 17.4376s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"_bound":10,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":1,"ExpansionArg_array_length":0,"_bound":7} start 105.0496 took 19.8921s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":1,"ExpansionArg_array_length":0,"_bound":7}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":1,"ExpansionArg_array_length":0,"_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":11,"ExpansionArg_array_element_0_type":0} start 105.0942 took 19.9955s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":11,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":8,"ExpansionArg_array_element_0_type":0} start 109.6241 took 16.5367s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":8,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":8}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":5,"_bound":8,"ExpansionArg_bool":false} start 107.7291 took 18.8208s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":5,"_bound":8,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":5,"_bound":8}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"ExpansionArg_type_2":0,"_bound":6,"ExpansionArg_bool":false} start 107.5679 took 19.5958s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"ExpansionArg_type_2":0,"_bound":6,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"ExpansionArg_type_2":0,"_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"_bound":8,"ExpansionArg_bool":false} start 106.4956 took 21.0812s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"_bound":8,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"_bound":8}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_type_2":0,"_bound":7,"ExpansionArg_array_element_0_type":0} start 107.6436 took 20.8859s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_type_2":0,"_bound":7,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_type_2":0,"_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"_bound":7,"ExpansionArg_bool":false} start 109.5736 took 21.639s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"_bound":7,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"_bound":9,"ExpansionArg_bool":false} start 111.3336 took 20.4911s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"_bound":9,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":10,"ExpansionArg_array_element_0_type":0} start 111.3986 took 20.9549s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":10,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":11,"ExpansionArg_array_element_1_type":0} start 121.4212 took 14.8229s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":11,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":10,"ExpansionArg_array_element_0_int":0} start 121.5123 took 15.6724s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":10,"ExpansionArg_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":10,"ExpansionArg_array_element_1_type":0} start 126.3525 took 15.0282s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":10,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":11,"ExpansionArg_string":"PureString"} start 126.635 took 15.5043s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":11,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":12,"ExpansionArg_array_element_0_int":0} start 125.2842 took 18.1786s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":12,"ExpansionArg_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":9} start 126.8446 took 17.3959s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":9}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":0,"_bound":9,"ExpansionArg_array_element_1_type":0} start 128.6728 took 16.3158s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":0,"_bound":9,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":0,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":13,"ExpansionArg_array_element_1_type":0} start 125.1969 took 22.172s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":13,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":9,"ExpansionArg_array_element_0_int":0} start 126.2889 took 21.5757s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":9,"ExpansionArg_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":2,"_bound":10,"ExpansionArg_int":0} start 131.368 took 17.0657s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":2,"_bound":10,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":2,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":12,"ExpansionArg_array_length_2":0} start 126.7736 took 21.9196s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":12,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":10,"ExpansionArg_int":0} start 126.6976 took 22.2667s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":10,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":6,"_bound":7,"ExpansionArg_bool_2":false} start 127.2884 took 22.0641s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":6,"_bound":7,"ExpansionArg_bool_2":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":6,"_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":12,"ExpansionArg_array_element_1_type":0} start 132.4483 took 17.4296s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":12,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_type_2":0,"_bound":8,"ExpansionArg_array_element_0_int":0} start 128.697 took 22.9998s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_type_2":0,"_bound":8,"ExpansionArg_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_type_2":0,"_bound":8}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"_bound":11,"ExpansionArg_array_element_0_string":"PureString"} start 132.4864 took 23.1945s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"_bound":11,"ExpansionArg_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":12,"ExpansionArg_array_element_0_string":"PureString"} start 137.3158 took 21.8974s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":12,"ExpansionArg_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":11} start 141.5408 took 18.3001s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":11}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":13} start 143.5278 took 17.0394s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":13}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":13,"ExpansionArg_array_element_2_type":0} start 136.3379 took 24.4561s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":13,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":15,"ExpansionArg_array_element_1_type":0} start 145.1157 took 17.0853s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":15,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_int":0,"_bound":14,"ExpansionArg_array_element_0_bool":false} start 144.3892 took 18.1872s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_int":0,"_bound":14,"ExpansionArg_array_element_0_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_int":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool_2":false,"_bound":10,"ExpansionArg_string":"PureString"} start 149.4333 took 17.5693s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool_2":false,"_bound":10,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool_2":false,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":13,"ExpansionArg_array_element_1_type":0} start 142.2684 took 25.6364s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":13,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool_2":false,"_bound":8} start 150.0248 took 18.3582s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool_2":false,"_bound":8}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool_2":false,"_bound":8}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool_2":false,"_bound":11,"ExpansionArg_array_length":0} start 151.8193 took 18.9648s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool_2":false,"_bound":11,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool_2":false,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":14,"ExpansionArg_array_element_0_bool":false} start 155.8267 took 16.958s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":14,"ExpansionArg_array_element_0_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":12,"ExpansionArg_array_element_2_type":0} start 147.4752 took 25.5575s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":12,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":10} start 147.9301 took 25.402s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":10}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":11} start 148.614 took 25.3188s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":11}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":12,"ExpansionArg_string":"PureString"} start 148.8856 took 25.3124s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":12,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":11,"ExpansionArg_array_element_0_string":"PureString"} start 149.1406 took 28.1763s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":11,"ExpansionArg_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":0,"_bound":10,"ExpansionArg_array_element_0_string":"PureString"} start 161.0617 took 17.962s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":0,"_bound":10,"ExpansionArg_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":0,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":13,"ExpansionArg_array_element_0_bool":false} start 159.3589 took 24.584s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":13,"ExpansionArg_array_element_0_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_string":"","_bound":12} start 159.9663 took 24.9575s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_string":"","_bound":12}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_string":"","_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool_2":false,"_bound":9,"ExpansionArg_int":0} start 162.3337 took 23.2776s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool_2":false,"_bound":9,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool_2":false,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_string":"","_bound":13,"ExpansionArg_array_element_0_int":0} start 160.6983 took 27.382s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_string":"","_bound":13,"ExpansionArg_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_string":"","_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":0,"_bound":11,"ExpansionArg_array_element_2_type":0} start 168.6202 took 19.6645s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":0,"_bound":11,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":0,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":16,"ExpansionArg_array_element_0_array_length":0} start 162.7558 took 25.7112s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":16,"ExpansionArg_array_element_0_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":15,"ExpansionArg_array_element_0_array_length":0} start 172.9151 took 17.4618s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":15,"ExpansionArg_array_element_0_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":12,"ExpansionArg_array_element_1_string":"PureString"} start 170.8933 took 19.6634s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":12,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_bool":false,"_bound":15,"ExpansionArg_array_element_0_string":"PureString"} start 167.0924 took 24.5411s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_bool":false,"_bound":15,"ExpansionArg_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_bool":false,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":0,"_bound":9} start 167.983 took 23.9325s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":0,"_bound":9}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":0,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":13,"ExpansionArg_bool":false} start 174.3342 took 18.6775s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":13,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":11} start 174.1501 took 19.3545s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":11}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":15,"ExpansionArg_array_element_2_type":0} start 173.1468 took 24.887s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":15,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":0,"_bound":11,"ExpansionArg_array_element_0_bool":false} start 179.1746 took 19.6206s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":0,"_bound":11,"ExpansionArg_array_element_0_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":0,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"_bound":12} start 173.5014 took 25.4804s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"_bound":12}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":12,"ExpansionArg_array_element_0_bool":false} start 177.4571 took 24.6697s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":12,"ExpansionArg_array_element_0_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":0,"_bound":10} start 185.1481 took 19.1367s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":0,"_bound":10}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":0,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":14,"ExpansionArg_array_element_2_type":0} start 188.4129 took 18.1201s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":14,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":12,"ExpansionArg_array_element_1_type":0} start 185.7495 took 22.5872s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":12,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":14} start 188.5529 took 21.1293s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":14}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":14,"ExpansionArg_array_element_0_array_length":0} start 184.06 took 25.8603s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":14,"ExpansionArg_array_element_0_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":12,"ExpansionArg_array_element_1_string":"PureString"} start 193.6242 took 17.8206s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":12,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"_bound":13,"ExpansionArg_array_element_0_type":0} start 188.2437 took 24.7134s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"_bound":13,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":13} start 190.7371 took 24.326s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":13}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":13} start 190.5039 took 25.2082s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":13}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":14,"ExpansionArg_array_length_2":0} start 193.1401 took 22.7546s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":14,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":14,"ExpansionArg_array_element_1_int":0} start 191.7688 took 24.149s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":14,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":15,"ExpansionArg_array_element_1_bool":false} start 192.1143 took 24.2689s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":15,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"_bound":14,"ExpansionArg_array_element_2_int":0} start 198.1768 took 19.7522s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"_bound":14,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"_bound":13,"ExpansionArg_string":"PureString"} start 199.116 took 19.717s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"_bound":13,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","_bound":14} start 215.3683 took 3.8513s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","_bound":14}
* Error: Exception E: SyntaxError: Unexpected end of JSON input of test data on 
* Error: Exception E: SyntaxError: Unexpected end of JSON input of coverage data on 
* Error: Error extracting final output - a fatal error must have occured
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":0,"_bound":12,"ExpansionArg_array_element_0_array_length":0} start 198.8999 took 23.9894s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":0,"_bound":12,"ExpansionArg_array_element_0_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":3,"_bound":12,"ExpansionArg_string":"PureString"} start 208.5972 took 18.088s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":3,"_bound":12,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":3,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":13,"ExpansionArg_array_element_0_array_length":0} start 202.3063 took 24.9778s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":13,"ExpansionArg_array_element_0_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_type_2":0,"_bound":11,"ExpansionArg_array_element_1_string":"PureString"} start 204.4176 took 23.4513s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_type_2":0,"_bound":11,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_type_2":0,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":0,"_bound":11,"ExpansionArg_array_element_1_type":0} start 210.0267 took 18.4474s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":0,"_bound":11,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":0,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"_bound":15,"ExpansionArg_array_element_1_bool":false} start 209.8172 took 19.2897s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"_bound":15,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","_bound":15,"ExpansionArg_array_element_1_type":0} start 206.6691 took 22.9875s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","_bound":15,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":14,"ExpansionArg_array_element_1_type":0} start 216.122 took 17.7207s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":14,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":15,"ExpansionArg_bool":false} start 219.0209 took 15.8868s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":15,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":14,"ExpansionArg_array_element_1_bool":false} start 211.5656 took 23.5713s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":14,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":16,"ExpansionArg_array_element_2_bool":false} start 218.0942 took 17.3452s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":16,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":16,"ExpansionArg_array_element_1_array_length":0} start 216.5757 took 19.1068s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":16,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":13,"ExpansionArg_array_element_1_int":0} start 213.0621 took 23.7134s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":13,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":5,"_bound":13,"ExpansionArg_bool":false} start 216.3327 took 22.9798s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":5,"_bound":13,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":5,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":14,"ExpansionArg_array_element_1_string":"PureString"} start 215.84 took 23.7238s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":14,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":14,"ExpansionArg_int":0} start 219.2592 took 20.6922s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":14,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"_bound":15} start 223.0056 took 18.2469s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"_bound":15}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":12,"ExpansionArg_array_element_1_int":0} start 228.6377 took 17.5569s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":12,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":14,"ExpansionArg_int":0} start 227.4082 took 18.9404s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":14,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_array_length":0} start 229.2253 took 19.2232s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":15,"ExpansionArg_bool":false} start 226.7681 took 21.9687s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":15,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":15,"ExpansionArg_array_element_1_array_length":0} start 235.3772 took 15.2197s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":15,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":13} start 234.0011 took 18.092s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":13}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":18,"ExpansionArg_array_element_2_array_length":0} start 235.5889 took 16.7598s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":18,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_string":"PureString"} start 236.8853 took 15.6436s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":16,"ExpansionArg_array_element_1_int":0} start 229.7773 took 23.0105s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":16,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_1_bool":false} start 228.0274 took 25.5097s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_array_length_2":0} start 239.4525 took 16.2742s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":16,"ExpansionArg_array_length_2":0} start 235.0522 took 22.6421s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":16,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":17,"ExpansionArg_array_element_2_string":"PureString"} start 235.8586 took 22.2702s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":17,"ExpansionArg_array_element_2_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":16,"ExpansionArg_array_element_1_bool":false} start 239.8393 took 22.2454s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":16,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":15,"ExpansionArg_int":0} start 241.3572 took 21.0477s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":15,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":15,"ExpansionArg_array_element_1_int":0} start 240.1182 took 22.9108s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":15,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"_bound":17,"ExpansionArg_array_element_1_type":0} start 252.4923 took 13.9886s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"_bound":17,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":12,"ExpansionArg_array_element_1_type":0} start 250.7844 took 17.0295s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":12,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":16,"ExpansionArg_array_length_2":0} start 248.8731 took 19.2026s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":16,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":13} start 246.545 took 21.5307s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":13}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"_bound":16} start 246.2783 took 22.2169s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_1_array_length":0} start 253.7416 took 15.4409s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":16,"ExpansionArg_string":"PureString"} start 248.5451 took 20.9437s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":16,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":14} start 252.2314 took 19.7949s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":14}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":15,"ExpansionArg_array_element_3_type":0} start 255.8424 took 16.4175s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":15,"ExpansionArg_array_element_3_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"_bound":14,"ExpansionArg_array_element_1_string":"PureString"} start 252.7321 took 20.4441s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"_bound":14,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":0,"_bound":12} start 258.2047 took 15.3187s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":0,"_bound":12}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":1,"_bound":14} start 252.9165 took 20.7909s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":1,"_bound":14}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":1,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"_bound":17,"ExpansionArg_array_element_2_type":0} start 257.7981 took 16.251s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"_bound":17,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":3,"_bound":13,"ExpansionArg_string":"PureString"} start 262.52 took 14.3089s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":3,"_bound":13,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":3,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_array_length":0} start 262.2252 took 16.4966s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"_bound":16,"ExpansionArg_array_element_1_type":0} start 267.9933 took 16.5594s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"_bound":16,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":12,"ExpansionArg_array_element_0_type":0} start 268.256 took 16.6216s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":12,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":2,"_bound":11,"ExpansionArg_int":0} start 263.1171 took 22.7484s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":2,"_bound":11,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":2,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":16} start 269.6175 took 16.9323s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"_bound":17,"ExpansionArg_array_element_1_bool":false} start 268.6175 took 20.0542s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"_bound":17,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"_bound":15,"ExpansionArg_array_element_2_type":0} start 266.5852 took 22.2895s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"_bound":15,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":6,"_bound":14,"ExpansionArg_bool":false} start 272.3881 took 16.7472s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":6,"_bound":14,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":6,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":15} start 274.181 took 16.8994s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":15}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":14,"ExpansionArg_array_element_3_type":0} start 269.286 took 22.2069s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":14,"ExpansionArg_array_element_3_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"_bound":14,"ExpansionArg_array_element_2_int":0} start 268.4214 took 23.7793s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"_bound":14,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","_bound":13,"ExpansionArg_array_element_1_type":0} start 272.1974 took 21.5074s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","_bound":13,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":14} start 278.8322 took 17.8765s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":14}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_2_int":0} start 273.6265 took 23.3463s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_type_2":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":17,"ExpansionArg_array_element_1_bool":false} start 273.3172 took 24.349s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":17,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":16,"ExpansionArg_array_element_1_int":0} start 273.8971 took 23.9755s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":16,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":16,"ExpansionArg_bool":false} start 276.9484 took 24.5377s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":16,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":2,"_bound":15,"ExpansionArg_int":0} start 285.0337 took 17.9153s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":2,"_bound":15,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":2,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":12} start 286.6703 took 17.8523s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":12}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_array_length":0} start 288.7928 took 17.9277s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_string":"PureString"} start 291.2891 took 17.1879s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":15,"ExpansionArg_int":0} start 284.7015 took 23.9369s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":15,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_string":"PureString"} start 291.6409 took 17.2228s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":15,"ExpansionArg_array_element_2_bool":false} start 292.381 took 16.7572s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":15,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":13,"ExpansionArg_string":"PureString"} start 286.0015 took 24.2034s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":13,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_array_length_2":0} start 289.2919 took 23.0008s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_2_bool":false} start 297.0929 took 16.0279s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_int":0} start 289.0228 took 24.3037s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"_bound":17,"ExpansionArg_array_element_2_int":0} start 298.0216 took 15.504s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"_bound":17,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":15} start 296.8201 took 16.7056s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":15}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":16,"ExpansionArg_int":0} start 293.8682 took 23.2365s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":16,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":2,"_bound":14,"ExpansionArg_array_element_0_int":0} start 304.6241 took 14.6868s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":2,"_bound":14,"ExpansionArg_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":2,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_array_length":0} start 297.8248 took 21.8558s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":2,"_bound":15,"ExpansionArg_int":0} start 309.0776 took 12.4788s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":2,"_bound":15,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":2,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":17,"ExpansionArg_array_element_2_array_length":0} start 309.3573 took 13.7836s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":17,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"_bound":15,"ExpansionArg_array_element_1_type":0} start 308.5773 took 14.5644s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"_bound":15,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":11,"ExpansionArg_array_element_1_type":0} start 306.8373 took 16.7484s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":11,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_array_length_2":0} start 301.7039 took 22.458s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":16,"ExpansionArg_bool":false} start 303.0561 took 22.2177s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":16,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"_bound":13} start 308.7802 took 16.7575s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"_bound":13}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":0,"_bound":16,"ExpansionArg_array_element_2_array_length":0} start 313.4375 took 14.7624s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":0,"_bound":16,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":15} start 313.9049 took 15.2523s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":15}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":5,"_bound":15,"ExpansionArg_bool":false} start 317.2312 took 13.0902s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":5,"_bound":15,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":5,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":16,"ExpansionArg_array_element_2_string":"PureString"} start 310.3616 took 20.4542s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":16,"ExpansionArg_array_element_2_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":14,"ExpansionArg_bool":false} start 312.4208 took 19.9853s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":14,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_2_string":"PureString"} start 313.2254 took 21.0429s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_2_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":18,"ExpansionArg_array_element_2_bool":false} start 313.6845 took 21.7133s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":18,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_3_type":0} start 323.245 took 14.1797s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_3_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_array_length_2":0} start 325.622 took 13.4677s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":15} start 319.4162 took 20.4765s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":15}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":16,"ExpansionArg_array_element_0_string":"PureString"} start 319.7923 took 21.1345s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":16,"ExpansionArg_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_string":"PureString"} start 325.4535 took 15.8067s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":16} start 321.6772 took 21.4237s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":0,"_bound":12} start 323.4724 took 20.2805s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":0,"_bound":12}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"_bound":14,"ExpansionArg_array_element_1_string":"PureString"} start 328.2884 took 15.7683s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"_bound":14,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":17,"ExpansionArg_string":"PureString"} start 323.7887 took 20.6559s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":17,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":0,"_bound":12,"ExpansionArg_array_element_1_type":0} start 324.342 took 20.6176s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":0,"_bound":12,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_array_length_2":0} start 330.4741 took 14.9267s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"_bound":16,"ExpansionArg_array_element_2_bool":false} start 329.2728 took 16.5088s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"_bound":16,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":15,"ExpansionArg_array_length_2":0} start 334.4328 took 14.9429s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":15,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_int":0} start 332.5443 took 17.1089s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":19,"ExpansionArg_array_element_2_string":"PureString"} start 335.4978 took 15.8854s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":19,"ExpansionArg_array_element_2_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_string":"PureString"} start 331.0164 took 20.9563s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":13,"ExpansionArg_array_element_1_type":0} start 340.1295 took 15.1113s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":13,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":16} start 337.5245 took 21.4169s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_array_length":0} start 339.2176 took 20.3992s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":17,"ExpansionArg_array_element_0_bool":false} start 341.0496 took 20.8687s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":17,"ExpansionArg_array_element_0_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":1,"_bound":16} start 345.5645 took 17.4239s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":1,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":1,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":14,"ExpansionArg_array_element_1_type":0} start 341.4135 took 21.7924s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":14,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"_bound":14} start 343.231 took 20.3972s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"_bound":14}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":15,"ExpansionArg_array_element_1_int":0} start 345.1136 took 20.2062s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":15,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":18,"ExpansionArg_array_element_2_string":"PureString"} start 349.7825 took 15.8003s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":18,"ExpansionArg_array_element_2_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":17,"ExpansionArg_array_element_2_int":0} start 349.4977 took 16.3514s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":17,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":16,"ExpansionArg_array_element_1_bool":false} start 344.2215 took 22.0095s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":16,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_1_string":"PureString"} start 343.8604 took 22.8091s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_type_2":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":1,"_bound":14} start 352.1177 took 15.1358s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":1,"_bound":14}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":1,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":19,"ExpansionArg_array_element_2_array_length":0} start 345.9256 took 21.7113s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":19,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"_bound":15,"ExpansionArg_array_element_1_bool":false} start 351.5016 took 16.1354s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"_bound":15,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":18,"ExpansionArg_bool":false} start 344.6251 took 23.5938s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":18,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"_bound":17,"ExpansionArg_array_element_0_array_element_0_type":0} start 359.2165 took 18.1985s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"_bound":17,"ExpansionArg_array_element_0_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"_bound":18,"ExpansionArg_array_element_1_bool":false} start 363.3339 took 14.6633s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"_bound":18,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":5,"_bound":17,"ExpansionArg_array_element_1_bool":false} start 363.1518 took 15.261s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":5,"_bound":17,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":5,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"_bound":16,"ExpansionArg_array_element_0_array_element_0_type":0} start 355.3215 took 23.293s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"_bound":16,"ExpansionArg_array_element_0_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":18,"ExpansionArg_array_element_0_array_length":0} start 362.0939 took 17.0541s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":18,"ExpansionArg_array_element_0_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"_bound":18,"ExpansionArg_array_element_1_type":0} start 365.7009 took 16.1589s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"_bound":18,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":6,"_bound":16,"ExpansionArg_bool":false} start 366.0105 took 16.1521s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":6,"_bound":16,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":6,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_array_length":0} start 368.3514 took 14.8159s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"_bound":17,"ExpansionArg_array_element_1_type":0} start 359.7298 took 23.9653s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"_bound":17,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_1_int":0} start 366.791 took 18.3219s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_int":0} start 368.1273 took 17.2225s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_array_length":0} start 366.3366 took 19.2801s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"_bound":15,"ExpansionArg_string":"PureString"} start 363.7937 took 22.2111s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"_bound":15,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"_bound":13,"ExpansionArg_array_element_1_string":"PureString"} start 365.5126 took 22.7568s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"_bound":13,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_1_bool":false} start 367.4866 took 22.4964s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":3,"_bound":15,"ExpansionArg_string":"PureString"} start 367.8176 took 25.089s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":3,"_bound":15,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":3,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":22,"ExpansionArg_array_element_1_array_length":0} start 378.1816 took 15.3711s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":22,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":22}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_int":0} start 378.5355 took 15.4132s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_array_length_2":0} start 379.2698 took 15.514s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":16} start 378.7736 took 18.2382s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_array_length_2":0} start 382.3004 took 17.1082s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_int":0} start 383.8502 took 17.5285s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_string":"PureString"} start 385.25 took 16.3954s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":21,"ExpansionArg_array_element_1_string":"PureString"} start 385.5307 took 16.3683s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":21,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_string":"PureString"} start 377.5503 took 25.0386s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":17,"ExpansionArg_bool":false} start 388.496 took 16.6695s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":17,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_array_length":0} start 381.9695 took 24.3607s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_string":"PureString"} start 383.3959 took 23.9368s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","_bound":16,"ExpansionArg_array_element_1_type":0} start 385.7899 took 23.0308s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","_bound":16,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":16,"ExpansionArg_int":0} start 386.1808 took 23.2278s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":16,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":17,"ExpansionArg_bool":false} start 394.0611 took 16.2876s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":17,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":14} start 393.0641 took 18.1404s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":14}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":16,"ExpansionArg_array_element_1_bool":false} start 394.9074 took 17.5243s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":16,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":16,"ExpansionArg_array_element_1_array_length":0} start 390.201 took 23.3716s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":16,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":19} start 393.7256 took 23.5169s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":19}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":1,"_bound":17} start 401.7896 took 15.7857s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":1,"_bound":17}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":1,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":15,"ExpansionArg_array_element_1_int":0} start 402.7822 took 16.8912s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":15,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_int":0} start 397.1813 took 23.4834s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":0,"_bound":10,"ExpansionArg_array_element_1_type":0} start 399.5468 took 23.4142s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":0,"_bound":10,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_type_2":0,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":17} start 407.4575 took 16.3913s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":17}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","_bound":16,"ExpansionArg_array_element_2_type":0} start 401.5494 took 23.5451s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","_bound":16,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_1_type":0} start 409.5532 took 15.7855s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_type_2":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":13,"ExpansionArg_array_element_2_type":0} start 402.0557 took 23.6384s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":13,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_array_length_2":0} start 405.3525 took 23.0244s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":16,"ExpansionArg_int":0} start 406.4451 took 22.7844s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":16,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":18} start 411.3607 took 18.1452s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":18}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":2,"_bound":15,"ExpansionArg_int":0} start 409.0054 took 20.8909s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":2,"_bound":15,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":2,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_array_length":0} start 412.5776 took 17.3187s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"_bound":17,"ExpansionArg_array_element_1_bool":false} start 413.7335 took 19.5366s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"_bound":17,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_array_length_2":0} start 410.4446 took 23.0744s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"_bound":16,"ExpansionArg_array_element_3_int":0} start 417.3734 took 22.5553s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"_bound":16,"ExpansionArg_array_element_3_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":3,"_bound":18,"ExpansionArg_string":"PureString"} start 417.6814 took 22.6554s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":3,"_bound":18,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":3,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":6,"_bound":13,"ExpansionArg_array_element_0_bool":false} start 424.0072 took 16.5041s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":6,"_bound":13,"ExpansionArg_array_element_0_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":6,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":16,"ExpansionArg_array_element_2_type":0} start 425.8854 took 15.4992s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":16,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":17,"ExpansionArg_array_element_3_type":0} start 420.7895 took 21.0918s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":17,"ExpansionArg_array_element_3_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"_bound":14,"ExpansionArg_array_element_1_type":0} start 419.877 took 23.5958s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"_bound":14,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":1,"_bound":14} start 428.5296 took 16.7549s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":1,"_bound":14}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":1,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":16,"ExpansionArg_array_element_3_type":0} start 423.1203 took 23.5643s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":16,"ExpansionArg_array_element_3_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"_bound":15} start 425.5097 took 21.767s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"_bound":15}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":0,"_bound":12,"ExpansionArg_array_element_2_type":0} start 425.2257 took 22.3007s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":0,"_bound":12,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":6,"_bound":18,"ExpansionArg_bool":false} start 429.3605 took 18.7099s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":6,"_bound":18,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":6,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":17,"ExpansionArg_bool":false} start 430.0854 took 18.3009s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":17,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_string":"PureString"} start 433.7018 took 15.175s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":21,"ExpansionArg_array_element_1_array_length":0} start 433.3817 took 17.4275s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":21,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"_bound":19,"ExpansionArg_array_element_2_bool":false} start 429.7375 took 23.1273s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"_bound":19,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":16} start 430.5335 took 23.8897s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_bool":false,"_bound":16,"ExpansionArg_array_element_0_string":"PureString"} start 441.5135 took 19.091s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_bool":false,"_bound":16,"ExpansionArg_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":17,"ExpansionArg_array_element_0_array_length":0} start 443.6259 took 18.5229s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":17,"ExpansionArg_array_element_0_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"ExpansionArg_array_element_3_int":0,"_bound":17} start 440.5845 took 23.2726s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"ExpansionArg_array_element_3_int":0,"_bound":17}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"ExpansionArg_array_element_3_int":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":19,"ExpansionArg_int":0} start 447.4261 took 16.7457s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":19,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"ExpansionArg_array_element_3_int":0,"_bound":18,"ExpansionArg_array_element_3_string":"PureString"} start 440.0615 took 24.6032s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"ExpansionArg_array_element_3_int":0,"_bound":18,"ExpansionArg_array_element_3_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"ExpansionArg_array_element_3_int":0,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":20,"ExpansionArg_bool":false} start 440.4804 took 24.8404s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":20,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":18} start 441.9816 took 23.7075s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":18}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":21,"ExpansionArg_string":"PureString"} start 449.0003 took 17.6432s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":21,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_int":0} start 445.3917 took 22.7932s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_bool":false,"_bound":15,"ExpansionArg_array_element_0_int":0} start 446.848 took 24.4929s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_bool":false,"_bound":15,"ExpansionArg_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_bool":false,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":21,"ExpansionArg_array_element_2_string":"PureString"} start 453.0291 took 18.5568s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":21,"ExpansionArg_array_element_2_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":22,"ExpansionArg_array_length_2":0} start 448.2527 took 23.6972s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":22,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":22}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":5,"_bound":15,"ExpansionArg_array_element_1_bool":false} start 447.6783 took 25.1186s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":5,"_bound":15,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":5,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_array_length_2":0} start 454.5446 took 18.8307s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_string":"PureString"} start 448.6175 took 25.0304s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_int":0} start 450.9205 took 25.7207s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_int":0} start 462.3847 took 18.1026s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"_bound":16,"ExpansionArg_array_element_2_bool":false} start 464.3521 took 18.4807s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"_bound":16,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"_bound":16,"ExpansionArg_array_element_3_int":0} start 468.3019 took 17.3611s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"_bound":16,"ExpansionArg_array_element_3_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":22,"ExpansionArg_array_element_2_array_length":0} start 460.7485 took 25.1541s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":22,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":22}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":21,"ExpansionArg_array_length_2":0} start 465.5055 took 24.143s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":21,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_bool":false,"_bound":14} start 464.019 took 25.9684s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_bool":false,"_bound":14}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_bool":false,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_string":"","_bound":19,"ExpansionArg_array_element_3_bool":false} start 464.814 took 25.5015s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_string":"","_bound":19,"ExpansionArg_array_element_3_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_string":"","_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"_bound":15,"ExpansionArg_array_element_0_array_element_0_type":0} start 465.919 took 25.5778s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"_bound":15,"ExpansionArg_array_element_0_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":5,"_bound":16,"ExpansionArg_bool":false} start 471.4816 took 20.2594s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":5,"_bound":16,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":5,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"_bound":14,"ExpansionArg_array_element_2_type":0} start 466.8817 took 24.8594s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"_bound":14,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":19} start 472.1181 took 20.0553s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":19}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"_bound":16,"ExpansionArg_array_element_1_bool":false} start 471.7677 took 25.5217s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"_bound":16,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"_bound":16,"ExpansionArg_array_element_1_type":0} start 476.8855 took 20.964s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"_bound":16,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"_bound":15,"ExpansionArg_array_element_1_type":0} start 480.618 took 17.7786s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"_bound":15,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_string":"PureString"} start 472.9615 took 26.2033s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":16,"ExpansionArg_array_element_1_int":0} start 473.5375 took 25.8414s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":16,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_array_length":0} start 473.8547 took 27.3756s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"ExpansionArg_array_element_3_int":0,"_bound":17,"ExpansionArg_array_element_3_string":"PureString"} start 485.7811 took 17.6672s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"ExpansionArg_array_element_3_int":0,"_bound":17,"ExpansionArg_array_element_3_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"ExpansionArg_array_element_3_int":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_array_length":0} start 482.943 took 26.0899s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":18,"ExpansionArg_array_element_2_int":0} start 490.2393 took 19.0695s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":18,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":19,"ExpansionArg_array_element_2_string":"PureString"} start 489.8816 took 19.4273s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":19,"ExpansionArg_array_element_2_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_bool":false,"_bound":17} start 486.0184 took 26.8024s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_bool":false,"_bound":17}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_array_length_2":0} start 492.0496 took 21.2164s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":17} start 497.9985 took 19.1295s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":17}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"_bound":20,"ExpansionArg_array_element_3_array_length":0} start 490.4616 took 27.2833s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"_bound":20,"ExpansionArg_array_element_3_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":14,"ExpansionArg_array_element_2_type":0} start 491.6495 took 26.3987s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":14,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_string":"PureString"} start 491.8469 took 26.5915s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_int":0} start 492.4503 took 26.475s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":17} start 499.5883 took 19.3371s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":17}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"_bound":12,"ExpansionArg_array_element_1_string":"PureString"} start 501.3746 took 18.142s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"_bound":12,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_string":"PureString"} start 497.4351 took 25.4657s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_array_length":0} start 498.4884 took 25.2205s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_string":"","_bound":18,"ExpansionArg_array_element_3_bool":false} start 503.5663 took 20.7886s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_string":"","_bound":18,"ExpansionArg_array_element_3_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_string":"","_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_int":0} start 499.3013 took 26.5471s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"_bound":15,"ExpansionArg_array_element_2_type":0} start 509.4623 took 20.3864s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"_bound":15,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_2_type":0} start 513.1273 took 16.9973s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","_bound":15,"ExpansionArg_array_element_2_type":0} start 509.2213 took 22.1648s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","_bound":15,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"ExpansionArg_type_2":0,"_bound":14} start 509.844 took 25.8109s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"ExpansionArg_type_2":0,"_bound":14}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"ExpansionArg_type_2":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":1,"_bound":19} start 513.411 took 25.1774s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":1,"_bound":19}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":1,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":1,"_bound":17} start 517.9084 took 21.1504s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":1,"_bound":17}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":1,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"_bound":15,"ExpansionArg_array_element_0_type_2":0} start 518.2645 took 21.3761s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"_bound":15,"ExpansionArg_array_element_0_type_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":15,"ExpansionArg_array_element_1_bool":false} start 523.0374 took 17.5555s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":15,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":14,"ExpansionArg_array_element_1_int":0} start 519.6578 took 21.9647s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":14,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":15,"ExpansionArg_array_element_2_type":0} start 517.2037 took 24.9049s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":15,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":0,"_bound":13} start 518.7331 took 24.688s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":0,"_bound":13}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":1,"_bound":16} start 519.3224 took 24.7913s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":1,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":1,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_1_type":0} start 519.1013 took 26.0915s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_type_2":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"_bound":17,"ExpansionArg_array_element_3_type":0} start 525.9775 took 20.7734s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"_bound":17,"ExpansionArg_array_element_3_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_int":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"_bound":19,"ExpansionArg_array_element_3_array_length":0} start 524.6376 took 24.987s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"_bound":19,"ExpansionArg_array_element_3_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":13} start 523.88 took 26.1217s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":13}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"_bound":14,"ExpansionArg_array_element_0_array_element_0_type":0} start 530.2894 took 21.7749s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"_bound":14,"ExpansionArg_array_element_0_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"_bound":14,"ExpansionArg_array_element_1_string":"PureString"} start 529.9564 took 24.1017s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"_bound":14,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"_bound":15,"ExpansionArg_array_element_1_type":0} start 531.5231 took 23.5762s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"_bound":15,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":5,"ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_1_bool":false} start 543.6094 took 17.4524s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":5,"ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":5,"ExpansionArg_type_2":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":3,"_bound":15,"ExpansionArg_string":"PureString"} start 539.8492 took 22.9536s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":3,"_bound":15,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":3,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_3_int":0} start 536.0097 took 27.5791s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_3_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"ExpansionArg_type_2":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":2,"_bound":20,"ExpansionArg_int":0} start 538.8126 took 27.6325s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":2,"_bound":20,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":2,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":2,"_bound":18,"ExpansionArg_int":0} start 539.2081 took 28.2057s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":2,"_bound":18,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":2,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"_bound":15} start 541.7816 took 26.6755s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"_bound":15}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"_bound":15} start 546.8773 took 22.6796s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"_bound":15}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":16,"ExpansionArg_array_element_1_array_length":0} start 540.7452 took 29.1344s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":16,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_2_type":0} start 542.3375 took 27.9169s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_0_array_element_0_type":0} start 545.3381 took 24.9165s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_0_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_type_2":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"_bound":17,"ExpansionArg_array_element_2_type":0} start 552.2057 took 19.7666s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"_bound":17,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":2,"_bound":17,"ExpansionArg_int":0} start 544.2733 took 28.7775s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":2,"_bound":17,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":2,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_2_type":0} start 549.8134 took 28.9392s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":5,"_bound":17,"ExpansionArg_bool":false} start 550.2302 took 29.1735s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":5,"_bound":17,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":5,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":17,"ExpansionArg_array_element_1_bool":false} start 554.3094 took 30.0853s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":17,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":17,"ExpansionArg_array_element_1_array_length":0} start 563.7527 took 21.3641s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":17,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":16,"ExpansionArg_array_element_1_int":0} start 555.2167 took 30.1931s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":16,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_1_int":0} start 561.1987 took 26.5269s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":18,"ExpansionArg_bool":false} start 568.7333 took 22.0181s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":18,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":19,"ExpansionArg_bool":false} start 569.7407 took 21.3919s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":19,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":21,"ExpansionArg_bool":false} start 570.1056 took 21.288s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":21,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":17,"ExpansionArg_int":0} start 562.9683 took 29.5971s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":17,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":5,"_bound":16,"ExpansionArg_bool":false} start 572.1715 took 22.6938s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":5,"_bound":16,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":5,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":16,"ExpansionArg_array_element_1_string":"PureString"} start 567.7379 took 28.8307s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":16,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"ExpansionArg_array_element_3_int":0,"ExpansionArg_type_2":0,"_bound":16,"ExpansionArg_array_element_3_string":"PureString"} start 566.6392 took 30.2618s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"ExpansionArg_array_element_3_int":0,"ExpansionArg_type_2":0,"_bound":16,"ExpansionArg_array_element_3_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"ExpansionArg_array_element_3_int":0,"ExpansionArg_type_2":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"_bound":16,"ExpansionArg_array_element_1_string":"PureString"} start 570.7564 took 29.1056s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"_bound":16,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":16} start 570.4933 took 30.4715s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":15} start 573.2603 took 28.929s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":15}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_array_length":0} start 584.5774 took 20.4519s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_int":0} start 585.6175 took 22.1156s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_string":"PureString"} start 585.2811 took 22.8478s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":18,"ExpansionArg_string":"PureString"} start 578.894 took 30.1028s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":18,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":21,"ExpansionArg_array_length_2":0} start 579.5807 took 30.0404s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":21,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":23,"ExpansionArg_array_length_2":0} start 592.7569 took 23.7794s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":23,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":23}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":18} start 587.8222 took 30.065s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":18}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_array_length_2":0} start 590.8944 took 28.632s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":22,"ExpansionArg_string":"PureString"} start 591.5126 took 29.762s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":22,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":22}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_string":"PureString"} start 591.2709 took 31.1409s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_string":"PureString"} start 602.3172 took 21.8555s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":21,"ExpansionArg_array_length_2":0} start 600.1045 took 24.7442s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":21,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_array_length_2":0} start 595.0688 took 29.9336s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_int":0} start 596.6841 took 29.5565s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_string":"","ExpansionArg_type_2":0,"_bound":17,"ExpansionArg_array_element_3_bool":false} start 597.161 took 30.5957s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_string":"","ExpansionArg_type_2":0,"_bound":17,"ExpansionArg_array_element_3_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_string":"","ExpansionArg_type_2":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":18,"ExpansionArg_array_element_1_bool":false} start 601.1815 took 27.3713s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":18,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":19,"ExpansionArg_bool":false} start 609.1168 took 21.4881s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":19,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":2,"_bound":18,"ExpansionArg_array_element_0_array_element_0_int":0} start 609.7857 took 23.3231s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":2,"_bound":18,"ExpansionArg_array_element_0_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":2,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":17,"ExpansionArg_array_element_1_int":0} start 605.1411 took 28.5272s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":17,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"_bound":16,"ExpansionArg_array_element_2_type":0} start 616.6564 took 20.7805s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"_bound":16,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":3,"_bound":17,"ExpansionArg_array_element_0_array_element_0_string":"PureString"} start 607.8576 took 29.9753s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":3,"_bound":17,"ExpansionArg_array_element_0_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":3,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_2_type":0} start 608.277 took 31.143s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":6,"_bound":18,"ExpansionArg_bool":false} start 622.6497 took 22.2008s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":6,"_bound":18,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":6,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"_bound":16,"ExpansionArg_array_element_2_type":0} start 624.4004 took 21.0566s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"_bound":16,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":1,"_bound":17} start 626.3701 took 20.1668s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":1,"_bound":17}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":1,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":1,"_bound":19} start 618.0735 took 29.7593s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":1,"_bound":19}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":1,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"_bound":14,"ExpansionArg_array_element_2_type":0} start 625.1513 took 23.2394s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"_bound":14,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":1,"_bound":16} start 624.9332 took 23.6891s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":1,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":1,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":1,"_bound":18} start 619.6697 took 28.9526s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":1,"_bound":18}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":1,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"ExpansionArg_type_2":0,"_bound":18,"ExpansionArg_array_element_3_array_length":0} start 627.9039 took 21.4422s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"ExpansionArg_type_2":0,"_bound":18,"ExpansionArg_array_element_3_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"ExpansionArg_type_2":0,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":1,"_bound":19} start 621.443 took 30.5959s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":1,"_bound":19}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":1,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_array_length_2":0} start 630.8289 took 22.3236s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_array_length":0} start 628.828 took 25.5744s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":5,"ExpansionArg_array_element_0_array_element_0_int":0,"_bound":20,"ExpansionArg_array_element_0_array_element_0_bool":false} start 633.2647 took 25.779s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":5,"ExpansionArg_array_element_0_array_element_0_int":0,"_bound":20,"ExpansionArg_array_element_0_array_element_0_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":5,"ExpansionArg_array_element_0_array_element_0_int":0,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":1,"ExpansionArg_array_element_0_array_element_0_int":0,"_bound":19} start 633.8603 took 29.3685s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":1,"ExpansionArg_array_element_0_array_element_0_int":0,"_bound":19}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":1,"ExpansionArg_array_element_0_array_element_0_int":0,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"_bound":13,"ExpansionArg_string":"PureString"} start 637.5925 took 30.3147s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"_bound":13,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":5,"ExpansionArg_array_element_0_array_element_0_string":"","_bound":20,"ExpansionArg_array_element_0_array_element_0_bool":false} start 639.5999 took 29.1505s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":5,"ExpansionArg_array_element_0_array_element_0_string":"","_bound":20,"ExpansionArg_array_element_0_array_element_0_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":5,"ExpansionArg_array_element_0_array_element_0_string":"","_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":5,"_bound":18,"ExpansionArg_array_element_1_bool":false} start 649.5857 took 20.6817s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":5,"_bound":18,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":5,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":1,"ExpansionArg_array_element_0_array_element_0_string":"","_bound":18} start 638.0215 took 32.5883s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":1,"ExpansionArg_array_element_0_array_element_0_string":"","_bound":18}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":1,"ExpansionArg_array_element_0_array_element_0_string":"","_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":19} start 645.7223 took 25.8345s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":19}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":5,"_bound":20,"ExpansionArg_array_element_1_bool":false} start 648.4896 took 23.4471s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":5,"_bound":20,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":5,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":21,"ExpansionArg_string":"PureString"} start 647.9999 took 24.5256s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":21,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":3,"_bound":17,"ExpansionArg_string":"PureString"} start 649.2607 took 23.7241s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":3,"_bound":17,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":3,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"_bound":19,"ExpansionArg_array_element_3_type":0} start 653.3256 took 21.2999s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"_bound":19,"ExpansionArg_array_element_3_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":2,"ExpansionArg_array_element_0_array_element_0_string":"","_bound":19,"ExpansionArg_array_element_0_array_element_0_int":0} start 646.6509 took 29.2208s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":2,"ExpansionArg_array_element_0_array_element_0_string":"","_bound":19,"ExpansionArg_array_element_0_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":2,"ExpansionArg_array_element_0_array_element_0_string":"","_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":22,"ExpansionArg_array_length_2":0} start 645.1417 took 31.0723s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":22,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":22}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_int":0} start 648.7968 took 30.9611s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":3,"_bound":20,"ExpansionArg_string":"PureString"} start 652.2794 took 29.6025s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":3,"_bound":20,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":3,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":1,"_bound":17,"ExpansionArg_array_element_1_array_element_0_type":0} start 654.6391 took 31.686s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":1,"_bound":17,"ExpansionArg_array_element_1_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":1,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":4,"ExpansionArg_array_element_0_array_element_0_bool":false,"_bound":22,"ExpansionArg_array_element_0_array_element_0_array_length":0} start 659.2091 took 30.1357s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":4,"ExpansionArg_array_element_0_array_element_0_bool":false,"_bound":22,"ExpansionArg_array_element_0_array_element_0_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":4,"ExpansionArg_array_element_0_array_element_0_bool":false,"_bound":22}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":4,"ExpansionArg_array_element_0_array_element_0_bool":false,"_bound":21,"ExpansionArg_array_element_0_array_element_0_array_length":0} start 668.9301 took 20.7709s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":4,"ExpansionArg_array_element_0_array_element_0_bool":false,"_bound":21,"ExpansionArg_array_element_0_array_element_0_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":4,"ExpansionArg_array_element_0_array_element_0_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":21,"ExpansionArg_array_element_1_int":0} start 672.1776 took 19.9057s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":21,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":16,"ExpansionArg_bool":false} start 668.0421 took 25.3685s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":16,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":3,"ExpansionArg_array_element_0_array_element_0_bool":false,"_bound":21,"ExpansionArg_array_element_0_array_element_0_string":"PureString"} start 663.4174 took 30.9155s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":3,"ExpansionArg_array_element_0_array_element_0_bool":false,"_bound":21,"ExpansionArg_array_element_0_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":3,"ExpansionArg_array_element_0_array_element_0_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":21,"ExpansionArg_array_element_1_array_length":0} start 670.7711 took 24.1486s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":21,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":15,"ExpansionArg_int":0} start 672.6832 took 22.5119s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":15,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":23,"ExpansionArg_array_element_1_array_length":0} start 673.1769 took 23.9425s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":23,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":23}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_int":0} start 671.741 took 26.4793s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":14} start 676.4217 took 23.738s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":14}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_string":"PureString"} start 670.4539 took 31.2705s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":18,"ExpansionArg_int":0} start 674.7515 took 27.3574s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":18,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":22,"ExpansionArg_bool":false} start 682.0639 took 20.7877s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":22,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":22}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":22,"ExpansionArg_array_element_1_string":"PureString"} start 676.0175 took 30.6642s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":22,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":22}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":3,"_bound":19,"ExpansionArg_array_element_1_string":"PureString"} start 679.9391 took 29.9819s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":3,"_bound":19,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":3,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"_bound":18,"ExpansionArg_array_element_2_type":0} start 689.5535 took 25.8635s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"_bound":18,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"ExpansionArg_type_2":0,"_bound":11,"ExpansionArg_array_element_1_string":"PureString"} start 695.0785 took 20.5505s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"ExpansionArg_type_2":0,"_bound":11,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":3,"ExpansionArg_type_2":0,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":19,"ExpansionArg_bool":false} start 689.9776 took 25.8532s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":19,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":5,"ExpansionArg_string":"","_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_2_type":0} start 694.5569 took 22.5998s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":21,"ExpansionArg_int":0} start 686.5576 took 31.7526s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":21,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":16,"ExpansionArg_array_element_3_type":0} start 695.4838 took 24.805s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":16,"ExpansionArg_array_element_3_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_1_bool":false} start 698.365 took 23.2998s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"ExpansionArg_type_2":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","_bound":17,"ExpansionArg_array_element_2_type":0} start 692.2924 took 29.7603s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","_bound":17,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":2,"_bound":17,"ExpansionArg_array_element_2_int":0} start 701.9263 took 20.5614s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":2,"_bound":17,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":2,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_array_length_2":0} start 693.6461 took 32.0667s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":17,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":23,"ExpansionArg_array_length_2":0} start 703.0246 took 24.0314s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":23,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":23}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":6,"_bound":16,"ExpansionArg_bool":false} start 697.2648 took 31.0093s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":6,"_bound":16,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":6,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":2,"_bound":14,"ExpansionArg_array_element_2_int":0} start 700.3229 took 30.8022s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":2,"_bound":14,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":2,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":1,"_bound":19,"ExpansionArg_array_element_1_array_element_0_type":0} start 702.2769 took 29.7159s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":1,"_bound":19,"ExpansionArg_array_element_1_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":1,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":2,"_bound":17,"ExpansionArg_array_element_2_int":0} start 706.8249 took 31.4396s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":2,"_bound":17,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":2,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_array_length_2":0} start 716.0178 took 22.6267s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"_bound":17,"ExpansionArg_array_element_2_type":0} start 720.5128 took 20.7213s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"_bound":17,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_1_int":0} start 717.3052 took 24.1315s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":21,"ExpansionArg_array_element_1_bool":false} start 715.5568 took 26.1559s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":21,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":20,"ExpansionArg_array_element_1_int":0} start 710.1051 took 31.8853s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":20,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":15} start 721.8321 took 22.0377s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":15}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_1_bool":false} start 715.7564 took 29.4723s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":14,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":16,"ExpansionArg_array_element_1_int":0} start 727.176 took 20.4842s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":16,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":12} start 718.5286 took 29.435s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":12}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","ExpansionArg_type_2":0,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":18,"ExpansionArg_array_element_1_array_length":0} start 722.2897 took 28.791s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":18,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":19,"ExpansionArg_array_element_2_bool":false} start 722.6337 took 29.799s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":19,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":17,"ExpansionArg_array_element_1_string":"PureString"} start 725.9365 took 28.9643s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":17,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_int":0} start 728.4128 took 28.0398s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":2,"ExpansionArg_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"_bound":15} start 732.154 took 26.2719s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"_bound":15}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_array_length_2":0} start 731.3399 took 27.5851s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":16,"ExpansionArg_array_element_2_bool":false} start 738.4499 took 21.0841s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":16,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":1,"_bound":19,"ExpansionArg_array_element_2_array_element_0_type":0} start 742.1752 took 18.7165s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":1,"_bound":19,"ExpansionArg_array_element_2_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":1,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"_bound":18} start 741.3387 took 20.6427s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"_bound":18}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_1_array_length":0} start 745.386 took 18.5989s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_string":"PureString"} start 738.8136 took 27.2164s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":19,"ExpansionArg_array_element_2_bool":false} start 741.5697 took 26.1274s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":19,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":22,"ExpansionArg_array_element_1_array_length":0} start 741.8967 took 26.333s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":22,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":22}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":17} start 747.8052 took 21.0932s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":17}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":1,"ExpansionArg_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"_bound":17} start 744.0316 took 25.5167s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"_bound":17}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":1,"_bound":16,"ExpansionArg_array_element_1_array_element_0_type":0} start 748.2983 took 26.3144s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":1,"_bound":16,"ExpansionArg_array_element_1_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":1,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_string":"PureString"} start 755.0248 took 19.8759s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"_bound":18} start 751.3378 took 26.9669s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"_bound":18}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":21,"ExpansionArg_array_element_2_array_length":0} start 752.5671 took 26.4018s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":21,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"_bound":15,"ExpansionArg_array_element_1_bool":false} start 759.2573 took 22.6469s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"_bound":15,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":6,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"_bound":20,"ExpansionArg_array_element_2_type":0} start 758.5539 took 23.5481s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"_bound":20,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_array_length":0,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"_bound":18} start 756.5938 took 26.4391s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"_bound":18}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":1,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":18,"ExpansionArg_array_element_2_array_length":0} start 761.0257 took 22.3032s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":18,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"_bound":20,"ExpansionArg_array_element_3_type":0} start 762.2139 took 21.7522s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"_bound":20,"ExpansionArg_array_element_3_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_array_length":0,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":17,"ExpansionArg_array_element_2_string":"PureString"} start 759.7149 took 28.0545s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":17,"ExpansionArg_array_element_2_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":21,"ExpansionArg_array_element_2_array_length":0} start 768.0169 took 21.5637s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":21,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"_bound":18,"ExpansionArg_array_element_3_string":"PureString"} start 769.7336 took 20.8797s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"_bound":18,"ExpansionArg_array_element_3_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":2,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_2_int":0} start 764.1702 took 26.7275s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":2,"ExpansionArg_type_2":0,"_bound":13,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":2,"ExpansionArg_type_2":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":2,"_bound":15,"ExpansionArg_int":0} start 766.2256 took 26.1744s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":2,"_bound":15,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":2,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_string":"PureString"} start 768.4606 took 24.4927s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":2,"_bound":16,"ExpansionArg_array_element_0_array_element_0_int":0} start 769.0607 took 24.2429s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":2,"_bound":16,"ExpansionArg_array_element_0_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":2,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":16} start 774.7794 took 21.926s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","_bound":18,"ExpansionArg_array_element_2_type":0} start 775.1496 took 23.7623s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","_bound":18,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_2_type":0} start 778.5659 took 22.3228s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_type_2":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"_bound":18,"ExpansionArg_array_element_0_type_2":0} start 779.1154 took 26.753s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"_bound":18,"ExpansionArg_array_element_0_type_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_int":0} start 782.0165 took 24.4806s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":17,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":15} start 789.7256 took 19.2503s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":15}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":16} start 782.3496 took 27.4359s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_bool":false,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_string":"PureString"} start 783.6235 took 27.4653s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":18,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"_bound":19,"ExpansionArg_array_element_3_int":0} start 783.1973 took 28.2907s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"_bound":19,"ExpansionArg_array_element_3_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_array_length":0} start 784.235 took 27.5903s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":19,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_bool":false,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":3,"ExpansionArg_array_element_0_array_element_0_int":0,"_bound":18,"ExpansionArg_array_element_0_array_element_0_string":"PureString"} start 793.5457 took 20.691s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":3,"ExpansionArg_array_element_0_array_element_0_int":0,"_bound":18,"ExpansionArg_array_element_0_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":3,"ExpansionArg_array_element_0_array_element_0_int":0,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_string":"","_bound":20,"ExpansionArg_array_element_3_bool":false} start 791.1497 took 23.4789s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_string":"","_bound":20,"ExpansionArg_array_element_3_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_string":"","_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"_bound":17,"ExpansionArg_array_element_2_type":0} start 787.9519 took 27.3848s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"_bound":17,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":0,"_bound":14} start 796.882 took 21.6787s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":0,"_bound":14}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":0,"_bound":14}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"ExpansionArg_array_element_3_string":"","_bound":19,"ExpansionArg_array_element_3_int":0} start 790.7699 took 29.4632s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"ExpansionArg_array_element_3_string":"","_bound":19,"ExpansionArg_array_element_3_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":2,"ExpansionArg_array_element_3_string":"","_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_2_bool":false} start 792.5847 took 28.1482s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":0,"_bound":15,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":5,"ExpansionArg_array_element_2_int":0,"ExpansionArg_type_2":0,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":17,"ExpansionArg_bool":false} start 793.126 took 28.1583s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":17,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":5,"ExpansionArg_int":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":16} start 799.058 took 26.728s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":17,"ExpansionArg_array_element_1_string":"PureString"} start 805.9908 took 21.8331s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":17,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":1,"ExpansionArg_array_element_0_array_element_0_int":0,"_bound":17} start 801.0051 took 27.6836s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":1,"ExpansionArg_array_element_0_array_element_0_int":0,"_bound":17}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":1,"ExpansionArg_array_element_0_array_element_0_int":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"_bound":16,"ExpansionArg_array_element_2_bool":false} start 809.1959 took 21.5383s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"_bound":16,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":5,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_int":0,"_bound":20,"ExpansionArg_array_element_3_bool":false} start 811.7058 took 21.2216s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_int":0,"_bound":20,"ExpansionArg_array_element_3_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":5,"ExpansionArg_array_element_3_int":0,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":5,"ExpansionArg_array_element_0_array_element_0_string":"","_bound":19,"ExpansionArg_array_element_0_array_element_0_bool":false} start 814.3905 took 19.4387s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":5,"ExpansionArg_array_element_0_array_element_0_string":"","_bound":19,"ExpansionArg_array_element_0_array_element_0_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":5,"ExpansionArg_array_element_0_array_element_0_string":"","_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":3,"_bound":17,"ExpansionArg_array_element_1_string":"PureString"} start 810.0529 took 24.0435s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":3,"_bound":17,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":3,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"_bound":17,"ExpansionArg_array_element_0_type_2":0} start 806.6063 took 28.8703s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"_bound":17,"ExpansionArg_array_element_0_type_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":1,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_array_element_2_type":5,"_bound":16,"ExpansionArg_array_element_2_bool":false} start 811.3422 took 24.4813s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_array_element_2_type":5,"_bound":16,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_array_element_2_type":5,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_array_element_2_type":6,"_bound":18,"ExpansionArg_array_element_2_bool":false} start 812.0565 took 24.1916s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_array_element_2_type":6,"_bound":18,"ExpansionArg_array_element_2_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_array_element_2_type":6,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":2,"_bound":15,"ExpansionArg_array_element_2_int":0} start 818.7178 took 27.1626s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":2,"_bound":15,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":2,"_bound":15}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"_bound":21,"ExpansionArg_array_element_3_array_length":0} start 814.7723 took 31.5088s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"_bound":21,"ExpansionArg_array_element_3_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":1,"_bound":16} start 815.5125 took 30.8012s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":1,"_bound":16}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"ExpansionArg_array_element_1_string":"","ExpansionArg_array_element_2_type":1,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":0,"_bound":17,"ExpansionArg_array_element_2_array_length":0} start 821.1378 took 28.5551s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":0,"_bound":17,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":0,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","_bound":18,"ExpansionArg_array_element_3_type":0} start 820.4579 took 32.8312s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","_bound":18,"ExpansionArg_array_element_3_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_string":"","_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_array_length_2":0} start 821.465 took 33.8921s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19,"ExpansionArg_array_length_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":4,"ExpansionArg_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":0,"_bound":16,"ExpansionArg_array_element_2_string":"PureString"} start 825.9583 took 33.8776s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":0,"_bound":16,"ExpansionArg_array_element_2_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"ExpansionArg_type_2":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":18,"ExpansionArg_array_element_1_int":0} start 827.954 took 34.8706s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":18,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":20,"ExpansionArg_array_element_1_bool":false} start 835.6927 took 28.732s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":20,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":19,"ExpansionArg_array_element_1_bool":false} start 828.8658 took 35.8932s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":19,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":18,"ExpansionArg_array_element_2_string":"PureString"} start 831.0376 took 34.3883s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":18,"ExpansionArg_array_element_2_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":3,"ExpansionArg_array_element_2_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_string":"PureString"} start 836.4816 took 29.3934s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":18,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_2_type":0,"ExpansionArg_type_2":3,"ExpansionArg_bool":false,"_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"ExpansionArg_array_element_3_bool":false,"_bound":21,"ExpansionArg_array_element_3_string":"PureString"} start 833.169 took 36.5998s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"ExpansionArg_array_element_3_bool":false,"_bound":21,"ExpansionArg_array_element_3_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":3,"ExpansionArg_array_element_3_bool":false,"_bound":21}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":19,"ExpansionArg_array_element_2_array_length":0} start 834.3615 took 36.2825s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":19,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":4,"ExpansionArg_array_element_0_array_element_0_bool":false,"_bound":20,"ExpansionArg_array_element_0_array_element_0_array_length":0} start 833.9966 took 37.3762s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":4,"ExpansionArg_array_element_0_array_element_0_bool":false,"_bound":20,"ExpansionArg_array_element_0_array_element_0_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":1,"ExpansionArg_array_element_0_array_element_0_type":4,"ExpansionArg_array_element_0_array_element_0_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"_bound":22,"ExpansionArg_array_element_3_array_length":0} start 836.0777 took 36.7179s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"_bound":22,"ExpansionArg_array_element_3_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"ExpansionArg_array_element_3_type":4,"ExpansionArg_array_element_3_bool":false,"_bound":22}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":18} start 846.5577 took 26.5799s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":18}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":1,"ExpansionArg_array_element_1_string":"","_bound":18}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_bool":false,"_bound":19} start 849.8778 took 26.3028s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_bool":false,"_bound":19}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_array_element_2_type":1,"ExpansionArg_array_element_2_bool":false,"_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":17,"ExpansionArg_array_element_2_int":0} start 846.1647 took 36.348s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":17,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":17}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_array_length":0} start 846.9421 took 36.767s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":19,"ExpansionArg_array_element_1_int":0} start 853.3916 took 36.8648s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":19,"ExpansionArg_array_element_1_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":4,"ExpansionArg_array_element_0_array_length":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":19}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":22,"ExpansionArg_array_element_2_array_length":0} start 863.0134 took 27.5391s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":22,"ExpansionArg_array_element_2_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_array_element_2_type":4,"ExpansionArg_array_element_2_bool":false,"_bound":22}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"_bound":16,"ExpansionArg_array_element_2_type":0} start 860.0457 took 30.8154s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"_bound":16,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_int":0,"_bound":16}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_int":0} start 855.6489 took 36.0841s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":20,"ExpansionArg_array_element_2_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_bool":false,"ExpansionArg_array_element_2_type":2,"ExpansionArg_array_element_2_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_array_length":0} start 866.2239 took 26.0321s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":20,"ExpansionArg_array_element_1_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length_2":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":4,"ExpansionArg_array_element_1_bool":false,"_bound":20}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"_bound":14,"ExpansionArg_array_element_2_type":0} start 864.9912 took 29.9014s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"_bound":14,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.

var http   = require('./http');
var util   = require('util');
var assert = require('./assert-plus');
var WError = require('verror').WError;
var outil  = require('object_utils');

///--- Globals

var slice = Function.prototype.call.bind(Array.prototype.slice);


///--- Helpers

function codeToErrorName(code) {
    code = parseInt(code, 10);
    var status = http.STATUS_CODES[code];
    if (!status)
        return (false);


    var pieces = status.split(/\s+/);
    var str = '';
    pieces.forEach(function (s) {
        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    });

    str = str.replace(/\W+/g, '');
    if (!/\w+Error$/.test(str))
        str += 'Error';

    return (str);
}

function stackToArray(stack) {
    if (stack && stack.split) {
        return stack.split('\n').map(Function.prototype.call, String.prototype.trim);
    }
    return stack;
}

///--- Error Base class

function HttpError(options) {
    assert.object(options, 'options');

    /**
     * Add the stack to the body
     *
     * @param {Boolean} asArray True if you want the stack as an array
     * @chainable
     * @return {HttpError}
     */
    this.withStack = function withStack(asArray) {
        this.body = this.body || {};
        if (asArray) {
            this.body.stack = stackToArray(this.stack);
        } else {
            this.body.stack = this.stack;
        }
        return this;
    };

    /**
     * Set the stack as an array
     *
     * @chainable
     * @return {HttpError}
     */
    this.toArray = function toArray() {
        if (this.body.stack) {
          this.body.stack = stackToArray(this.body.stack);
        }
        return this;
    };

    /**
     * Send the error to the logger
     *
     * @param {String} [mode = 'body'] If not equal to 'body' use message in default format
     * @chainable
     * @return {HttpError}
     */
    this.log = function log(mode) {
        if (config.logger && config.logger.error) {
            var msg = this.message;
            if ('function' === typeof config.format) {
                msg = config.format(this, mode);
            }
            config.logger.error(msg);
        }
        return this;
    };

  options.constructorOpt = options.constructorOpt || HttpError;
    WError.apply(this, arguments);

    var self = this;
    var code = parseInt((options.statusCode || 500), 10);
    this.statusCode = code;
    this.body = options.body || {
        code: codeToErrorName(code),
        message: options.message || self.message
    };
    this.message = options.message || self.message;
}

util.inherits(HttpError, WError);


///--- Exports

module.exports = {

    HttpError: HttpError,

    codeToHttpError: function codeToHttpError(code, message, body) {
        var err;
        var name = codeToErrorName(code);

        if (!name) {
            err = new HttpError({
                statusCode: code,
                message: message,
                body: body
            });
            err.name = 'Http' + code + 'Error';
        } else {
            err = new module.exports[name]({
                body: body,
                message: message,
                constructorOpt: codeToHttpError,
                statusCode: code
            });
        }

        return (err);
    },

    codeToErrorName: codeToErrorName
};


// Export all the 4xx and 5xx HTTP Status codes as Errors
var codes = Object.keys(http.STATUS_CODES);

codes.forEach(function (code) {
    var name = codeToErrorName(code);

    module.exports[name] = function (cause, message) {
        var index = 1;
        var opts = {
            statusCode: code
        };

        if (cause && cause instanceof Error) {
            opts.cause = cause;
            opts.constructorOpt = arguments.callee;
        } else if (typeof (cause) === 'object') {
            opts.body = cause.body;
            opts.cause = cause.cause;
            opts.constructorOpt = cause.constructorOpt;
            opts.message = cause.message;
            opts.statusCode = cause.statusCode || code;
        } else {
            opts.constructorOpt = arguments.callee;
            index = 0;
        }

        var args = slice(arguments, index);
        args.unshift(opts);
        HttpError.apply(this, args);
    };
    util.inherits(module.exports[name], HttpError);

    module.exports[name].displayName =
        module.exports[name].prototype.name =
            name;
});

var config = {
    logger: console,
    format: function(error, mode) {
        // you can define your format
        mode = mode || 'body';
        if (mode === 'body') {
            return error.body
        }
        return error.message;
    }
};

module.exports.setConfig = function(newConfig) {
    config = outil.merge(config, newConfig);
};
module.exports.getConfig = function() {
    return config;
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_1_type":0,"_bound":14}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 63% Coverage (LOC): 65%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 38% Coverage (LOC): 56%
*- File /root/Targets/authorify-websocket/node_modules/authorify-websocket/index.js. Coverage (Term): 78% Coverage (LOC): 91%
*- File /root/Targets/authorify-websocket/node_modules/jsface/jsface.js. Coverage (Term): 12% Coverage (LOC): 18%
*- File /root/Targets/authorify-websocket/node_modules/primus/index.js. Coverage (Term): 10% Coverage (LOC): 14%
*- File /root/Targets/authorify-websocket/node_modules/primus/errors.js. Coverage (Term): 33% Coverage (LOC): 38%
*- File /root/Targets/authorify-websocket/node_modules/eventemitter3/index.js. Coverage (Term): 11% Coverage (LOC): 20%
*- File /root/Targets/authorify-websocket/node_modules/primus/transformer.js. Coverage (Term): 14% Coverage (LOC): 19%
*- File /root/Targets/authorify-websocket/node_modules/diagnostics/index.js. Coverage (Term): 27% Coverage (LOC): 34%
*- File /root/Targets/authorify-websocket/node_modules/pretty-hrtime/index.js. Coverage (Term): 17% Coverage (LOC): 34%
*- File /root/Targets/authorify-websocket/node_modules/env-variable/index.js. Coverage (Term): 48% Coverage (LOC): 69%
*- File /root/Targets/authorify-websocket/node_modules/color/color.js. Coverage (Term): 6% Coverage (LOC): 21%
*- File /root/Targets/authorify-websocket/node_modules/color-convert/index.js. Coverage (Term): 49% Coverage (LOC): 58%
*- File /root/Targets/authorify-websocket/node_modules/color-convert/conversions.js. Coverage (Term): 30% Coverage (LOC): 77%
*- File /root/Targets/authorify-websocket/node_modules/color-string/color-string.js. Coverage (Term): 7% Coverage (LOC): 25%
*- File /root/Targets/authorify-websocket/node_modules/text-hex/index.js. Coverage (Term): 20% Coverage (LOC): 63%
*- File /root/Targets/authorify-websocket/node_modules/kuler/index.js. Coverage (Term): 18% Coverage (LOC): 38%
*- File /root/Targets/authorify-websocket/node_modules/colornames/index.js. Coverage (Term): 36% Coverage (LOC): 46%
*- File /root/Targets/authorify-websocket/node_modules/colornames/colors.js. Coverage (Term): 100% Coverage (LOC): 100%
*- File /root/Targets/authorify-websocket/node_modules/primus/middleware/error.js. Coverage (Term): 14% Coverage (LOC): 25%
*- File /root/Targets/authorify-websocket/node_modules/fusing/index.js. Coverage (Term): 44% Coverage (LOC): 52%
*- File /root/Targets/authorify-websocket/node_modules/predefine/index.js. Coverage (Term): 44% Coverage (LOC): 47%
*- File /root/Targets/authorify-websocket/node_modules/extendible/index.js. Coverage (Term): 12% Coverage (LOC): 16%
*- File /root/Targets/authorify-websocket/node_modules/primus/spark.js. Coverage (Term): 15% Coverage (LOC): 22%
*- File /root/Targets/authorify-websocket/node_modules/forwarded-for/index.js. Coverage (Term): 16% Coverage (LOC): 43%
*- File /root/Targets/authorify-websocket/node_modules/primus-callbacks/index.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/authorify-websocket/node_modules/primus-callbacks/lib/index.js. Coverage (Term): 88% Coverage (LOC): 100%
*- File /root/Targets/authorify-websocket/node_modules/primus-callbacks/lib/server/index.js. Coverage (Term): 21% Coverage (LOC): 19%
*- File /root/Targets/authorify-websocket/node_modules/primus-callbacks/node_modules/debug/node.js. Coverage (Term): 37% Coverage (LOC): 62%
*- File /root/Targets/authorify-websocket/node_modules/primus-callbacks/node_modules/debug/debug.js. Coverage (Term): 35% Coverage (LOC): 42%
*- File /root/Targets/authorify-websocket/node_modules/ms/index.js. Coverage (Term): 12% Coverage (LOC): 15%
*- File /root/Targets/authorify-websocket/node_modules/primus-callbacks/lib/server/spark.js. Coverage (Term): 23% Coverage (LOC): 28%
*- File /root/Targets/authorify-websocket/node_modules/node-uuid/uuid.js. Coverage (Term): 22% Coverage (LOC): 33%
*- File /root/Targets/authorify-websocket/node_modules/load/index.js. Coverage (Term): 92% Coverage (LOC): 98%
*- File /root/Targets/authorify-websocket/node_modules/primus-callbacks/lib/client/index.js. Coverage (Term): 22% Coverage (LOC): 21%
*- File /root/Targets/authorify-websocket/node_modules/logged-errors/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- File /root/Targets/authorify-websocket/node_modules/logged-errors/lib/index.js. Coverage (Term): 20% Coverage (LOC): 27%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 558 paths with 557 errors **
