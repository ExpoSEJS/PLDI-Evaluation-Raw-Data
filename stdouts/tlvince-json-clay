/root/Targets/tlvince-json-clay
└─┬ tlvince-json-clay@1.3.0 
  ├── jjv@1.0.2 
  ├─┬ json-schema-faker@0.2.16 
  │ ├── chance@1.0.11 
  │ ├─┬ deref@0.6.4 
  │ │ └── deep-extend@0.4.2 
  │ ├── faker@3.1.0 
  │ └─┬ randexp@0.4.6 
  │   ├── discontinuous-range@1.0.0 
  │   └── ret@0.1.15 
  ├── minimist@1.2.0 
  └── semver@5.4.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/tlvince-json-clay/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0929 took 4.7695s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program var semver = require('semver')
var jjv = require('jjv')
var assert = require('assert')

var generate = require('./generate')

var schemas = {
  base: require('./schema.json')
}


var formats = {
  semver: function(str) {
    return !!semver.valid(str)
  }
}


var Clay = module.exports = function(options) {
  options = options || {}

  this.schema = options.schema || schemas.base
  this.refs = options.refs || []
  this.defaults = options.defaults || {}

  this.validator = new jjv()

  this.refs.push(schemas.base)
  if (this.schema.id !== schemas.base.id) {
    this.refs.push(this.schema)
  }

  this.refs.forEach(function(ref) {
    assert('id' in ref, 'Schema is missing id property')
  })

  this.refs.forEach(function(ref) {
    this.validator.addSchema(ref.id, ref)
  }.bind(this))

  for (var format in formats) {
    this.validator.addFormat(format, formats[format])
  }

  this.properties = this.refs.reduce(function(list, ref) {
    return list.concat(Object.keys(ref.properties))
  }, [])
}

Clay.prototype.validate = function(json) {
  return this.validator.validate(this.schema, json)
}

if (typeof generate === 'function') {
  Clay.prototype.generate = generate
} else {
  Clay.prototype.generate = function() {
    throw('`clay.generate` is not included in this build of json-clay.')
  }
}

 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
