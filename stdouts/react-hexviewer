/root/Targets/react-hexviewer
└─┬ react-hexviewer@1.0.1 
  └─┬ react@0.12.2 
    └─┬ envify@3.4.1 
      ├─┬ jstransform@11.0.3 
      │ ├── base62@1.2.0 
      │ ├─┬ commoner@0.10.8 
      │ │ ├── commander@2.11.0 
      │ │ ├─┬ detective@4.5.0 
      │ │ │ ├── acorn@4.0.13 
      │ │ │ └── defined@1.0.0 
      │ │ ├─┬ glob@5.0.15 
      │ │ │ ├─┬ inflight@1.0.6 
      │ │ │ │ └── wrappy@1.0.2 
      │ │ │ ├── inherits@2.0.3 
      │ │ │ ├─┬ minimatch@3.0.4 
      │ │ │ │ └─┬ brace-expansion@1.1.8 
      │ │ │ │   ├── balanced-match@1.0.0 
      │ │ │ │   └── concat-map@0.0.1 
      │ │ │ ├── once@1.4.0 
      │ │ │ └── path-is-absolute@1.0.1 
      │ │ ├── graceful-fs@4.1.11 
      │ │ ├── iconv-lite@0.4.19 
      │ │ ├─┬ mkdirp@0.5.1 
      │ │ │ └── minimist@0.0.8 
      │ │ ├── private@0.1.7 
      │ │ ├── q@1.5.0 
      │ │ └─┬ recast@0.11.23 
      │ │   ├── ast-types@0.9.6 
      │ │   ├── esprima@3.1.3 
      │ │   └── source-map@0.5.7 
      │ ├── esprima-fb@15001.1.0-dev-harmony-fb 
      │ ├── object-assign@2.1.1 
      │ └─┬ source-map@0.4.4 
      │   └── amdefine@1.0.1 
      └── through@2.3.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-hexviewer/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0325 took 1.5562s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (15:3) on program var React = require('react');

var Item = React.createClass({
	getClasses: function () {
		return (this.props.active ? 'active' : '') + (this.props.byte == "--" ? ' none' :'');
	},
	activate: function () {
		this.props.activate(this.props.index);
	},
	clear: function() {
		this.props.clear();
	},
	render: function() {
		return (
			<li className={this.getClasses()} onMouseOver={this.activate} onMouseLeave={this.clear}>{this.props.byte}</li>
		);
	}
});

var Set = React.createClass({
	activate: function () {
		this.props.activateSet(this.props.index);
	},
	clear: function() {
		this.props.clearSet();
	},
	render: function() {
		var items = this.props.set.map(function(byte, i) {
			var byteString = "";
			if (byte == -1 ) {
				byteString = "--";
			} else {
				byteString = byte.toString(16);
				if(byteString.length == 1) {
					byteString = "0" + byteString;
				}
			}
			byteString = byteString.toUpperCase();
			return (<Item index={i} byte={byteString} active={this.props.activeItem == i && this.props.active ? true : false} activate={this.props.activateItem} clear={this.props.clearItem}/>);
		}.bind(this));

		return (
			<ul className={"setHex" + (this.props.active ? ' active' : '')} onMouseOver={this.activate} onMouseLeave={this.clear}>
				{items}
			</ul>
		);
	}
});

var Row = React.createClass({
	getInitialState: function() {
		return ({
			activeSet: -1,
			activeItem: -1
		});
	},
	setActiveSet: function (activeSet) {
		if(this.props.sets[activeSet][0] == -1) return;
		this.setState({activeSet: activeSet});
	},
	clearActiveSet: function () {
		this.setState({activeSet: -1});
	},
	setActiveItem: function (activeItem) {
		this.setState({activeItem: activeItem});
	},
	clearActiveItem: function () {
		this.setState({activeItem: -1});
	},
	render: function() {
		var sets = this.props.sets.map(function(set, i) {
			return (<Set set={set} index={i} active={this.state.activeSet == i ? true : false} activeItem={this.state.activeItem} activateSet={this.setActiveSet} clearSet={this.clearActiveSet} activateItem={this.setActiveItem} clearItem={this.clearActiveItem}/>);
		}.bind(this));
		var heading = this.props.heading;
		var ascii = this.props.sets.map(function(set, setIndex) {
			return set.map(function(byte, itemIndex, theSet) {
				var char = '';
				if (byte == -1) {
					char = ' ';
				} else {
					if (byte > 31 && byte < 127) {
						char = String.fromCharCode(byte);
					} else {
						char = "·";
					}
				}

				return (<li className={(this.state.activeSet * (theSet.length) + this.state.activeItem == setIndex*(theSet.length) + itemIndex) ? 'active' : ''}>{char}</li>);
				}.bind(this));
			}.bind(this));
		return (
			<div className="row">
				<div className="heading">{heading}:</div>
					{sets}
				<div className="ascii">
					<ul className="setAscii">
					{ascii}
					</ul>
				</div>
			</div>
		);
	}
});

var Hex = React.createClass({
	render: function() {
		var str = "" + 1;
		var pad = "000000";

		var rows = this.props.rows.map(function(row, i) {
			var heading = ''+i*this.props.bytesper;
				heading = pad.substring(0, pad.length - heading.length) + heading;
				return <Row sets={row} heading={heading}/>;
		}.bind(this));
		return (
			<div className="hexviewer">
				<div className="hex">
					{rows}
				</div>
			</div>
		);
	}
});

var HexViewer = React.createClass({
	render: function() {
		var rowChunk = this.props.rowLength, setChunk = this.props.setLength;
		var rows = [], row = [], set = [], sets = [];
		
		var buffer = []
		var bytes = this.props.buffer.length;

		if(Buffer.isBuffer(this.props.buffer)) {
			for (var i = 0; i < bytes; i++) {
				buffer.push(this.props.buffer[i])
			}
		} else {
			buffer = this.props.buffer
		}

		for (var i=0; i<bytes; i+=rowChunk) {
			sets = [];
			temparray = buffer.slice(i,i+rowChunk);

			for(var z = temparray.length; z < rowChunk; z++) {
				temparray.push(-1);
			}
			row = [];
			for (x=0,k=temparray.length; x<k; x+=setChunk) {
				set = temparray.slice(x,x+setChunk);

				for(z = set.length; z < setChunk; z++) {
					set.push(-1);
				}
				row.push(set);

			}
			rows.push(row);
		}

		return (
			<Hex rows={rows} bytesper={rowChunk} />
		);
	}
});

module.exports = HexViewer;



 at SyntaxError: Unexpected token (15:3)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/react-hexviewer/node_modules/react-hexviewer/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
