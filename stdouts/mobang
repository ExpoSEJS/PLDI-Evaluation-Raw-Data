
> dtrace-provider@0.4.0 install /root/Targets/mobang/node_modules/dtrace-provider
> node scripts/install.js

/root/Targets/mobang
└─┬ mobang@2.0.0 
  ├── async@0.9.2 
  ├── extend@2.0.1 
  ├── fsk-readdir@1.1.4 
  ├── mime@1.3.6 
  ├── minimist@1.1.3 
  ├─┬ nodetpl@4.8.5 
  │ ├─┬ async@2.5.0 
  │ │ └── lodash@4.17.4 
  │ ├── fs-path@0.0.22 
  │ ├── iconv-lite@0.4.19 
  │ ├─┬ js-beautify@1.7.3 
  │ │ ├─┬ config-chain@1.1.11 
  │ │ │ ├── ini@1.3.4 
  │ │ │ └── proto-list@1.2.4 
  │ │ ├─┬ editorconfig@0.13.3 
  │ │ │ ├── bluebird@3.5.0 
  │ │ │ ├── commander@2.11.0 
  │ │ │ ├─┬ lru-cache@3.2.0 
  │ │ │ │ └── pseudomap@1.0.2 
  │ │ │ ├── semver@5.4.1 
  │ │ │ └── sigmund@1.0.1 
  │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ └── minimist@0.0.8 
  │ │ └─┬ nopt@3.0.6 
  │ │   └── abbrev@1.1.0 
  │ └── minimist@1.2.0 
  └─┬ restify@3.0.3 
    ├── assert-plus@0.1.5 
    ├─┬ backoff@2.5.0 
    │ └── precond@0.2.3 
    ├─┬ bunyan@1.3.4 
    │ ├─┬ mv@2.1.1 
    │ │ ├── ncp@2.0.0 
    │ │ └─┬ rimraf@2.4.5 
    │ │   └─┬ glob@6.0.4 
    │ │     ├── inflight@1.0.6 
    │ │     ├── inherits@2.0.3 
    │ │     ├─┬ minimatch@3.0.4 
    │ │     │ └─┬ brace-expansion@1.1.8 
    │ │     │   ├── balanced-match@1.0.0 
    │ │     │   └── concat-map@0.0.1 
    │ │     └── path-is-absolute@1.0.1 
    │ └── safe-json-stringify@1.0.4 
    ├─┬ csv@0.4.6 
    │ ├── csv-generate@0.0.6 
    │ ├── csv-parse@1.2.3 
    │ ├── csv-stringify@0.0.8 
    │ └── stream-transform@0.1.2 
    ├── deep-equal@1.0.1 
    ├─┬ dtrace-provider@0.4.0 
    │ └── nan@1.5.3 
    ├── escape-regexp-component@1.0.2 
    ├── formidable@1.1.1 
    ├─┬ http-signature@0.10.1 
    │ ├── asn1@0.1.11 
    │ └── ctype@0.5.3 
    ├── keep-alive-agent@0.0.1 
    ├── lru-cache@2.7.3 
    ├── negotiator@0.5.3 
    ├── node-uuid@1.4.8 
    ├─┬ once@1.4.0 
    │ └── wrappy@1.0.2 
    ├── qs@2.4.2 
    ├── semver@4.3.6 
    ├── spdy@1.32.5 
    ├── tunnel-agent@0.4.3 
    └─┬ verror@1.10.0 
      ├── assert-plus@1.0.0 
      ├── core-util-is@1.0.2 
      └── extsprintf@1.3.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/mobang/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 36% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0284 took 1.8922s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (20:8) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.
//
// Restify supports both a client and server API, and in the essence of not
// loading the kitchen sink on clients, the exports here is chunked up into
// client and server; note clients will have to opt in by setting the env
// var "RESTIFY_CLIENT_ONLY", but if you're in that boat, it's not hard to do,
// and enables much faster load times
//

var shallowCopy = require('./utils').shallowCopy;


function createClient(options) {
    if (typeof (options) === 'string') {
        options = {
            url: options
        };
    }

    var assert = require('assert-plus');
    var bunyan = require('./bunyan_helper');
    var clients = require('./clients');

    assert.object(options, 'options');

    var client;
    var opts = shallowCopy(options);
    opts.agent = options.agent;
    opts.name = opts.name || 'restify';
    opts.type = opts.type || 'application/octet-stream';
    opts.log = opts.log || bunyan.createLogger(opts.name);

    switch (opts.type) {
        case 'json':
            client = new clients.JsonClient(opts);
            break;

        case 'string':
            client = new clients.StringClient(opts);
            break;

        case 'http':
        default:
            client = new clients.HttpClient(opts);
            break;
    }

    return (client);
}


function createJsonClient(options) {
    if (typeof (options) === 'string') {
        options = {
            url: options
        };
    }

    options = options ? shallowCopy(options) : {};
    options.type = 'json';
    return (createClient(options));
}


function createStringClient(options) {
    if (typeof (options) === 'string') {
        options = {
            url: options
        };
    }

    options = options ? shallowCopy(options) : {};
    options.type = 'string';
    return (createClient(options));
}


function createHttpClient(options) {
    if (typeof (options) === 'string') {
        options = {
            url: options
        };
    }

    options = options ? shallowCopy(options) : {};
    options.type = 'http';
    return (createClient(options));
}


function createServer(options) {
    var bunyan = require('./bunyan_helper');
    var InternalError = require('./errors').InternalError;
    var Router = require('./router');
    var Server = require('./server');

    var opts = shallowCopy(options || {});
    var server;

    opts.name = opts.name || 'restify';
    opts.log = opts.log || bunyan.createLogger(opts.name);
    opts.router = opts.router || new Router(opts);

    server = new Server(opts);
    server.on('uncaughtException', function (req, res, route, e) {
        if (this.listeners('uncaughtException').length > 1 ||
            res.headersSent) {
            return (false);
        }

        res.send(new InternalError(e, e.message || 'unexpected error'));
        return (true);
    });

    return (server);
}


/**
 * Returns a string representation of a URL pattern , with its
 * parameters filled in by the passed hash.
 *
 * If a key is not found in the hash for a param, it is left alone.
 *
 * @param {Object} a hash of parameter names to values for substitution.
 */
function realizeUrl(pattern, params) {
    var p = pattern.replace(/\/:([^/]+)/g, function (match, k) {
        return (params.hasOwnProperty(k) ? '/' + params[k] : match);
    });


    return (require('./utils').sanitizePath(p));
}


///--- Exports

module.exports = {
    // Client API
    createClient: createClient,
    createJsonClient: createJsonClient,
    createJSONClient: createJsonClient,
    createStringClient: createStringClient,
    createHttpClient: createHttpClient,
    get HttpClient() {
        return (require('./clients').HttpClient);
    },
    get JsonClient() {
        return (require('./clients').JsonClient);
    },
    get StringClient() {
        return (require('./clients').StringClient);
    },

    // Miscellaneous API
    get bunyan() {
        return (require('./bunyan_helper'));
    },

    errors: {}

};

var errors = require('./errors');
Object.keys(errors).forEach(function (k) {
    module.exports.errors[k] = errors[k];
    module.exports[k] = errors[k];
});

if (!process.env.RESTIFY_CLIENT_ONLY) {

    module.exports.createServer = createServer;
    module.exports.httpDate = require('./http_date');
    module.exports.realizeUrl = realizeUrl;
    module.exports.formatters = require('./formatters');
    module.exports.plugins = {};
    var plugins = require('./plugins');
    Object.keys(plugins).forEach(function (k) {
        module.exports.plugins[k] = plugins[k];
        module.exports[k] = plugins[k];
    });
}
 at SyntaxError: Unexpected token (20:8)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/mobang/node_modules/mobang/index.js. Coverage (Term): 83% Coverage (LOC): 100%
*- File /root/Targets/mobang/node_modules/mobang/lib/index.js. Coverage (Term): 79% Coverage (LOC): 100%
*- File /root/Targets/mobang/node_modules/mobang/lib/server.js. Coverage (Term): 21% Coverage (LOC): 30%
*- File /root/Targets/mobang/node_modules/mobang/conf/config.js. Coverage (Term): 97% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
