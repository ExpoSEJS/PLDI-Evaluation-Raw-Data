/root/Targets/react-positionable-component
└─┬ react-positionable-component@1.0.10 
  ├── classnames@1.2.2 
  ├─┬ react@0.13.3 
  │ └─┬ envify@3.4.1 
  │   ├─┬ jstransform@11.0.3 
  │   │ ├── base62@1.2.0 
  │   │ ├─┬ commoner@0.10.8 
  │   │ │ ├── commander@2.11.0 
  │   │ │ ├─┬ detective@4.5.0 
  │   │ │ │ ├── acorn@4.0.13 
  │   │ │ │ └── defined@1.0.0 
  │   │ │ ├─┬ glob@5.0.15 
  │   │ │ │ ├─┬ inflight@1.0.6 
  │   │ │ │ │ └── wrappy@1.0.2 
  │   │ │ │ ├── inherits@2.0.3 
  │   │ │ │ ├─┬ minimatch@3.0.4 
  │   │ │ │ │ └─┬ brace-expansion@1.1.8 
  │   │ │ │ │   ├── balanced-match@1.0.0 
  │   │ │ │ │   └── concat-map@0.0.1 
  │   │ │ │ ├── once@1.4.0 
  │   │ │ │ └── path-is-absolute@1.0.1 
  │   │ │ ├── graceful-fs@4.1.11 
  │   │ │ ├── iconv-lite@0.4.19 
  │   │ │ ├─┬ mkdirp@0.5.1 
  │   │ │ │ └── minimist@0.0.8 
  │   │ │ ├── private@0.1.7 
  │   │ │ ├── q@1.5.0 
  │   │ │ └─┬ recast@0.11.23 
  │   │ │   ├── ast-types@0.9.6 
  │   │ │   ├── esprima@3.1.3 
  │   │ │   └── source-map@0.5.7 
  │   │ ├── esprima-fb@15001.1.0-dev-harmony-fb 
  │   │ ├── object-assign@2.1.1 
  │   │ └─┬ source-map@0.4.4 
  │   │   └── amdefine@1.0.1 
  │   └── through@2.3.8 
  ├─┬ react-hammerjs@0.2.5 
  │ └── hammerjs@2.0.8 
  ├── react-onclickoutside@0.2.5 
  └── uglifyjs@2.4.11 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-positionable-component/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0664 took 4.3923s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (58:6) on program "use strict";

var React = require("react");
var classes = require("classnames");

var PlacementController = require("./PlacementController.jsx");
var RotationController = require("./RotationController.jsx");
var ScaleController = require("./ScaleController.jsx");
var ZIndexController = require("./ZIndexController.jsx");

var onClickOutside = require("react-onclickoutside");

var Positionable = React.createClass({

  mixins: [ onClickOutside ],

  handleClickOutside: function() {
    this.stopHandling();
    this.setState({
      activated: false
    });
  },

  getInitialState: function() {
    return {
      x: this.props.x || 0,
      y: this.props.y || 0,
      angle: this.props.angle || 0,
      scale: this.props.scale || 1,
      zIndex: this.props.zIndex || 1,
      activated: !!this.props.activated || false
    };
  },

  render: function() {
    var x = this.state.x,
        y = this.state.y,
        angle = (180 * this.state.angle / Math.PI),
        scale = this.state.scale,
        zIndex = this.state.zIndex;

    var style = {
      transform: [
        "translate("+x+"px, "+y+"px)",
        "rotate("+angle+"deg)",
        "scale("+scale+")"
      ].join(" "),
      transformOrigin: "center",
      zIndex: zIndex
    };

    var className = classes({
      positionable: true,
      activated: this.state.activated
    });

    var controls = [
      <PlacementController x={this.state.x}
                           y={this.state.y}
                           ref="placementController"
                           onChange={this.handleTranslation}
                           activated="true"
                           origin={this} />
      ,
      <RotationController  angle={this.state.angle}
                           ref="rotationController"
                           onChange={this.handleRotation}
                           activated="true"
                           origin={this} />
      ,
      <ScaleController     scale={this.state.scale}
                           ref="scaleController"
                           onChange={this.handleScaling}
                           activated="true"
                           origin={this} />
      ,
      <ZIndexController    zIndex={this.state.zIndex}
                           ref="zIndexController"
                           onChange={this.handleZIndexChange} />
    ];

    return (
      <div style={style} className={className}
           onMouseDown={this.startHandling}
           onTap={this.startHandlingTouch}
           onMouseUp={this.stopHandling}>
        { this.state.activated ? controls : false }
        { this.props.children }
      </div>
    );
  },

  toggle: function(evt) {
    this.setState({
      activated: !this.state.activated
    });
  },

  startHandlingTouch: function() {
    this.setState({
      activated: true
    });
  },

  startHandling: function() {
    this.handling = true;
  },

  stopHandling: function() {
    if(this.handling && this.props.clickHandler && !this.manipulating) {
      this.props.clickHandler(this);
    }
    this.manipulating = false;
    this.handling = false;
  },

  handleTranslation: function(x, y) {
    this.manipulating = true;
    this.setState({
      x: x,
      y: y
    });
  },

  handleRotation: function(angle) {
    this.manipulating = true;
    this.setState({
      angle: angle
    });
  },

  handleScaling: function(scale) {
    this.manipulating = true;
    this.setState({
      scale: scale
    }, function() {
      // make sure all the controls are counter-scale if scale < 1
      var counterScale = 1/scale;
      ["rotation","scale","placement","zIndex"].forEach(function(c) {
        this.refs[c+"Controller"].setScale(counterScale);
      }.bind(this));
    });
  },

  handleZIndexChange: function(zIndex) {
    this.manipulating = true;
    this.setState({
      zIndex: zIndex
    });
  },

  getTransform: function() {
    return {
      x: this.state.x,
      y: this.state.y,
      angle: this.state.angle,
      scale: this.state.scale,
      zIndex: this.state.zIndex
    };
  },

  setTransform: function(obj) {
    this.setState({
      x: obj.x || 0,
      y: obj.y || 0,
      angle: obj.angle || 0,
      scale: obj.scale || 1,
      zIndex: obj.zIndex || 0
    });
  }
});

module.exports = Positionable;
 at SyntaxError: Unexpected token (58:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExprList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2165:22)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
