
> realm@1.12.0 install /root/Targets/playappstore/node_modules/realm
> node-pre-gyp install --fallback-to-build

[realm] Success: "/root/Targets/playappstore/node_modules/realm/compiled/node-v51_linux_x64/realm.node" is installed via remote

> pngdefry@1.1.6 postinstall /root/Targets/playappstore/node_modules/pngdefry
> node postinstall.js

/root/Targets/playappstore
└─┬ playappstore@0.2.2 
  ├── adm-zip@0.4.7 
  ├── apk-parser3@0.1.7 
  ├─┬ apn@2.1.5 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├── http2@3.3.6 
  │ ├─┬ jsonwebtoken@7.4.3 
  │ │ ├─┬ joi@6.10.1 
  │ │ │ ├── hoek@2.16.3 
  │ │ │ ├── isemail@1.2.0 
  │ │ │ ├── moment@2.18.1 
  │ │ │ └── topo@1.1.0 
  │ │ ├─┬ jws@3.1.4 
  │ │ │ ├── base64url@2.0.0 
  │ │ │ └─┬ jwa@1.1.5 
  │ │ │   ├── buffer-equal-constant-time@1.0.1 
  │ │ │   └── ecdsa-sig-formatter@1.0.9 
  │ │ └── lodash.once@4.1.1 
  │ ├── node-forge@0.7.1 
  │ └─┬ verror@1.10.0 
  │   ├── assert-plus@1.0.0 
  │   ├── core-util-is@1.0.2 
  │   └── extsprintf@1.3.0 
  ├─┬ body-parser@1.18.2 
  │ ├── bytes@3.0.0 
  │ ├── content-type@1.0.4 
  │ ├── depd@1.1.1 
  │ ├─┬ http-errors@1.6.2 
  │ │ └── inherits@2.0.3 
  │ ├── iconv-lite@0.4.19 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── qs@6.5.1 
  │ ├─┬ raw-body@2.3.2 
  │ │ └── unpipe@1.0.0 
  │ └─┬ type-is@1.6.15 
  │   ├── media-typer@0.3.0 
  │   └─┬ mime-types@2.1.17 
  │     └── mime-db@1.30.0 
  ├── commander@2.11.0 
  ├── dateformat@2.2.0 
  ├─┬ express@4.15.5 
  │ ├─┬ accepts@1.3.4 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.2 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├── finalhandler@1.0.6 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@1.1.5 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.4.0 
  │ ├── qs@6.5.0 
  │ ├── range-parser@1.2.0 
  │ ├─┬ send@0.15.6 
  │ │ ├── destroy@1.0.4 
  │ │ └── mime@1.3.4 
  │ ├── serve-static@1.12.6 
  │ ├── setprototypeof@1.0.3 
  │ ├── statuses@1.3.1 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.1.2 
  ├─┬ ipa-extract-info@1.2.2 
  │ ├─┬ bplist-parser@0.1.1 
  │ │ └── big-integer@1.6.25 
  │ ├── collect-stream@1.2.1 
  │ ├─┬ once@1.4.0 
  │ │ └── wrappy@1.0.2 
  │ ├─┬ plist@1.2.0 
  │ │ ├── base64-js@0.0.8 
  │ │ ├── util-deprecate@1.0.2 
  │ │ ├─┬ xmlbuilder@4.0.0 
  │ │ │ └── lodash@3.10.1 
  │ │ └── xmldom@0.1.27 
  │ ├─┬ typedarray-to-buffer@3.1.2 
  │ │ └── is-typedarray@1.0.0 
  │ ├─┬ yauzl@2.8.0 
  │ │ ├── buffer-crc32@0.2.13 
  │ │ └─┬ fd-slicer@1.0.1 
  │ │   └── pend@1.2.0 
  │ └─┬ zipjs-browserify@1.0.1 
  │   ├─┬ brfs@1.4.3 
  │   │ ├─┬ quote-stream@1.0.2 
  │   │ │ └── buffer-equal@0.0.1 
  │   │ ├─┬ resolve@1.4.0 
  │   │ │ └── path-parse@1.0.5 
  │   │ ├─┬ static-module@1.5.0 
  │   │ │ ├─┬ duplexer2@0.0.2 
  │   │ │ │ └─┬ readable-stream@1.1.14 
  │   │ │ │   ├── isarray@0.0.1 
  │   │ │ │   └── string_decoder@0.10.31 
  │   │ │ ├─┬ escodegen@1.3.3 
  │   │ │ │ ├── esprima@1.1.1 
  │   │ │ │ ├── estraverse@1.5.1 
  │   │ │ │ ├── esutils@1.0.0 
  │   │ │ │ └─┬ source-map@0.1.43 
  │   │ │ │   └── amdefine@1.0.1 
  │   │ │ ├─┬ falafel@2.1.0 
  │   │ │ │ ├── acorn@5.1.2 
  │   │ │ │ ├── foreach@2.0.5 
  │   │ │ │ ├── isarray@0.0.1 
  │   │ │ │ └── object-keys@1.0.11 
  │   │ │ ├─┬ has@1.0.1 
  │   │ │ │ └── function-bind@1.1.1 
  │   │ │ ├── object-inspect@0.4.0 
  │   │ │ ├─┬ quote-stream@0.0.0 
  │   │ │ │ └── minimist@0.0.8 
  │   │ │ ├─┬ readable-stream@1.0.34 
  │   │ │ │ ├── isarray@0.0.1 
  │   │ │ │ └── string_decoder@0.10.31 
  │   │ │ ├── shallow-copy@0.0.1 
  │   │ │ ├─┬ static-eval@0.2.4 
  │   │ │ │ └─┬ escodegen@0.0.28 
  │   │ │ │   ├── esprima@1.0.4 
  │   │ │ │   └── estraverse@1.3.2 
  │   │ │ └─┬ through2@0.4.2 
  │   │ │   └─┬ xtend@2.1.2 
  │   │ │     └── object-keys@0.4.0 
  │   │ └── through2@2.0.3 
  │   ├── UNMET PEER DEPENDENCY browserify@>= 2.3
  │   └─┬ browserify-shim@3.8.14 
  │     ├─┬ exposify@0.5.0 
  │     │ ├─┬ globo@1.1.0 
  │     │ │ ├─┬ accessory@1.1.0 
  │     │ │ │ ├── ap@0.2.0 
  │     │ │ │ ├── balanced-match@0.2.1 
  │     │ │ │ └── dot-parts@1.0.1 
  │     │ │ ├── is-defined@1.0.0 
  │     │ │ └── ternary@1.0.0 
  │     │ ├── map-obj@1.0.1 
  │     │ ├─┬ replace-requires@1.0.4 
  │     │ │ ├─┬ detective@4.5.0 
  │     │ │ │ ├── acorn@4.0.13 
  │     │ │ │ └── defined@1.0.0 
  │     │ │ ├─┬ has-require@1.2.2 
  │     │ │ │ └── escape-string-regexp@1.0.5 
  │     │ │ └── patch-text@1.0.2 
  │     │ ├─┬ through2@0.4.2 
  │     │ │ ├─┬ readable-stream@1.0.34 
  │     │ │ │ ├── isarray@0.0.1 
  │     │ │ │ └── string_decoder@0.10.31 
  │     │ │ └─┬ xtend@2.1.2 
  │     │ │   └── object-keys@0.4.0 
  │     │ └─┬ transformify@0.1.2 
  │     │   └─┬ readable-stream@1.1.14 
  │     │     ├── isarray@0.0.1 
  │     │     └── string_decoder@0.10.31 
  │     ├─┬ mothership@0.2.0 
  │     │ └── find-parent-dir@0.3.0 
  │     ├─┬ rename-function-calls@0.1.1 
  │     │ └─┬ detective@3.1.0 
  │     │   ├─┬ escodegen@1.1.0 
  │     │   │ └── esprima@1.0.4 
  │     │   └── esprima-fb@3001.1.0-dev-harmony-fb 
  │     ├── resolve@0.6.3 
  │     └── through@2.3.8 
  ├─┬ multer@1.3.0 
  │ ├── append-field@0.1.0 
  │ ├─┬ busboy@0.2.14 
  │ │ ├─┬ dicer@0.2.5 
  │ │ │ ├─┬ readable-stream@1.1.14 
  │ │ │ │ ├── isarray@0.0.1 
  │ │ │ │ └── string_decoder@0.10.31 
  │ │ │ └── streamsearch@0.1.2 
  │ │ └─┬ readable-stream@1.1.14 
  │ │   ├── isarray@0.0.1 
  │ │   └── string_decoder@0.10.31 
  │ ├─┬ concat-stream@1.6.0 
  │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ ├── isarray@1.0.0 
  │ │ │ ├── process-nextick-args@1.0.7 
  │ │ │ └── string_decoder@1.0.3 
  │ │ └── typedarray@0.0.6 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├── object-assign@3.0.0 
  │ └── xtend@4.0.1 
  ├── mustache@2.3.0 
  ├── pngdefry@1.1.6 
  ├── prettysize@1.1.0 
  ├─┬ realm@1.12.0 
  │ ├─┬ extract-zip@1.6.5 
  │ │ ├─┬ debug@2.2.0 
  │ │ │ └── ms@0.7.1 
  │ │ ├─┬ mkdirp@0.5.0 
  │ │ │ └── minimist@0.0.8 
  │ │ └── yauzl@2.4.1 
  │ ├── ini@1.3.4 
  │ ├── nan@2.7.0 
  │ ├─┬ node-fetch@1.7.3 
  │ │ ├── encoding@0.1.12 
  │ │ └── is-stream@1.1.0 
  │ ├─┬ node-pre-gyp@0.6.38 
  │ │ ├─┬ hawk@3.1.3 
  │ │ │ ├── boom@2.10.1 
  │ │ │ ├── cryptiles@2.0.5 
  │ │ │ └── sntp@1.0.9 
  │ │ ├─┬ nopt@4.0.1 
  │ │ │ ├── abbrev@1.1.0 
  │ │ │ └─┬ osenv@0.1.4 
  │ │ │   ├── os-homedir@1.0.2 
  │ │ │   └── os-tmpdir@1.0.2 
  │ │ ├─┬ npmlog@4.1.2 
  │ │ │ ├─┬ are-we-there-yet@1.1.4 
  │ │ │ │ └── delegates@1.0.0 
  │ │ │ ├── console-control-strings@1.1.0 
  │ │ │ ├─┬ gauge@2.7.4 
  │ │ │ │ ├── aproba@1.2.0 
  │ │ │ │ ├── has-unicode@2.0.1 
  │ │ │ │ ├── object-assign@4.1.1 
  │ │ │ │ ├── signal-exit@3.0.2 
  │ │ │ │ ├─┬ string-width@1.0.2 
  │ │ │ │ │ ├── code-point-at@1.1.0 
  │ │ │ │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │ │ │ │ │   └── number-is-nan@1.0.1 
  │ │ │ │ ├─┬ strip-ansi@3.0.1 
  │ │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ │ └── wide-align@1.1.2 
  │ │ │ └── set-blocking@2.0.0 
  │ │ ├─┬ rc@1.2.1 
  │ │ │ ├── deep-extend@0.4.2 
  │ │ │ ├── minimist@1.2.0 
  │ │ │ └── strip-json-comments@2.0.1 
  │ │ ├─┬ request@2.81.0 
  │ │ │ ├── aws-sign2@0.6.0 
  │ │ │ ├── form-data@2.1.4 
  │ │ │ ├─┬ har-validator@4.2.1 
  │ │ │ │ ├── ajv@4.11.8 
  │ │ │ │ └── har-schema@1.0.5 
  │ │ │ ├─┬ http-signature@1.1.1 
  │ │ │ │ └── assert-plus@0.2.0 
  │ │ │ ├── performance-now@0.2.0 
  │ │ │ └── qs@6.4.0 
  │ │ ├─┬ rimraf@2.6.2 
  │ │ │ └─┬ glob@7.1.2 
  │ │ │   ├── fs.realpath@1.0.0 
  │ │ │   ├── inflight@1.0.6 
  │ │ │   ├─┬ minimatch@3.0.4 
  │ │ │   │ └─┬ brace-expansion@1.1.8 
  │ │ │   │   ├── balanced-match@1.0.0 
  │ │ │   │   └── concat-map@0.0.1 
  │ │ │   └── path-is-absolute@1.0.1 
  │ │ ├── semver@5.4.1 
  │ │ ├─┬ tar@2.2.1 
  │ │ │ ├── block-stream@0.0.9 
  │ │ │ └─┬ fstream@1.0.11 
  │ │ │   └── graceful-fs@4.1.11 
  │ │ └─┬ tar-pack@3.4.0 
  │ │   ├── fstream-ignore@1.0.5 
  │ │   └── uid-number@0.0.6 
  │ ├─┬ prop-types@15.6.0 
  │ │ ├─┬ fbjs@0.8.16 
  │ │ │ ├── core-js@1.2.7 
  │ │ │ ├─┬ isomorphic-fetch@2.2.1 
  │ │ │ │ └── whatwg-fetch@2.0.3 
  │ │ │ ├── object-assign@4.1.1 
  │ │ │ ├─┬ promise@7.3.1 
  │ │ │ │ └── asap@2.0.6 
  │ │ │ ├── setimmediate@1.0.5 
  │ │ │ └── ua-parser-js@0.7.14 
  │ │ ├─┬ loose-envify@1.3.1 
  │ │ │ └── js-tokens@3.0.2 
  │ │ └── object-assign@4.1.1 
  │ ├─┬ request@2.82.0 
  │ │ ├── aws-sign2@0.7.0 
  │ │ ├── aws4@1.6.0 
  │ │ ├── caseless@0.12.0 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ ├── extend@3.0.1 
  │ │ ├── forever-agent@0.6.1 
  │ │ ├─┬ form-data@2.3.1 
  │ │ │ └── asynckit@0.4.0 
  │ │ ├─┬ har-validator@5.0.3 
  │ │ │ ├─┬ ajv@5.2.3 
  │ │ │ │ ├── co@4.6.0 
  │ │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │   └── jsonify@0.0.0 
  │ │ │ └── har-schema@2.0.0 
  │ │ ├─┬ hawk@6.0.2 
  │ │ │ ├── boom@4.3.1 
  │ │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ │ └── boom@5.2.0 
  │ │ │ ├── hoek@4.2.0 
  │ │ │ └── sntp@2.0.2 
  │ │ ├─┬ http-signature@1.2.0 
  │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ └── json-schema@0.2.3 
  │ │ │ └─┬ sshpk@1.13.1 
  │ │ │   ├── asn1@0.2.3 
  │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │   ├── dashdash@1.14.1 
  │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │   ├── getpass@0.1.7 
  │ │ │   ├── jsbn@0.1.1 
  │ │ │   └── tweetnacl@0.14.5 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├── oauth-sign@0.8.2 
  │ │ ├── performance-now@2.1.0 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── stringstream@0.0.5 
  │ │ ├─┬ tough-cookie@2.3.3 
  │ │ │ └── punycode@1.4.1 
  │ │ └── tunnel-agent@0.6.0 
  │ ├─┬ sync-request@3.0.1 
  │ │ ├── http-response-object@1.1.0 
  │ │ └─┬ then-request@2.2.0 
  │ │   ├── caseless@0.11.0 
  │ │   └─┬ http-basic@2.5.1 
  │ │     └── caseless@0.11.0 
  │ └─┬ url-parse@1.1.9 
  │   ├── querystringify@1.0.0 
  │   └── requires-port@1.0.0 
  ├── underscore@1.8.3 
  └── uuid@3.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/playappstore/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0371 took 1.7601s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
var express = require('express');
var IPA = require('./ipa.js');
var APK = require('./apk.js');
var Cert = require('./cert.js');
var util = require('util')
var path = require('path');
var fs = require('fs');
var os = require('os');
var multer  = require('multer')
// omit the options object, the files will be kept in memory and never written to disk
var upload = multer({ dest: os.homedir() + '/.playappstore/tmp_file/' })
var bodyParser = require('body-parser')
var FileHelper = require('./file-helper.js');
const fl = new FileHelper();
var program = require('commander');
var dateFormat = require('dateformat');
const pkgVersion = require('./package.json').version;

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function() {
    fn.call(this);
    old.apply(this, arguments);
  };
}


before(program, 'outputHelp', function() {
  this.allowUnknownOption();
});
program
    .version(pkgVersion)
    .usage('[option] [dir]')
    .option('-p, --port <port-number>', 'set port for server (defaults is 9090)')
    .option('-h, --host <host>', 'set host for server (defaults is your LAN ip)')
    .option('-c, --config <config-file>', 'set the config json file path')
    .parse(process.argv);

var app = express();

app.post('/apps', upload.single('package'), function (req, res) {
  var token = req.header('MasterKey')
  if (token !== masterKey) {
    res.sendStatus(403);
    return;
  }

  var info = {};
 
  if (req.body.changelog) {
    info['changelog'] = req.body.changelog;
  }
  if (req.body.description) {
    info['description'] = req.body.description;
  }
  if (req.body.lastCommitMsg) {
    info['lastCommitMsg'] = req.body.lastCommitMsg;
  }
  if (req.body.jenkinsChangelog) {
    info['jenkinsChangelog'] = req.body.jenkinsChangelog;
  }

  // req.file is the `package` file
  var file = req.file;
  var filepath = file.originalname;
  var promise;
  if (path.extname(filepath) === ".ipa") {
    promise = IPA.publish(file, info);
  }
  if (path.extname(filepath) === ".apk") {
    promise = APK.publish(file, info);
  }
  promise.then(function(app) {
    res.send(app);
    //res.send('success, ' + app.id);
  }, function(error) {
    res.send('fail, ' + error.message);
  });
})

app.get('/records/:platform', function(req, res) {

  var promise;
  if(req.params.platform === 'ios') {
    promise = IPA.getRecords();
  }
  if(req.params.platform === 'android') {
    promise = APK.getRecords();
  }
  promise.then(function(apps) {
      return mapApps(apps);
  })
  .then(function(apps) {
      res.send(apps);
  }, function(err) {
      res.send('fail,' + err);
  })
})


app.get('/apps/:platform/:bundleId', function(req, res) {
  var page = parseInt(req.query.page ? req.query.page : 1);
  var count = parseInt(req.query.count ? req.query.count : 10);
  var promise;
  if (req.params.platform === 'ios') {
    var bundleId = req.params.bundleId;
    if (typeof(bundleId) === 'string') {
      promise = IPA.getAllVersions(bundleId, page, count);
    } else {
      // promise = IPA.getAllInfos(page, count);
    }
  }
  if (req.params.platform === 'android') {
    var bundleId = req.params.bundleId;
    if (typeof(req.params.bundleId) === 'string') {
      promise = APK.getAllVersions(bundleId, page, count);
    } else {
      // promise = APK.getAllInfos(page, cout);
    }
  }
  promise.then(function(apps) {
    return mapApps(apps);
  })
  .then(function(apps) {
    res.send(apps);
  }, function(err) {
    res.send('fail,' + err);
  })  
});
app.get('/apps/:platform/:bundleId/:objectId', function(req, res) {
  var promise;
  if (req.params.platform === 'ios') {
    var bundleId = req.params.bundleId;
    var objectId = req.params.objectId;
    promise = IPA.getAppDetail(bundleId, objectId);
    
  }
  if (req.params.platform === 'android') {
    var bundleId = req.params.bundleId;
    if (typeof(req.params.bundleId) === 'string') {
      promise = APK.getAppDetail(bundleId, page, count);
    } else {
      // promise = APK.getAllInfos(page, cout);
    }
  }
  promise.then(function(apps) {
    return mapApps(apps);
  })
  .then(function(apps) {
    res.send(apps);
  }, function(err) {
    res.send('fail,' + err);
  })  
});

app.get('/plist/:guid', function(req, res) {
  var promise = IPA.renderManifist(req.params.guid, HTTPSServerUrl);
  promise.then(function(buffer) {
    res.set('Content-Type', 'text/plain; charset=utf-8');
    res.set('Access-Control-Allow-Origin','*');
    res.send(buffer);
  }, function(error) {
    res.send('fail,' + err);
  })
})

function mapApps(apps) {
  var mapedApps = apps.map(function(app) {
    app.icon = HTTPSServerUrl + path.join('icon', app.icon);
    
    if (app.hasOwnProperty('package')) {
      app.package = HTTPSServerUrl + path.join('app', app.package);
    }
    if (app.hasOwnProperty('createdAt')) {
      app.createdAt = dateFormat(app.createdAt, 'yyyy-mm-dd HH:MM');
    }
    if (app.hasOwnProperty('updatedAt')) {
      app.updatedAt = dateFormat(app.updatedAt, 'yyyy-mm-dd HH:MM');
    }
    if (app.hasOwnProperty('manifest')) {
      if (app.platform === 'ios') {
        var manifest = path.basename(app.manifest, '.plist')
        manifest = HTTPSServerUrl + path.join('plist', manifest);
        app.manifest = util.format('itms-services://?action=download-manifest&url=%s', manifest);
      }
    }
    return app;
  })
  return mapedApps;
}

var jsonParser = bodyParser.json()
app.post('/devices', jsonParser, function (req, res) {
  if (!req.body) return res.sendStatus(400)
  var device = {};
  device.uuid = req.body.uuid;
  device.platform = req.body.platform;
  if (typeof(req.body.apnsToken) === 'string') {
    device.apnsToken = req.body.apnsToken; 
  }
  var promise = IPA.registerDevice(device);
  promise.then(function(result) {
    res.send(result);
  }, function(error) {
    res.send('fail: '+ error); 
  })
})

app.get('/records/:platform/followed', function(req, res) {
  var token = req.header('Authorization');
  var platform = req.params.platform;
  var promise;
  if (platform === 'ios') {
    promise = IPA.getAllFolloweds(token);
  }
  promise.then(function(records) {
    return mapApps(records);
  })
  .then(function(records) {
    res.send(records);
  }, function(error) {
    res.send('fail: ' + error);
  })
})

var router = '/records/:platform/:bundleId/follow';
app.put(router, function(req, res) {
  var token = req.header('Authorization')
  if (typeof(token) !== 'string' ) {
    res.sendStatus(403);
  }
  var bundleId = req.params.bundleId;
  var platform = req.params.platform;
  var promise;
  if (platform === 'ios') {
    promise = IPA.updateFollowedRecords(token, bundleId, '1');
  }
  promise.then(function(result) {
    res.sendStatus(204);
  }, function(error) {
    res.send('fail: ' + error);
  })
})
app.delete(router, function(req, res) {
  var token = req.header('Authorization')
  if (typeof(token) !== 'string' ) {
    res.sendStatus(403);
  }
  var bundleId = req.params.bundleId;
  var platform = req.params.platform;
  var promise;
  if (platform === 'ios') {
    promise = IPA.updateFollowedRecords(token, bundleId, '0');
  }
  promise.then(function(result) {
    res.sendStatus(204);
  }, function(error) {
    res.send('fail: ' + error);
  })
})

var ssl_certificate;
var ssl_certificate_key;
var host;
var port;
var masterKeyHolder;
if (typeof(program.config) === 'string') {
  if (!fs.existsSync(program.config)) {
    console.log('wrong config path!');
    return;
  }
  var options = require(program.config);
  ssl_certificate = options.ssl_certificate || null;
  ssl_certificate_key = options.ssl_certificate_key || null;
  host = options.host;
  port = options.port || 9090;
  masterKeyHolder = options.masterKey || 'playappstore';
} else {
  host = process.env.host || Cert.getIP();
  port = process.env.PORT || 9090;
  // masterKey for post apps 
  masterKeyHolder = process.env.masterKey || 'playappstore';
}
const masterKey = masterKeyHolder;

console.log('please set request header field "MasterKey" to %s when publish a new app', masterKey);

// may remove the http server in the future.
var httpPort = 9091;
const HTTPServerUrl = util.format('http://%s:%d/', host, httpPort);

const HTTPSServerUrl =  util.format('https://%s:%d/', host, port);

var certsOptions;
// only generate the self-signed certificate when the user didn't have one.
if (ssl_certificate == null || ssl_certificate_key == null) {
  var caPath;
  Cert.configCerts(host, function (options, certDirPath, caCertPath) {
    certsOptions = options;
    caPath = caCertPath;
  })
  app.use('/cer/rootca.cer', express.static(caPath));
  // enable to visit this page to install customize cert
  app.get('/diy', function(req, res) {
    res.sendFile(path.join(__dirname, '/Web/cert.html'));
  });
  console.log('please visit this url to install ca cert: ' + HTTPSServerUrl + 'diy');
} else {
  certsOptions = {
    key: fs.readFileSync(ssl_certificate_key),
    cert: fs.readFileSync(ssl_certificate)
  }
}


app.use('/', express.static(path.join(__dirname, 'Web')));
app.use('/app', express.static(fl.appDir));
app.use('/icon', express.static(fl.iconDir));

// Serve static assets from the /public folder
app.use('/public', express.static(path.join(__dirname, '/public')));

var httpServer = require('http').createServer(app);
httpServer.listen(httpPort, function() {
});

var httpsServer = require('https').createServer(certsOptions, app);
httpsServer.listen(port, function() {
  console.log('playappstore running on: ' + HTTPSServerUrl );
}).on('error', function(err) {
  console.log('create https server fail, reason :' + err);
});
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
