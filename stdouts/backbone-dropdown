/root/Targets/backbone-dropdown
└─┬ backbone-dropdown@1.0.0 
  ├── backbone@0.9.10 
  ├── basic-buttons@1.1.0 
  ├── jquery@2.2.4 
  └── underscore@1.8.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/backbone-dropdown/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0739 took 3.4519s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:78) on program <html>
<head>

<title>Dropdown Component for Backbone.js Apps</title>
<meta charset="utf-8"></meta>

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-44608486-3', 'kjantzer.github.io');
  ga('send', 'pageview');

</script>

<!-- demo styles which imports dropdown styles -->
<link href="style.css" rel="stylesheet" type="text/css">

<script src="demo-build.js"></script>
</head>

<body>

<a href="https://github.com/kjantzer/backbonejs-dropdown-view"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png" alt="Fork me on GitHub"></a>

<header>
    
    <h1>
        Dropdown
    </h1>
    
    <h3>
        Easily create dropdown views for menus, inline editing, or just a simple tooltip.
    </h3>
    
    <p style="text-align:center">
        <a id="header-demo" class="button dd">Click Me</a>
    </p>
    
    <script>
    $('#header-demo').dropdown([
        { label:'Edit'},
        { label:'View Options', dropdown: {
            view: ['Option 1', 'Option 2'],
            w: 120,
            align: 'rightBottom'
        }},
        'divider',
        { label:'Delete', }
    ], {
        w:160,
        align: 'bottom',
    })</script>
    
</header>

<section>

    <h1>Overview</h1>
    
    <p><b>Version 1.0.0</b></p>
    
    <p>Dropdown is designed to be robust and extensible. It can be used independently or embedded into another plugin such as <a href="https://github.com/kjantzer/backbone-list-controller">List Controller</a>.</p>
    
    <p>The general idea is to display a view inline with the target element. A <code>Backbone.View</code>, <code>jQuery/HTML String</code>, or <code>Array</code> are all acceptable types of "views". An array will be converted into a <code>DropdownMenuView</code>.</p>
    
    <hr>
    
    <h1>General Use</h1>
    
    <p><b>Vanilla</b></p>
<pre>
new Dropdown({
    
    // required
    renderTo: $("#my-button"),
    view: null,
    
    // options
    w: 200,
    trigger: 'click',
    align: 'bottomRight',
    autoCenter: false,
    theme: 'default',
    closeOnEsc: true,
    delay: 1000
});
</pre>

    <p><b>jQuery</b></p>
    
<pre>
// jQuery
$("#my-button").dropdown(view, opts);
</pre>
    
    <hr>
    
    <h1>Menu <code>Array</code></h1>
    
    <p>This is the most powerful view in Dropdown with many different features such as nesting, dividers, filtering, icons, multiple action events, and more. See the options documentation for details.</p>
    
    <p><a id="menu" class="button button-default dd">Open Menu</a></p>
    
    <script>
    $('#menu').dropdown([
        { divider: 'My Menu'},
        { label:'Item 1', val: 1 },
        { label:'Item 2', val: 2 },
        { label:'Item 3', val: 3 },
        'divider',
        { label:'Item 4', val: 4 },
    ], {
        w:120,
        align: 'bottom',
        onClick: function(item){
            alert(item.label)
        }
    })
    </script>
    
<pre>
$('#menu').dropdown([
    { divider: 'My Menu'},
    { label:'Item 1', val: 1 },
    { label:'Item 2', val: 2 },
    { label:'Item 3', val: 3 },
    'divider',
    { label:'Item 4', val: 4 },
], {
    w:120,
    align: 'bottom',
    onClick: function(item){
        console.log(item)
    }
})
</pre>
        
        <hr>
        
        <h1>Backbone View <code>Backbone.View</code></h1>
        
        <p>Dropdown can be used as a thin display wrapper for any Backbone view. Once the view has been initialized, pass it to dropdown as the <code>view</code></p>
        
        <p><a id="myaccount" class="button dd">My Account</a></p>
        
        <script>
        var MyAccount = Backbone.View.extend({
    		
    		attributes:{style: 'padding: .5em 1em;'},
    		
    		render: function(){
    			this.$el.html('<h2>My Account</h2><p>This is a backbone view loaded inside of a dropdown.<br><br><a class="dd">Click here</a> to see a nested dropdown view</p>');
    			this.$('a').dropdown("A nested dropdown. You can have multiple nested dropdowns. But dont't get too crazy or your users may not be very happy ;)");
    			
    			return this;
    		}
    	}) 
    	
    	var myAccount = new MyAccount();
    	
    	$('#myaccount').dropdown(myAccount, {w: 300})
        </script>
        
<pre><xmp>
var MyAccount = Backbone.View.extend({
    
    attributes:{style: 'padding: .5em 1em;'},
    
    render: function(){
        this.$el.html('<h2>My Account</h2><p>This is a backbone view loaded inside of a dropdown.<br><br>
            <a class="dd">Click here</a> to see a nested dropdown view</p>');
        this.$('a').dropdown("A nested dropdown. You can have multiple nested dropdowns.
        But dont't get too crazy or your users may not be very happy ;)");
        return this;
    }
}) 

var myAccount = new MyAccount();

$('#myaccount').dropdown(myAccount, {w: 300})
</xmp></pre>

    <br>
    <p>Each time the dropdown is opened, <code>myAccount.render()</code> will be called.</p>
        
        
    
    <hr>
    
    <h1>Text Tooltip <code>String/jQuery</code></h1>
    
    <p>Dropdown can also be used as a simple <a id="simple-tooltip" class="dd">tooltip</a>.</p>
    
    <script>
    $('#simple-tooltip').dropdown('This is a tooltip', {
        align: 'topRight', 
        trigger: 'hover'
    });
    </script>
    
<pre>
$('#simple-tooltip').dropdown('This is a tooltip', {
    align: 'topRight', 
    trigger: 'hover'
});
</pre>

    <br>
    <p>This <a id="simple-tooltip-dynamic" class="dd">tooltip</a> will be dynamically generated each time it opens.</p>
    
    <script>
    $('#simple-tooltip-dynamic').dropdown(function(){
        return 'This is dynamic: '+(new Date).toString();
    }, {
        align: 'topRight', 
        w: 500,
        trigger: 'hover'
    });
    </script>
    
<pre>
$('#simple-tooltip-dynamic').dropdown(function(){
    return 'This is dynamic: '+(new Date).toString();
}, {
    align: 'top',
    w: 220, 
    trigger: 'hover'
});
</pre>

    <hr>
    
    <h1>Options</h1>

    <p>Soon.</p>

    <hr>
    
    <h1>License</h1>
    
    <p>MIT © <a href="http://kevinjantzer.com">Kevin Jantzer</a></p>


    <hr>
    
    <small>Built by <a href="http://kevinjantzer.com">Kevin Jantzer</a>, <a href="http://blackstoneaudio.com">Blackstone Audio Inc.</a></small>
    
</section>

</body>
</html>
 at SyntaxError: Unexpected token (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
