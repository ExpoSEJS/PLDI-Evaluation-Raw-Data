/root/Targets/ember-format
└─┬ ember-format@0.0.5 
  ├─┬ chalk@1.0.0 
  │ ├── ansi-styles@2.2.1 
  │ ├── escape-string-regexp@1.0.5 
  │ ├─┬ has-ansi@1.0.3 
  │ │ ├── ansi-regex@1.1.1 
  │ │ └── get-stdin@4.0.1 
  │ ├── strip-ansi@2.0.1 
  │ └── supports-color@1.3.1 
  ├─┬ cldr@3.0.0 
  │ ├── passerror@0.0.1 
  │ ├── pegjs@0.7.0 
  │ ├─┬ seq@0.3.5 
  │ │ ├─┬ chainsaw@0.0.9 
  │ │ │ └── traverse@0.3.9 
  │ │ └── hashish@0.0.4 
  │ ├── uglify-js@1.3.3 
  │ ├── underscore@1.3.3 
  │ ├── xmldom@0.1.19 
  │ └── xpath@0.0.7 
  ├─┬ ember-cli-babel@5.2.4 
  │ ├─┬ broccoli-babel-transpiler@5.7.2 
  │ │ ├─┬ babel-core@5.8.38 
  │ │ │ ├── babel-plugin-constant-folding@1.0.1 
  │ │ │ ├── babel-plugin-dead-code-elimination@1.0.2 
  │ │ │ ├── babel-plugin-eval@1.0.1 
  │ │ │ ├── babel-plugin-inline-environment-variables@1.0.1 
  │ │ │ ├── babel-plugin-jscript@1.0.4 
  │ │ │ ├── babel-plugin-member-expression-literals@1.0.1 
  │ │ │ ├── babel-plugin-property-literals@1.0.1 
  │ │ │ ├── babel-plugin-proto-to-assign@1.0.4 
  │ │ │ ├── babel-plugin-react-constant-elements@1.0.3 
  │ │ │ ├── babel-plugin-react-display-name@1.0.3 
  │ │ │ ├── babel-plugin-remove-console@1.0.1 
  │ │ │ ├── babel-plugin-remove-debugger@1.0.1 
  │ │ │ ├── babel-plugin-runtime@1.0.7 
  │ │ │ ├─┬ babel-plugin-undeclared-variables-check@1.0.2 
  │ │ │ │ └── leven@1.0.2 
  │ │ │ ├── babel-plugin-undefined-to-void@1.1.6 
  │ │ │ ├── babylon@5.8.38 
  │ │ │ ├── bluebird@2.11.0 
  │ │ │ ├── convert-source-map@1.5.0 
  │ │ │ ├── core-js@1.2.7 
  │ │ │ ├─┬ detect-indent@3.0.1 
  │ │ │ │ └── minimist@1.2.0 
  │ │ │ ├── esutils@2.0.2 
  │ │ │ ├── fs-readdir-recursive@0.1.2 
  │ │ │ ├── globals@6.4.1 
  │ │ │ ├─┬ home-or-tmp@1.0.0 
  │ │ │ │ ├── os-tmpdir@1.0.2 
  │ │ │ │ └── user-home@1.1.1 
  │ │ │ ├─┬ is-integer@1.0.7 
  │ │ │ │ └─┬ is-finite@1.0.2 
  │ │ │ │   └── number-is-nan@1.0.1 
  │ │ │ ├── js-tokens@1.0.1 
  │ │ │ ├── json5@0.4.0 
  │ │ │ ├── lodash@3.10.1 
  │ │ │ ├── minimatch@2.0.10 
  │ │ │ ├── output-file-sync@1.1.2 
  │ │ │ ├── path-exists@1.0.0 
  │ │ │ ├── path-is-absolute@1.0.1 
  │ │ │ ├── private@0.1.7 
  │ │ │ ├─┬ regenerator@0.8.40 
  │ │ │ │ ├─┬ commoner@0.10.8 
  │ │ │ │ │ ├── commander@2.11.0 
  │ │ │ │ │ ├─┬ detective@4.5.0 
  │ │ │ │ │ │ ├── acorn@4.0.13 
  │ │ │ │ │ │ └── defined@1.0.0 
  │ │ │ │ │ ├── iconv-lite@0.4.19 
  │ │ │ │ │ ├── q@1.5.0 
  │ │ │ │ │ └─┬ recast@0.11.23 
  │ │ │ │ │   ├── ast-types@0.9.6 
  │ │ │ │ │   └── esprima@3.1.3 
  │ │ │ │ ├─┬ defs@1.1.1 
  │ │ │ │ │ ├─┬ alter@0.2.0 
  │ │ │ │ │ │ └── stable@0.1.6 
  │ │ │ │ │ ├── ast-traverse@0.1.1 
  │ │ │ │ │ ├── breakable@1.0.0 
  │ │ │ │ │ ├── simple-fmt@0.1.0 
  │ │ │ │ │ ├── simple-is@0.2.0 
  │ │ │ │ │ ├── stringmap@0.2.2 
  │ │ │ │ │ ├── stringset@0.2.1 
  │ │ │ │ │ ├── tryor@0.1.2 
  │ │ │ │ │ └─┬ yargs@3.27.0 
  │ │ │ │ │   ├── camelcase@1.2.1 
  │ │ │ │ │   ├─┬ cliui@2.1.0 
  │ │ │ │ │   │ ├─┬ center-align@0.1.3 
  │ │ │ │ │   │ │ ├─┬ align-text@0.1.4 
  │ │ │ │ │   │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │   │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ │   │ │ │ ├── longest@1.0.1 
  │ │ │ │ │   │ │ │ └── repeat-string@1.6.1 
  │ │ │ │ │   │ │ └── lazy-cache@1.0.4 
  │ │ │ │ │   │ ├── right-align@0.1.3 
  │ │ │ │ │   │ └── wordwrap@0.0.2 
  │ │ │ │ │   ├── decamelize@1.2.0 
  │ │ │ │ │   ├─┬ os-locale@1.4.0 
  │ │ │ │ │   │ └─┬ lcid@1.0.0 
  │ │ │ │ │   │   └── invert-kv@1.0.0 
  │ │ │ │ │   ├── window-size@0.1.4 
  │ │ │ │ │   └── y18n@3.2.1 
  │ │ │ │ ├── esprima-fb@15001.1001.0-dev-harmony-fb 
  │ │ │ │ ├─┬ recast@0.10.33 
  │ │ │ │ │ └── ast-types@0.8.12 
  │ │ │ │ └── through@2.3.8 
  │ │ │ ├─┬ regexpu@1.3.0 
  │ │ │ │ ├── esprima@2.7.3 
  │ │ │ │ ├── regenerate@1.3.3 
  │ │ │ │ ├── regjsgen@0.2.0 
  │ │ │ │ └─┬ regjsparser@0.1.5 
  │ │ │ │   └── jsesc@0.5.0 
  │ │ │ ├── repeating@1.1.3 
  │ │ │ ├── shebang-regex@1.0.0 
  │ │ │ ├── slash@1.0.0 
  │ │ │ ├── source-map@0.5.7 
  │ │ │ ├─┬ source-map-support@0.2.10 
  │ │ │ │ └─┬ source-map@0.1.32 
  │ │ │ │   └── amdefine@1.0.1 
  │ │ │ ├── to-fast-properties@1.0.3 
  │ │ │ ├── trim-right@1.0.1 
  │ │ │ └── try-resolve@1.0.1 
  │ │ ├─┬ broccoli-merge-trees@1.2.4 
  │ │ │ └─┬ can-symlink@1.0.0 
  │ │ │   └── tmp@0.0.28 
  │ │ ├─┬ broccoli-persistent-filter@1.4.3 
  │ │ │ ├─┬ async-disk-cache@1.3.2 
  │ │ │ │ ├─┬ istextorbinary@2.1.0 
  │ │ │ │ │ ├── binaryextensions@2.0.0 
  │ │ │ │ │ ├── editions@1.3.3 
  │ │ │ │ │ └── textextensions@2.1.0 
  │ │ │ │ └── username-sync@1.0.1 
  │ │ │ ├─┬ async-promise-queue@1.0.4 
  │ │ │ │ └─┬ async@2.5.0 
  │ │ │ │   └── lodash@4.17.4 
  │ │ │ └── promise-map-series@0.2.3 
  │ │ ├── clone@0.2.0 
  │ │ ├─┬ hash-for-dep@1.2.0 
  │ │ │ └─┬ broccoli-kitchen-sink-helpers@0.3.1 
  │ │ │   └── glob@5.0.15 
  │ │ ├── heimdalljs-logger@0.1.9 
  │ │ ├─┬ json-stable-stringify@1.0.1 
  │ │ │ └── jsonify@0.0.0 
  │ │ ├── rsvp@3.6.2 
  │ │ └─┬ workerpool@2.2.4 
  │ │   └── object-assign@4.1.1 
  │ ├─┬ broccoli-funnel@1.2.0 
  │ │ ├── array-equal@1.0.0 
  │ │ ├── blank-object@1.0.2 
  │ │ ├─┬ broccoli-plugin@1.3.0 
  │ │ │ └─┬ quick-temp@0.1.8 
  │ │ │   ├── mktemp@0.4.0 
  │ │ │   └─┬ underscore.string@3.3.4 
  │ │ │     ├── sprintf-js@1.1.1 
  │ │ │     └── util-deprecate@1.0.2 
  │ │ ├─┬ debug@2.6.8 
  │ │ │ └── ms@2.0.0 
  │ │ ├── exists-sync@0.0.4 
  │ │ ├── fast-ordered-set@1.0.3 
  │ │ ├── fs-tree-diff@0.5.6 
  │ │ ├─┬ heimdalljs@0.2.5 
  │ │ │ └── rsvp@3.2.1 
  │ │ ├─┬ minimatch@3.0.4 
  │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │   ├── balanced-match@1.0.0 
  │ │ │   └── concat-map@0.0.1 
  │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ └── minimist@0.0.8 
  │ │ ├── path-posix@1.0.0 
  │ │ ├── symlink-or-copy@1.1.8 
  │ │ └─┬ walk-sync@0.3.2 
  │ │   ├── ensure-posix-path@1.0.2 
  │ │   └─┬ matcher-collection@1.0.5 
  │ │     └── minimatch@3.0.4 
  │ ├── clone@2.1.1 
  │ ├─┬ ember-cli-version-checker@1.3.1 
  │ │ └── semver@5.4.1 
  │ └─┬ resolve@1.4.0 
  │   └── path-parse@1.0.5 
  ├─┬ fs-extra@0.18.2 
  │ ├─┬ graceful-fs@3.0.11 
  │ │ └── natives@1.1.0 
  │ ├─┬ jsonfile@2.4.0 
  │ │ └── graceful-fs@4.1.11 
  │ └─┬ rimraf@2.6.2 
  │   └─┬ glob@7.1.2 
  │     ├── fs.realpath@1.0.0 
  │     ├─┬ inflight@1.0.6 
  │     │ └── wrappy@1.0.2 
  │     ├── inherits@2.0.3 
  │     ├── minimatch@3.0.4 
  │     └── once@1.4.0 
  ├── intl@0.1.4 
  ├── intl-format-cache@2.0.4 
  ├─┬ intl-messageformat@1.1.0 
  │ └── intl-messageformat-parser@1.1.0 
  ├── intl-relativeformat@1.1.0 
  └── serialize-javascript@1.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/ember-format/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 42% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","sort","RegExp","create","Object","charCodeAt","join","apply","reverse","max","Array","pop","splice","Function"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0456 took 72.7982s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: 'with' in strict mode (1:154) on program (function(__v) { __v=__v||{};var __c0,__i,__i0,__l,__l0,__n,__p=[],__x,rule;with(__v){__p.push("(function(){\n  /*\n   * Generated by PEG.js 0.7.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n  \n  function quote(s) {\n    /*\n     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n     * string literal except for the closing quote character, backslash,\n     * carriage return, line separator, paragraph separator, and line feed.\n     * Any character may appear in the form of an escape sequence.\n     *\n     * For portability, we also escape escape all control and non-ASCII\n     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n     * because JSHint does not like the first and IE the second.\n     */\n     return '\"' + s\n      .replace(/\\\\/g, '\\\\\\\\')  // backslash\n      .replace(/\"/g, '\\\\\"')    // closing quote character\n      .replace(/\\x08/g, '\\\\b') // backspace\n      .replace(/\\t/g, '\\\\t')   // horizontal tab\n      .replace(/\\n/g, '\\\\n')   // line feed\n      .replace(/\\f/g, '\\\\f')   // form feed\n      .replace(/\\r/g, '\\\\r')   // carriage return\n      .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape)\n      + '\"';\n  }\n  \n  var result = {\n    /*\n     * Parses the input with a generated parser. If the parsing is successfull,\n     * returns a value explicitly or implicitly specified by the grammar from\n     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n     */\n    parse: function(input, startRule) {\n      var parseFunctions = {\n");__c0=node.rules;__l0=__c0.length;for(__i0=0;__i0<__l0;__i0++){rule=__c0[__i0];__p.push("        ");__p.push(string(rule.name) + ": parse_" + rule.name + (rule !== node.rules[node.rules.length - 1] ? "," : ""));__p.push("\n");}__p.push("      };\n      \n      if (startRule !== undefined) {\n        if (parseFunctions[startRule] === undefined) {\n          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n        }\n      } else {\n        startRule = ");__p.push(string(node.startRule));__p.push(";\n      }\n      \n      ");__p.push(posInit("pos"));__p.push(";\n      var reportFailures = 0;\n      ");__p.push(posInit("rightmostFailuresPos"));__p.push(";\n      var rightmostFailuresExpected = [];\n");if(options.cache){__p.push("      var cache = {};\n");}__p.push("      \n      function padLeft(input, padding, length) {\n        var result = input;\n        \n        var padLength = length - input.length;\n        for (var i = 0; i < padLength; i++) {\n          result = padding + result;\n        }\n        \n        return result;\n      }\n      \n      function escape(ch) {\n        var charCode = ch.charCodeAt(0);\n        var escapeChar;\n        var length;\n        \n        if (charCode <= 0xFF) {\n          escapeChar = 'x';\n          length = 2;\n        } else {\n          escapeChar = 'u';\n          length = 4;\n        }\n        \n        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n      }\n      \n");if(options.trackLineAndColumn){__p.push("      function clone(object) {\n        var result = {};\n        for (var key in object) {\n          result[key] = object[key];\n        }\n        return result;\n      }\n      \n      function advance(pos, n) {\n        var endOffset = pos.offset + n;\n        \n        for (var offset = pos.offset; offset < endOffset; offset++) {\n          var ch = input.charAt(offset);\n          if (ch === \"\\n\") {\n            if (!pos.seenCR) { pos.line++; }\n            pos.column = 1;\n            pos.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            pos.line++;\n            pos.column = 1;\n            pos.seenCR = true;\n          } else {\n            pos.column++;\n            pos.seenCR = false;\n          }\n        }\n        \n        pos.offset += n;\n      }\n      \n");}__p.push("      function matchFailed(failure) {\n        if (");__p.push(posOffset("pos"));__p.push(" < ");__p.push(posOffset("rightmostFailuresPos"));__p.push(") {\n          return;\n        }\n        \n        if (");__p.push(posOffset("pos"));__p.push(" > ");__p.push(posOffset("rightmostFailuresPos"));__p.push(") {\n          rightmostFailuresPos = ");__p.push(posClone("pos"));__p.push(";\n          rightmostFailuresExpected = [];\n        }\n        \n        rightmostFailuresExpected.push(failure);\n      }\n      \n");__c0=node.rules;__l0=__c0.length;for(__i0=0;__i0<__l0;__i0++){rule=__c0[__i0];__x="      ";__n=(emit(rule)).toString().split("\n");__l=__n.length;for(__i=0;__i<__l;__i++){__n[__i]=__x+__n[__i]+"\n";}__p.push(__n.join(""));__p.push("      \n");}__p.push("      \n      function cleanupExpected(expected) {\n        expected.sort();\n        \n        var lastExpected = null;\n        var cleanExpected = [];\n        for (var i = 0; i < expected.length; i++) {\n          if (expected[i] !== lastExpected) {\n            cleanExpected.push(expected[i]);\n            lastExpected = expected[i];\n          }\n        }\n        return cleanExpected;\n      }\n      \n");if(!options.trackLineAndColumn){__p.push("      function computeErrorPosition() {\n        /*\n         * The first idea was to use |String.split| to break the input up to the\n         * error position along newlines and derive the line and column from\n         * there. However IE's |split| implementation is so broken that it was\n         * enough to prevent it.\n         */\n        \n        var line = 1;\n        var column = 1;\n        var seenCR = false;\n        \n        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n          var ch = input.charAt(i);\n          if (ch === \"\\n\") {\n            if (!seenCR) { line++; }\n            column = 1;\n            seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            line++;\n            column = 1;\n            seenCR = true;\n          } else {\n            column++;\n            seenCR = false;\n          }\n        }\n        \n        return { line: line, column: column };\n      }\n");}__p.push("      \n");if(node.initializer){__x="      ";__n=(emit(node.initializer)).toString().split("\n");__l=__n.length;for(__i=0;__i<__l;__i++){__n[__i]=__x+__n[__i]+"\n";}__p.push(__n.join(""));}__p.push("      \n      var result = parseFunctions[startRule]();\n      \n      /*\n       * The parser is now in one of the following three states:\n       *\n       * 1. The parser successfully parsed the whole input.\n       *\n       *    - |result !== null|\n       *    - |");__p.push(posOffset("pos"));__p.push(" === input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 2. The parser successfully parsed only a part of the input.\n       *\n       *    - |result !== null|\n       *    - |");__p.push(posOffset("pos"));__p.push(" < input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 3. The parser did not successfully parse any part of the input.\n       *\n       *   - |result === null|\n       *   - |");__p.push(posOffset("pos"));__p.push(" === 0|\n       *   - |rightmostFailuresExpected| contains at least one failure\n       *\n       * All code following this comment (including called functions) must\n       * handle these states.\n       */\n      if (result === null || ");__p.push(posOffset("pos"));__p.push(" !== input.length) {\n        var offset = Math.max(");__p.push(posOffset("pos"));__p.push(", ");__p.push(posOffset("rightmostFailuresPos"));__p.push(");\n        var found = offset < input.length ? input.charAt(offset) : null;\n");if(options.trackLineAndColumn){__p.push("        var errorPosition = ");__p.push(posOffset("pos"));__p.push(" > ");__p.push(posOffset("rightmostFailuresPos"));__p.push(" ? pos : rightmostFailuresPos;\n");}else{__p.push("        var errorPosition = computeErrorPosition();\n");}__p.push("        \n        throw new this.SyntaxError(\n          cleanupExpected(rightmostFailuresExpected),\n          found,\n          offset,\n          errorPosition.line,\n          errorPosition.column\n        );\n      }\n      \n      return result;\n    },\n    \n    /* Returns the parser source code. */\n    toSource: function() { return this._source; }\n  };\n  \n  /* Thrown when a parser encounters a syntax error. */\n  \n  result.SyntaxError = function(expected, found, offset, line, column) {\n    function buildMessage(expected, found) {\n      var expectedHumanized, foundHumanized;\n      \n      switch (expected.length) {\n        case 0:\n          expectedHumanized = \"end of input\";\n          break;\n        case 1:\n          expectedHumanized = expected[0];\n          break;\n        default:\n          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \")\n            + \" or \"\n            + expected[expected.length - 1];\n      }\n      \n      foundHumanized = found ? quote(found) : \"end of input\";\n      \n      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n    }\n    \n    this.name = \"SyntaxError\";\n    this.expected = expected;\n    this.found = found;\n    this.message = buildMessage(expected, found);\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n  };\n  \n  result.SyntaxError.prototype = Error.prototype;\n  \n  return result;\n})()");return __p.join("").replace(/^\n+|\n+$/g,"");}; }) at SyntaxError: 'with' in strict mode (1:154)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$1.parseWithStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:932:27)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:708:32)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
    at Parser.parseFunctionBody (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:14:32)
    at Parser.pp$1.parseFunction (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1065:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1810:19)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/ember-format/node_modules/ember-format/index.js. Coverage (Term): 51% Coverage (LOC): 56%
*- File /root/Targets/ember-format/node_modules/ember-format/lib/commands/index.js. Coverage (Term): 67% Coverage (LOC): 100%
*- File /root/Targets/ember-format/node_modules/ember-format/lib/commands/format-locales.js. Coverage (Term): 13% Coverage (LOC): 14%
*- File /root/Targets/ember-format/node_modules/cldr/lib/cldr.js. Coverage (Term): 2% Coverage (LOC): 1%
*- File /root/Targets/ember-format/node_modules/underscore/underscore.js. Coverage (Term): 17% Coverage (LOC): 32%
*- File /root/Targets/ember-format/node_modules/passerror/lib/index.js. Coverage (Term): 31% Coverage (LOC): 40%
*- File /root/Targets/ember-format/node_modules/cldr/lib/memoizeAsync.js. Coverage (Term): 17% Coverage (LOC): 18%
*- File /root/Targets/ember-format/node_modules/xmldom/dom-parser.js. Coverage (Term): 11% Coverage (LOC): 23%
*- File /root/Targets/ember-format/node_modules/xmldom/sax.js. Coverage (Term): 7% Coverage (LOC): 11%
*- File /root/Targets/ember-format/node_modules/xmldom/dom.js. Coverage (Term): 19% Coverage (LOC): 29%
*- File /root/Targets/ember-format/node_modules/xpath/xpath.js. Coverage (Term): 18% Coverage (LOC): 43%
*- File /root/Targets/ember-format/node_modules/seq/index.js. Coverage (Term): 2% Coverage (LOC): 2%
*- File /root/Targets/ember-format/node_modules/hashish/index.js. Coverage (Term): 9% Coverage (LOC): 21%
*- File /root/Targets/ember-format/node_modules/traverse/index.js. Coverage (Term): 6% Coverage (LOC): 11%
*- File /root/Targets/ember-format/node_modules/chainsaw/index.js. Coverage (Term): 7% Coverage (LOC): 8%
*- File /root/Targets/ember-format/node_modules/cldr/lib/normalizeLocaleId.js. Coverage (Term): 49% Coverage (LOC): 80%
*- File /root/Targets/ember-format/node_modules/cldr/lib/normalizeProperty.js. Coverage (Term): 40% Coverage (LOC): 57%
*- File /root/Targets/ember-format/node_modules/cldr/lib/convertObjectsWithIntegerKeysToArrays.js. Coverage (Term): 9% Coverage (LOC): 12%
*- File /root/Targets/ember-format/node_modules/cldr/lib/CldrPluralRuleSet.js. Coverage (Term): 8% Coverage (LOC): 5%
*- File /root/Targets/ember-format/node_modules/cldr/lib/CldrPluralRule.js. Coverage (Term): 10% Coverage (LOC): 5%
*- File /root/Targets/ember-format/node_modules/pegjs/lib/peg.js. Coverage (Term): 65% Coverage (LOC): 71%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
