/root/Targets/hexo-related-popular-posts
└─┬ hexo-related-popular-posts@2.0.2 
  ├── bluebird@3.5.0 
  ├─┬ columnify@1.5.4 
  │ ├─┬ strip-ansi@3.0.1 
  │ │ └── ansi-regex@2.1.1 
  │ └─┬ wcwidth@1.0.1 
  │   └─┬ defaults@1.0.3 
  │     └── clone@1.0.2 
  ├─┬ ga-analytics@0.0.7 
  │ ├─┬ cli-table@0.3.1 
  │ │ └── colors@1.0.3 
  │ ├── commander@2.11.0 
  │ ├─┬ googleapis@1.1.5 
  │ │ ├── async@0.9.2 
  │ │ ├─┬ gapitoken@0.1.5 
  │ │ │ ├─┬ jws@3.0.0 
  │ │ │ │ ├─┬ base64url@1.0.6 
  │ │ │ │ │ ├─┬ concat-stream@1.4.10 
  │ │ │ │ │ │ ├── readable-stream@1.1.14 
  │ │ │ │ │ │ └── typedarray@0.0.6 
  │ │ │ │ │ └─┬ meow@2.0.0 
  │ │ │ │ │   ├─┬ camelcase-keys@1.0.0 
  │ │ │ │ │   │ ├── camelcase@1.2.1 
  │ │ │ │ │   │ └── map-obj@1.0.1 
  │ │ │ │ │   ├─┬ indent-string@1.2.2 
  │ │ │ │ │   │ ├── get-stdin@4.0.1 
  │ │ │ │ │   │ └─┬ repeating@1.1.3 
  │ │ │ │ │   │   └─┬ is-finite@1.0.2 
  │ │ │ │ │   │     └── number-is-nan@1.0.1 
  │ │ │ │ │   ├── minimist@1.2.0 
  │ │ │ │ │   └── object-assign@1.0.0 
  │ │ │ │ └─┬ jwa@1.0.2 
  │ │ │ │   ├── base64url@0.0.6 
  │ │ │ │   ├── buffer-equal-constant-time@1.0.1 
  │ │ │ │   └─┬ ecdsa-sig-formatter@1.0.9 
  │ │ │ │     └── base64url@2.0.0 
  │ │ │ └─┬ request@2.83.0 
  │ │ │   ├── aws-sign2@0.7.0 
  │ │ │   ├── aws4@1.6.0 
  │ │ │   ├── caseless@0.12.0 
  │ │ │   ├─┬ combined-stream@1.0.5 
  │ │ │   │ └── delayed-stream@1.0.0 
  │ │ │   ├── extend@3.0.1 
  │ │ │   ├── forever-agent@0.6.1 
  │ │ │   ├─┬ form-data@2.3.1 
  │ │ │   │ └── asynckit@0.4.0 
  │ │ │   ├─┬ har-validator@5.0.3 
  │ │ │   │ ├─┬ ajv@5.2.3 
  │ │ │   │ │ ├── co@4.6.0 
  │ │ │   │ │ ├── fast-deep-equal@1.0.0 
  │ │ │   │ │ ├── json-schema-traverse@0.3.1 
  │ │ │   │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │   │ │   └── jsonify@0.0.0 
  │ │ │   │ └── har-schema@2.0.0 
  │ │ │   ├─┬ hawk@6.0.2 
  │ │ │   │ ├── boom@4.3.1 
  │ │ │   │ ├─┬ cryptiles@3.1.2 
  │ │ │   │ │ └── boom@5.2.0 
  │ │ │   │ ├── hoek@4.2.0 
  │ │ │   │ └── sntp@2.0.2 
  │ │ │   ├─┬ http-signature@1.2.0 
  │ │ │   │ ├── assert-plus@1.0.0 
  │ │ │   │ ├─┬ jsprim@1.4.1 
  │ │ │   │ │ ├── extsprintf@1.3.0 
  │ │ │   │ │ ├── json-schema@0.2.3 
  │ │ │   │ │ └── verror@1.10.0 
  │ │ │   │ └─┬ sshpk@1.13.1 
  │ │ │   │   ├── asn1@0.2.3 
  │ │ │   │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │   │   ├── dashdash@1.14.1 
  │ │ │   │   ├── ecc-jsbn@0.1.1 
  │ │ │   │   ├── getpass@0.1.7 
  │ │ │   │   ├── jsbn@0.1.1 
  │ │ │   │   └── tweetnacl@0.14.5 
  │ │ │   ├── is-typedarray@1.0.0 
  │ │ │   ├── isstream@0.1.2 
  │ │ │   ├─┬ mime-types@2.1.17 
  │ │ │   │ └── mime-db@1.30.0 
  │ │ │   ├── oauth-sign@0.8.2 
  │ │ │   ├── performance-now@2.1.0 
  │ │ │   ├── qs@6.5.1 
  │ │ │   ├── safe-buffer@5.1.1 
  │ │ │   ├── tunnel-agent@0.6.0 
  │ │ │   └── uuid@3.1.0 
  │ │ ├─┬ request@2.51.0 
  │ │ │ ├── aws-sign2@0.5.0 
  │ │ │ ├─┬ bl@0.9.5 
  │ │ │ │ └─┬ readable-stream@1.0.34 
  │ │ │ │   ├── isarray@0.0.1 
  │ │ │ │   └── string_decoder@0.10.31 
  │ │ │ ├── caseless@0.8.0 
  │ │ │ ├─┬ combined-stream@0.0.7 
  │ │ │ │ └── delayed-stream@0.0.5 
  │ │ │ ├── forever-agent@0.5.2 
  │ │ │ ├─┬ form-data@0.2.0 
  │ │ │ │ └─┬ mime-types@2.0.14 
  │ │ │ │   └── mime-db@1.12.0 
  │ │ │ ├─┬ hawk@1.1.1 
  │ │ │ │ ├── boom@0.4.2 
  │ │ │ │ ├── cryptiles@0.2.2 
  │ │ │ │ ├── hoek@0.9.1 
  │ │ │ │ └── sntp@0.2.4 
  │ │ │ ├─┬ http-signature@0.10.1 
  │ │ │ │ ├── asn1@0.1.11 
  │ │ │ │ ├── assert-plus@0.1.5 
  │ │ │ │ └── ctype@0.5.3 
  │ │ │ ├── json-stringify-safe@5.0.1 
  │ │ │ ├── mime-types@1.0.2 
  │ │ │ ├── node-uuid@1.4.8 
  │ │ │ ├── oauth-sign@0.5.0 
  │ │ │ ├── qs@2.3.3 
  │ │ │ ├── stringstream@0.0.5 
  │ │ │ ├─┬ tough-cookie@2.3.3 
  │ │ │ │ └── punycode@1.4.1 
  │ │ │ └── tunnel-agent@0.4.3 
  │ │ └── string-template@0.2.1 
  │ └── lodash@2.4.2 
  ├─┬ hasha@3.0.0 
  │ └── is-stream@1.1.0 
  ├─┬ hexo-fs@0.2.2 
  │ ├─┬ chokidar@1.7.0 
  │ │ ├─┬ anymatch@1.3.2 
  │ │ │ ├─┬ micromatch@2.3.11 
  │ │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ │ ├── array-unique@0.2.1 
  │ │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │ │   ├─┬ isobject@2.1.0 
  │ │ │ │ │ │   │ └── isarray@1.0.0 
  │ │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ │ ├── extglob@0.3.2 
  │ │ │ │ ├── filename-regex@2.0.1 
  │ │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ │ ├─┬ for-own@0.1.5 
  │ │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ │ ├── glob-base@0.3.0 
  │ │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │ │     └── is-primitive@2.0.0 
  │ │ │ └─┬ normalize-path@2.1.1 
  │ │ │   └── remove-trailing-separator@1.1.0 
  │ │ ├── async-each@1.0.1 
  │ │ ├── glob-parent@2.0.0 
  │ │ ├── inherits@2.0.3 
  │ │ ├─┬ is-binary-path@1.0.1 
  │ │ │ └── binary-extensions@1.10.0 
  │ │ ├─┬ is-glob@2.0.1 
  │ │ │ └── is-extglob@1.0.0 
  │ │ ├── path-is-absolute@1.0.1 
  │ │ └─┬ readdirp@2.1.0 
  │ │   ├─┬ minimatch@3.0.4 
  │ │   │ └─┬ brace-expansion@1.1.8 
  │ │   │   ├── balanced-match@1.0.0 
  │ │   │   └── concat-map@0.0.1 
  │ │   ├─┬ readable-stream@2.3.3 
  │ │   │ ├── core-util-is@1.0.2 
  │ │   │ ├── isarray@1.0.0 
  │ │   │ ├── process-nextick-args@1.0.7 
  │ │   │ ├── string_decoder@1.0.3 
  │ │   │ └── util-deprecate@1.0.2 
  │ │   └── set-immediate-shim@1.0.1 
  │ ├── escape-string-regexp@1.0.5 
  │ └── graceful-fs@4.1.11 
  ├─┬ kuromoji@0.1.1 
  │ ├─┬ async@2.5.0 
  │ │ └── lodash@4.17.4 
  │ ├── doublearray@0.0.2 
  │ └── zlibjs@0.2.0 
  ├─┬ log-util@1.2.0 
  │ ├─┬ chalk@1.1.3 
  │ │ ├── ansi-styles@2.2.1 
  │ │ ├── has-ansi@2.0.0 
  │ │ └── supports-color@2.0.0 
  │ └── dateformat@2.2.0 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├── moment@2.18.1 
  └── object-assign@4.1.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/hexo-related-popular-posts/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0784 took 3.414s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: 'return' outside of function (40:3) on program 'use strict';

var pathFn       = require('path');
var fs           = require('hexo-fs');
var assign       = require('object-assign');
var moment       = require('moment');
var util         = require('./lib/util.js');
var dr           = require('./lib/dateRange.js');
var su           = require('./lib/settingsUpdate.js');
var lg           = require('./lib/log.js');
var pjson        = require('./package.json');
var dateRangeArr = null;
var gaData       = null;
var shash        = su.chkUpdate(hexo.config);
var ngwHash      = su.chkUpdate_ngw(hexo.config);
var ndt = new Date();
  	ndt = ndt.getTime();

// option
var dateRange                    = 30;
var id                           = null;
var email                        = null;
var key                          = null;
var viewId                       = null;
var cache_path                   = null;
var rankingSheet                 = null;
var cache_exexpires              = 10;
var pvMeasurementsStartDate      = "";
var weight_of_tag_relevancy      = 1.0;
var weight_of_contents_relevancy = 1.0;
var isLog 						 = true;

// get setting from _config.yml
if( hexo.config.popularPosts ){

	if( hexo.config.popularPosts.googleAnalyticsAPI ){
		// Deprecated message
		if( hexo.config.popularPosts.googleAnalyticsAPI.cache && ( hexo.config.popularPosts.googleAnalyticsAPI.cache.path != undefined || hexo.config.popularPosts.googleAnalyticsAPI.cache.expiresDate != undefined ) ){
			lg.log("error", "(Deprecated option) 'googleAnalyticsAPI.cache.path' and 'googleAnalyticsAPI.cache.expiresDate' are deprecated. Please set the 'cache.path' and 'googleAnalyticsAPI.expiresDate' option." , "_config.yml" , true);
			return;
		}

		// google analytics option
		if( hexo.config.popularPosts.googleAnalyticsAPI.dateRange){
			dateRange = Number(hexo.config.popularPosts.googleAnalyticsAPI.dateRange);
		}

		if( hexo.config.popularPosts.googleAnalyticsAPI.clientId && hexo.config.popularPosts.googleAnalyticsAPI.serviceEmail && hexo.config.popularPosts.googleAnalyticsAPI.key && hexo.config.popularPosts.googleAnalyticsAPI.viewId){
			id          = hexo.config.popularPosts.googleAnalyticsAPI.clientId;
			email       = hexo.config.popularPosts.googleAnalyticsAPI.serviceEmail;
			key         = pathFn.join(process.env.PWD || process.cwd() , hexo.config.popularPosts.googleAnalyticsAPI.key);
			viewId      = 'ga:' + hexo.config.popularPosts.googleAnalyticsAPI.viewId;
		}else if( process.env.GOOGLEAPI_CLIENTID && process.env.GOOGLEAPI_EMAIL && process.env.GOOGLEAPI_KEY && process.env.GOOGLEAPI_ANALYTICS_TABLE ){
			id          = process.env.GOOGLEAPI_CLIENTID;
			email       = process.env.GOOGLEAPI_EMAIL;
			key         = process.env.GOOGLEAPI_KEY;
			viewId      = process.env.GOOGLEAPI_ANALYTICS_TABLE;
		}else{
			lg.log("error", "Please set the googleAnalyticsAPI options or environment variables." , "_config.yml" , true);
			return;
		}
		
		if( hexo.config.popularPosts.googleAnalyticsAPI.pvMeasurementsStartDate != undefined){
			var pvmstd = String(hexo.config.popularPosts.googleAnalyticsAPI.pvMeasurementsStartDate);
			pvmstd = dr.getDateStrFromDate( new Date(pvmstd) );
			if(pvmstd.match(/^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$/)){
				pvMeasurementsStartDate = pvmstd;
			}else{
				lg.log("error", "Please check the 'pvMeasurementsStartDate' option. This option should be written in the form 'YYYY-MM-DD' ." , "_config.yml" , true);
				return;
			}
		}

		if( hexo.config.popularPosts.googleAnalyticsAPI.expiresDate != undefined){
			cache_exexpires = Number(hexo.config.popularPosts.googleAnalyticsAPI.expiresDate);
		}
		
		if( hexo.config.popularPosts.googleAnalyticsAPI.rankingSheet && hexo.config.popularPosts.googleAnalyticsAPI.rankingSheet){
			rankingSheet = pathFn.join(process.env.PWD || process.cwd() , hexo.config.popularPosts.googleAnalyticsAPI.rankingSheet);
		}
	}

	// related posts weight option
	if( hexo.config.popularPosts.weight ){
		if( hexo.config.popularPosts.weight.tagRelevancy != undefined){
			weight_of_tag_relevancy = Number(hexo.config.popularPosts.weight.tagRelevancy);
		}
		if( hexo.config.popularPosts.weight.contentsRelevancy != undefined){
			weight_of_contents_relevancy = Number(hexo.config.popularPosts.weight.contentsRelevancy);
		}
	}
	
	// cache option
	if( hexo.config.popularPosts.cache && hexo.config.popularPosts.cache.path){
		cache_path = pathFn.join(process.env.PWD || process.cwd() , hexo.config.popularPosts.cache.path);
	}
	
	// log option
	if( hexo.config.popularPosts.log != undefined){
		isLog = hexo.config.popularPosts.log;
	}
}
dateRangeArr = dr.getDateRange(dateRange);


// orverride config.popularPosts
hexo.config.popularPosts = assign( {}, 
	hexo.config.popularPosts, {
		"tmp" : {
			"isLog"                       : isLog , 
			"negativewordsUpdate"         : ngwHash ,
			"cacheUpdate"                 : "" ,
			"isNgwUpdate"                 : true , 
			"isGaUpdate"                  : true ,
			"settingsUpdate"              : shash ,
			"version" 					  : pjson.version ,
			"dateRange"                   : dateRange ,
			"id"                          : id ,
			"email"                       : email ,
			"key"                         : key ,
			"viewId"                      : viewId ,
			"cache_path"                  : cache_path ,
			"rankingSheet"				  : rankingSheet ,
			"cache_exexpires"             : cache_exexpires ,
			"pvMeasurementsStartDate"     : pvMeasurementsStartDate ,
			"old_cacheDate"               : "" ,
			"weight_of_tag_relevancy"     : weight_of_tag_relevancy ,
			"weight_of_contents_relevancy": weight_of_contents_relevancy ,
			"startDate"                   : dateRangeArr[0] ,
			"endDate"                     : dateRangeArr[1],
			"gaData"                      : [] ,
			"postPath"					  : []
		}
	}
);

lg.setConfig(hexo.config);

// load cache data
if(cache_path && fs.existsSync(cache_path)){
	var gaDataStr = fs.readFileSync(cache_path);
  	gaData = JSON.parse(gaDataStr);
  	hexo.config.popularPosts.tmp.cacheUpdate = su.getMD5(gaDataStr);
  	
  	// check update of morphologicalAnalysis's negativeKeywordsList
  	var isNgwUpdate = !gaData[0].ngwHash || gaData[0].ngwHash != ngwHash;
  	hexo.config.popularPosts.tmp.isNgwUpdate = isNgwUpdate;
  	
  	// check the cache format version and hash data
  	if(gaData[0].version && gaData[0].version == pjson.version && gaData[0].hash && gaData[0].hash == shash){
  		if(gaData[0].cachedDate &&  (ndt - gaData[0].cachedDate) < cache_exexpires*24*60*60*1000 ){
			hexo.config.popularPosts.tmp.isGaUpdate = false;
		}
		hexo.config.popularPosts.tmp.old_cacheDate = gaData[0].cachedDate;
  	}else{
  		gaData = null;
  	}
  	
	if(gaData){
		util.orverrideTmp(gaData[0].gaData , hexo);
	}else{
		util.orverrideTmp([] , hexo);
	}
}

hexo.extend.filter.register('after_init', require('./lib/googleAnalytics'), {async: true});
hexo.extend.filter.register('after_post_render', require('./lib/collector'), {async: true});
hexo.extend.filter.register('after_generate', require('./lib/cache'));
hexo.extend.helper.register('popular_posts', function(options, forcePost){
	return require('./lib/helper')(options , this , hexo , forcePost);
});
hexo.extend.helper.register('popular_posts_json', function(options , forcePost){
	return require('./lib/helper-json')(options , this , hexo , forcePost);
});
hexo.extend.helper.register('popular_posts_pv', require('./lib/pv'));

 at SyntaxError: 'return' outside of function (40:3)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$1.parseReturnStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:831:12)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:699:34)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:709:33)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseIfStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:824:28)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:698:30)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
