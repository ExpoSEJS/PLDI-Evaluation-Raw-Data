
> leveldown@1.5.0 install /root/Targets/mocha-es6/node_modules/leveldown
> prebuild --install

/root/Targets/mocha-es6
└─┬ mocha-es6@0.5.3 
  ├── flatn@1.1.13 
  ├─┬ glob@7.1.2 
  │ ├── fs.realpath@1.0.0 
  │ ├─┬ inflight@1.0.6 
  │ │ └── wrappy@1.0.2 
  │ ├── inherits@2.0.3 
  │ ├─┬ minimatch@3.0.4 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ ├── once@1.4.0 
  │ └── path-is-absolute@1.0.1 
  ├─┬ lively.ast@0.9.17 
  │ └── lively.lang@1.0.19 
  ├─┬ lively.modules@0.8.21 
  │ ├─┬ babel-core@6.26.0 
  │ │ ├─┬ babel-code-frame@6.26.0 
  │ │ │ ├─┬ chalk@1.1.3 
  │ │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ │ └── supports-color@2.0.0 
  │ │ │ ├── esutils@2.0.2 
  │ │ │ └── js-tokens@3.0.2 
  │ │ ├─┬ babel-generator@6.26.0 
  │ │ │ ├─┬ detect-indent@4.0.0 
  │ │ │ │ └─┬ repeating@2.0.1 
  │ │ │ │   └─┬ is-finite@1.0.2 
  │ │ │ │     └── number-is-nan@1.0.1 
  │ │ │ ├── jsesc@1.3.0 
  │ │ │ └── trim-right@1.0.1 
  │ │ ├── babel-helpers@6.24.1 
  │ │ ├── babel-messages@6.23.0 
  │ │ ├─┬ babel-register@6.26.0 
  │ │ │ ├── core-js@2.5.1 
  │ │ │ ├─┬ home-or-tmp@2.0.0 
  │ │ │ │ ├── os-homedir@1.0.2 
  │ │ │ │ └── os-tmpdir@1.0.2 
  │ │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ │ └── minimist@0.0.8 
  │ │ │ └── source-map-support@0.4.18 
  │ │ ├─┬ babel-runtime@6.26.0 
  │ │ │ └── regenerator-runtime@0.11.0 
  │ │ ├── babel-template@6.26.0 
  │ │ ├─┬ babel-traverse@6.26.0 
  │ │ │ ├── globals@9.18.0 
  │ │ │ └─┬ invariant@2.2.2 
  │ │ │   └── loose-envify@1.3.1 
  │ │ ├─┬ babel-types@6.26.0 
  │ │ │ └── to-fast-properties@1.0.3 
  │ │ ├── babylon@6.18.0 
  │ │ ├── convert-source-map@1.5.0 
  │ │ ├─┬ debug@2.6.8 
  │ │ │ └── ms@2.0.0 
  │ │ ├── json5@0.5.1 
  │ │ ├── lodash@4.17.4 
  │ │ ├── private@0.1.7 
  │ │ ├── slash@1.0.0 
  │ │ └── source-map@0.5.7 
  │ ├── babel-regenerator-runtime@6.5.0 
  │ ├── babel-standalone@6.26.0 
  │ ├── lively.notifications@0.4.3 
  │ ├─┬ lively.resources@0.1.31 
  │ │ └─┬ fetch-ponyfill@3.0.2 
  │ │   └─┬ node-fetch@1.6.3 
  │ │     ├─┬ encoding@0.1.12 
  │ │     │ └── iconv-lite@0.4.19 
  │ │     └── is-stream@1.1.0 
  │ ├─┬ lively.storage@0.2.2 
  │ │ ├─┬ pouchdb@6.3.4 
  │ │ │ ├── argsarray@0.0.1 
  │ │ │ ├─┬ buffer-from@0.1.1 
  │ │ │ │ └─┬ is-array-buffer-x@1.7.0 
  │ │ │ │   ├─┬ attempt-x@1.1.0 
  │ │ │ │   │ └─┬ array-like-slice-x@1.1.0 
  │ │ │ │   │   ├─┬ split-if-boxed-bug-x@1.0.0 
  │ │ │ │   │   │ └── has-boxed-string-x@1.0.1 
  │ │ │ │   │   ├─┬ to-integer-x@2.1.0 
  │ │ │ │   │   │ ├── is-finite-x@3.0.1 
  │ │ │ │   │   │ ├── is-nan-x@1.0.1 
  │ │ │ │   │   │ └── math-sign-x@2.1.0 
  │ │ │ │   │   └── to-length-x@2.1.0 
  │ │ │ │   ├─┬ has-to-string-tag-x@1.4.1 
  │ │ │ │   │ └── has-symbol-support-x@1.4.1 
  │ │ │ │   ├─┬ is-object-like-x@1.5.1 
  │ │ │ │   │ ├─┬ is-function-x@3.1.1 
  │ │ │ │   │ │ ├─┬ normalize-space-x@1.3.3 
  │ │ │ │   │ │ │ ├─┬ trim-x@1.0.3 
  │ │ │ │   │ │ │ │ ├── trim-left-x@1.3.5 
  │ │ │ │   │ │ │ │ └── trim-right-x@1.3.3 
  │ │ │ │   │ │ │ └── white-space-x@2.0.3 
  │ │ │ │   │ │ └── replace-comments-x@1.0.3 
  │ │ │ │   │ └── is-primitive@2.0.0 
  │ │ │ │   ├─┬ object-get-own-property-descriptor-x@3.2.0 
  │ │ │ │   │ ├── has-own-property-x@3.1.1 
  │ │ │ │   │ ├── is-falsey-x@1.0.0 
  │ │ │ │   │ ├─┬ is-index-x@1.0.0 
  │ │ │ │   │ │ ├── math-clamp-x@1.1.0 
  │ │ │ │   │ │ ├── max-safe-integer@1.0.1 
  │ │ │ │   │ │ ├─┬ safe-to-string-x@2.0.1 
  │ │ │ │   │ │ │ └── is-symbol@1.0.1 
  │ │ │ │   │ │ └── to-number-x@1.1.0 
  │ │ │ │   │ ├── is-string@1.0.4 
  │ │ │ │   │ ├── property-is-enumerable-x@1.1.0 
  │ │ │ │   │ ├─┬ to-object-x@1.4.1 
  │ │ │ │   │ │ └─┬ require-object-coercible-x@1.4.1 
  │ │ │ │   │ │   └── is-nil-x@1.4.1 
  │ │ │ │   │ └─┬ to-property-key-x@2.0.1 
  │ │ │ │   │   ├─┬ to-primitive-x@1.0.1 
  │ │ │ │   │   │ └── is-date-object@1.0.1 
  │ │ │ │   │   └── to-string-x@1.4.1 
  │ │ │ │   └─┬ to-string-tag-x@1.4.1 
  │ │ │ │     ├── lodash.isnull@3.0.0 
  │ │ │ │     └── validate.io-undefined@1.0.3 
  │ │ │ ├── clone-buffer@1.0.0 
  │ │ │ ├─┬ debug@2.6.4 
  │ │ │ │ └── ms@0.7.3 
  │ │ │ ├── double-ended-queue@2.1.0-0 
  │ │ │ ├── immediate@3.0.6 
  │ │ │ ├── level-codec@7.0.0 
  │ │ │ ├─┬ level-write-stream@1.0.0 
  │ │ │ │ └─┬ end-stream@0.1.0 
  │ │ │ │   └─┬ write-stream@0.4.3 
  │ │ │ │     └── readable-stream@0.0.4 
  │ │ │ ├─┬ leveldown@1.5.0 
  │ │ │ │ ├── abstract-leveldown@2.6.3 
  │ │ │ │ ├── bindings@1.2.1 
  │ │ │ │ ├── fast-future@1.0.2 
  │ │ │ │ ├── nan@2.4.0 
  │ │ │ │ └─┬ prebuild@4.5.0 
  │ │ │ │   ├── async@1.5.2 
  │ │ │ │   ├─┬ execspawn@1.0.1 
  │ │ │ │   │ └── util-extend@1.0.3 
  │ │ │ │   ├── expand-template@1.1.0 
  │ │ │ │   ├─┬ ghreleases@1.0.6 
  │ │ │ │   │ ├── after@0.8.2 
  │ │ │ │   │ ├── ghrepos@2.0.0 
  │ │ │ │   │ ├─┬ ghutils@3.2.1 
  │ │ │ │   │ │ └─┬ jsonist@1.3.0 
  │ │ │ │   │ │   └─┬ hyperquest@1.2.0 
  │ │ │ │   │ │     ├─┬ duplexer2@0.0.2 
  │ │ │ │   │ │     │ └─┬ readable-stream@1.1.14 
  │ │ │ │   │ │     │   └── isarray@0.0.1 
  │ │ │ │   │ │     └── through2@0.6.5 
  │ │ │ │   │ ├── simple-mime@0.1.0 
  │ │ │ │   │ └── url-template@2.0.8 
  │ │ │ │   ├── github-from-package@0.0.0 
  │ │ │ │   ├─┬ node-gyp@3.6.2 
  │ │ │ │   │ ├── fstream@1.0.11 
  │ │ │ │   │ ├── graceful-fs@4.1.11 
  │ │ │ │   │ ├─┬ nopt@3.0.6 
  │ │ │ │   │ │ └── abbrev@1.1.0 
  │ │ │ │   │ ├── osenv@0.1.4 
  │ │ │ │   │ ├── rimraf@2.6.2 
  │ │ │ │   │ ├── semver@5.3.0 
  │ │ │ │   │ ├─┬ tar@2.2.1 
  │ │ │ │   │ │ └── block-stream@0.0.9 
  │ │ │ │   │ └─┬ which@1.3.0 
  │ │ │ │   │   └── isexe@2.0.0 
  │ │ │ │   ├─┬ node-ninja@1.0.2 
  │ │ │ │   │ └─┬ path-array@1.0.1 
  │ │ │ │   │   └─┬ array-index@1.0.0 
  │ │ │ │   │     └─┬ es6-symbol@3.1.1 
  │ │ │ │   │       ├── d@1.0.0 
  │ │ │ │   │       └─┬ es5-ext@0.10.30 
  │ │ │ │   │         └── es6-iterator@2.0.1 
  │ │ │ │   ├── noop-logger@0.1.1 
  │ │ │ │   ├─┬ npmlog@2.0.4 
  │ │ │ │   │ ├── ansi@0.3.1 
  │ │ │ │   │ ├─┬ are-we-there-yet@1.1.4 
  │ │ │ │   │ │ ├── delegates@1.0.0 
  │ │ │ │   │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │   │ │   └── string_decoder@1.0.3 
  │ │ │ │   │ └─┬ gauge@1.2.7 
  │ │ │ │   │   ├── has-unicode@2.0.1 
  │ │ │ │   │   ├── lodash.pad@4.5.1 
  │ │ │ │   │   ├── lodash.padend@4.6.1 
  │ │ │ │   │   └── lodash.padstart@4.6.1 
  │ │ │ │   ├─┬ pump@1.0.2 
  │ │ │ │   │ └── end-of-stream@1.4.0 
  │ │ │ │   ├─┬ rc@1.2.1 
  │ │ │ │   │ ├── deep-extend@0.4.2 
  │ │ │ │   │ ├── ini@1.3.4 
  │ │ │ │   │ └── strip-json-comments@2.0.1 
  │ │ │ │   ├─┬ simple-get@1.4.3 
  │ │ │ │   │ └── unzip-response@1.0.2 
  │ │ │ │   ├─┬ tar-fs@1.15.3 
  │ │ │ │   │ └── chownr@1.0.1 
  │ │ │ │   └─┬ tar-stream@1.5.4 
  │ │ │ │     ├─┬ bl@1.0.3 
  │ │ │ │     │ └── readable-stream@2.0.6 
  │ │ │ │     └─┬ readable-stream@2.3.3 
  │ │ │ │       └── string_decoder@1.0.3 
  │ │ │ ├─┬ levelup@1.3.8 
  │ │ │ │ ├── deferred-leveldown@1.2.2 
  │ │ │ │ ├── level-codec@6.1.0 
  │ │ │ │ ├─┬ level-errors@1.0.5 
  │ │ │ │ │ └─┬ errno@0.1.4 
  │ │ │ │ │   └── prr@0.0.0 
  │ │ │ │ ├── level-iterator-stream@1.3.1 
  │ │ │ │ ├── prr@1.0.1 
  │ │ │ │ ├── semver@5.1.1 
  │ │ │ │ └── xtend@4.0.1 
  │ │ │ ├── lie@3.1.1 
  │ │ │ ├── ltgt@2.2.0 
  │ │ │ ├─┬ readable-stream@1.0.33 
  │ │ │ │ ├── core-util-is@1.0.2 
  │ │ │ │ ├── isarray@0.0.1 
  │ │ │ │ └── string_decoder@0.10.31 
  │ │ │ ├─┬ request@2.80.0 
  │ │ │ │ ├── aws-sign2@0.6.0 
  │ │ │ │ ├── aws4@1.6.0 
  │ │ │ │ ├── caseless@0.12.0 
  │ │ │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ │ │ └── delayed-stream@1.0.0 
  │ │ │ │ ├── extend@3.0.1 
  │ │ │ │ ├── forever-agent@0.6.1 
  │ │ │ │ ├─┬ form-data@2.1.4 
  │ │ │ │ │ └── asynckit@0.4.0 
  │ │ │ │ ├─┬ har-validator@4.2.1 
  │ │ │ │ │ ├─┬ ajv@4.11.8 
  │ │ │ │ │ │ ├── co@4.6.0 
  │ │ │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │ │ │   └── jsonify@0.0.0 
  │ │ │ │ │ └── har-schema@1.0.5 
  │ │ │ │ ├─┬ hawk@3.1.3 
  │ │ │ │ │ ├── boom@2.10.1 
  │ │ │ │ │ ├── cryptiles@2.0.5 
  │ │ │ │ │ ├── hoek@2.16.3 
  │ │ │ │ │ └── sntp@1.0.9 
  │ │ │ │ ├─┬ http-signature@1.1.1 
  │ │ │ │ │ ├── assert-plus@0.2.0 
  │ │ │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ │ │ ├── assert-plus@1.0.0 
  │ │ │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ │ │ └─┬ verror@1.10.0 
  │ │ │ │ │ │   └── assert-plus@1.0.0 
  │ │ │ │ │ └─┬ sshpk@1.13.1 
  │ │ │ │ │   ├── asn1@0.2.3 
  │ │ │ │ │   ├── assert-plus@1.0.0 
  │ │ │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │ │ │   ├─┬ dashdash@1.14.1 
  │ │ │ │ │   │ └── assert-plus@1.0.0 
  │ │ │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │ │ │   ├─┬ getpass@0.1.7 
  │ │ │ │ │   │ └── assert-plus@1.0.0 
  │ │ │ │ │   ├── jsbn@0.1.1 
  │ │ │ │ │   └── tweetnacl@0.14.5 
  │ │ │ │ ├── is-typedarray@1.0.0 
  │ │ │ │ ├── isstream@0.1.2 
  │ │ │ │ ├── json-stringify-safe@5.0.1 
  │ │ │ │ ├─┬ mime-types@2.1.17 
  │ │ │ │ │ └── mime-db@1.30.0 
  │ │ │ │ ├── oauth-sign@0.8.2 
  │ │ │ │ ├── performance-now@0.2.0 
  │ │ │ │ ├── qs@6.3.2 
  │ │ │ │ ├── stringstream@0.0.5 
  │ │ │ │ ├─┬ tough-cookie@2.3.2 
  │ │ │ │ │ └── punycode@1.4.1 
  │ │ │ │ └── tunnel-agent@0.4.3 
  │ │ │ ├── spark-md5@3.0.0 
  │ │ │ ├─┬ through2@2.0.3 
  │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │   ├── process-nextick-args@1.0.7 
  │ │ │ │   ├── safe-buffer@5.1.1 
  │ │ │ │   ├── string_decoder@1.0.3 
  │ │ │ │   └── util-deprecate@1.0.2 
  │ │ │ ├── uuid@3.1.0 
  │ │ │ └── vuvuzela@1.0.3 
  │ │ └─┬ pouchdb-find@0.10.5 
  │ │   ├── is-array@1.0.1 
  │ │   ├── pouchdb-collate@1.2.0 
  │ │   ├── pouchdb-extend@0.1.2 
  │ │   ├─┬ pouchdb-promise@5.4.0 
  │ │   │ └─┬ lie@3.0.4 
  │ │   │   ├─┬ es3ify@0.2.2 
  │ │   │   │ ├── esprima@2.7.3 
  │ │   │   │ ├─┬ jstransform@11.0.3 
  │ │   │   │ │ ├── base62@1.2.0 
  │ │   │   │ │ ├─┬ commoner@0.10.8 
  │ │   │   │ │ │ ├── commander@2.11.0 
  │ │   │   │ │ │ ├─┬ detective@4.5.0 
  │ │   │   │ │ │ │ ├── acorn@4.0.13 
  │ │   │   │ │ │ │ └── defined@1.0.0 
  │ │   │   │ │ │ ├── glob@5.0.15 
  │ │   │   │ │ │ ├── q@1.5.0 
  │ │   │   │ │ │ └─┬ recast@0.11.23 
  │ │   │   │ │ │   ├── ast-types@0.9.6 
  │ │   │   │ │ │   └── esprima@3.1.3 
  │ │   │   │ │ ├── esprima-fb@15001.1.0-dev-harmony-fb 
  │ │   │   │ │ ├── object-assign@2.1.1 
  │ │   │   │ │ └─┬ source-map@0.4.4 
  │ │   │   │ │   └── amdefine@1.0.1 
  │ │   │   │ └── through@2.3.8 
  │ │   │   ├─┬ inline-process-browser@1.0.0 
  │ │   │   │ ├─┬ falafel@1.2.0 
  │ │   │   │ │ ├── acorn@1.2.2 
  │ │   │   │ │ ├── foreach@2.0.5 
  │ │   │   │ │ ├── isarray@0.0.1 
  │ │   │   │ │ └── object-keys@1.0.11 
  │ │   │   │ └── through2@0.6.5 
  │ │   │   └─┬ unreachable-branch-transform@0.3.0 
  │ │   │     ├── esmangle-evaluator@1.0.1 
  │ │   │     ├─┬ recast@0.10.43 
  │ │   │     │ ├── ast-types@0.8.15 
  │ │   │     │ └── esprima-fb@15001.1001.0-dev-harmony-fb 
  │ │   │     └── through2@0.6.5 
  │ │   ├─┬ pouchdb-upsert@2.0.2 
  │ │   │ └─┬ pouchdb-promise@5.4.5 
  │ │   │   └── lie@3.0.4 
  │ │   └── spark-md5@2.0.2 
  │ ├─┬ lively.vm@0.9.14 
  │ │ ├── lively.classes@0.1.17 
  │ │ └── lively.source-transform@0.1.6 
  │ ├── semver@5.4.1 
  │ └── systemjs-plugin-babel@0.0.13 
  ├── minimist@1.2.0 
  └─┬ systemjs@0.19.47 
    └── when@3.7.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/mocha-es6/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0962 took 7.0065s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (111:6) on program /*global System,global*/

import * as modules from "lively.modules";
import mocha from "mocha";
import chai, { expect } from "chai";
import { withMozillaAstDo } from "lively.ast";

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// custom assertions
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

chai.Assertion.addChainableMethod('stringEquals', function(obj) {
  var expected  = String(obj),
      actual    = String(this._obj);

  return this.assert(
    expected === actual,
    'expected ' + actual + ' to equal' + expected,
    'expected ' + actual + ' to not equal' + expected,
    expected, actual, true/*show diff*/);
});

function lively_equals(_super) {
  return function(other) {
    if (this.__flags.deep) return _super.apply(this, arguments);
    else if (Array.isArray(this._obj) && arrayEquals(this._obj, other)) { /*do nothin'*/ }
    else if (this._obj && typeof this._obj.equals === "function" && this._obj.equals(other)) { /*do nothin'*/ }
    else _super.apply(this, arguments)
  }

  function arrayEquals(array, otherArray) {
    var len = array.length;
    if (!otherArray || len !== otherArray.length) return false;

    for (var i = 0; i < len; i++) {
      if (Array.isArray(array[i])) {
        if (!arrayEquals(array[i], otherArray[i])) return false;
        continue;
      }
      if (array[i] && otherArray[i]
      && typeof array[i].equals === "function"
      && typeof otherArray[i].equals === "function") {
        if (!array[i].equals(otherArray[i])) return false;
        continue;
      }
      if (array[i] != otherArray[i]) return false;
    }
    return true;
  }
}

chai.Assertion.overwriteMethod('equal', lively_equals);
chai.Assertion.overwriteMethod('eq', lively_equals);
chai.Assertion.overwriteMethod('equals', lively_equals);

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// default reporter, logs to console
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

export { loadTestModuleAndExtractTestState, runTestFiles, chai, mocha, expect };

function ConsoleReporter(runner) {
  var passes = 0;
  var failures = 0;

  runner.on('pass', function(test) {
    passes++;
    console.log('pass: %s', test.fullTitle());
  });

  runner.on('fail', function(test, err) {
    failures++;
    console.log('fail: %s -- error: %s', test.fullTitle(), err.stack || err.message || err);
  });

  runner.on('end', function() {
    console.log('end: %d/%d', passes, passes + failures);
  });
}


// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// test loading and running
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

function gatherTests(suite, depth = 0) {
  return [{title: suite.title, fullTitle: suite.fullTitle(), depth: depth, type: "suite"}]
    .concat(suite.tests.map(ea => ({title: ea.title, fullTitle: ea.fullTitle(), type: "test", depth: depth})))
    .concat(suite.suites.reduce((tests, suite) => tests.concat(gatherTests(suite, depth + 1)), []));
}

function prepareMocha(mocha, GLOBAL) {
  mocha.suite.on('pre-require', context => {
    GLOBAL.afterEach     = context.afterEach     || context.teardown;
    GLOBAL.after         = context.after         || context.suiteTeardown;
    GLOBAL.beforeEach    = context.beforeEach    || context.setup;
    GLOBAL.before        = context.before        || context.suiteSetup;
    GLOBAL.describe      = context.describe      || context.suite;
    GLOBAL.it            = context.it            || context.test;
    GLOBAL.setup         = context.setup         || context.beforeEach;
    GLOBAL.suiteSetup    = context.suiteSetup    || context.before;
    GLOBAL.suiteTeardown = context.suiteTeardown || context.after;
    GLOBAL.suite         = context.suite         || context.describe;
    GLOBAL.teardown      = context.teardown      || context.afterEach;
    GLOBAL.test          = context.test          || context.it;
    GLOBAL.run           = context.run;
  });
  mocha.ui("bdd");
}

async function loadTestModuleAndExtractTestState(testModuleName, testsByFile = [], opts) {
  var mod = modules.module(testModuleName), id = mod.id;

  await mod.reload({reloadEnv: false, reloadDeps: false});

  mod = modules.module(id);
  var mocha = mod.recorder.mocha;

  if (!mocha)
    throw new Error(`After importing mocha test ${id} no mocha object is present in module context!`);

  var tests = gatherTests(mocha.suite),
      prev = testsByFile.findIndex(ea => ea.file === id);

  if (prev > -1) testsByFile.splice(prev, 1, {file: id, tests});
  else testsByFile.push({file: id, tests});

  return {mocha, testsByFile};
}

async function runTestFiles(files, options) {
  if (!options) options = {};

  if (options.package) {
    (options.logger || console).log("[mocha-es6] importing package %s", options.package);
    await lively.modules.importPackage(options.package);
    files = files.map(f =>
      f.match(/^(\/|[a-z-A-Z]:\\|[^:]+:\/\/)/) ?
        f : join(options.package, f))
  }

  (options.logger || console).log("[mocha-es6] start running tests");

  var failures = 0;
  for (let f of files) {
    var testState = await loadTestModuleAndExtractTestState(f);
    var {mocha, testsByFile} = testState;

    var grep = options.grep || mocha.options.grep || /.*/;
  
    mocha.grep(grep);
    options.invert && mocha.invert();

    try {
      failures += await new Promise((resolve, reject) => mocha.run(failures => resolve(failures)))
    } catch (err) {
      (options.logger || console).log("[mocha-es6] error running tests!\n" + err.stack);
      console.error(err);
      throw err;
    }
  }

  console.log(`Failures: ${failures}`);
  return failures;
}

function join(pathA, pathB) {
  if (pathA[pathA.length] === "/") pathA = pathA.slice(0,-1);
  if (pathB[0] === "/") pathB = pathB.slice(1);
  return `${pathA}/${pathB}`;
}

async function test() {
  var file = "tests/eval-support-test.js";
  var file = "http://localhost:9001/node_modules/lively.ast/tests/eval-support-test.js";
  await runTestFiles([file], {package: "http://localhost:9001/node_modules/lively.ast"})
}



// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// System loader extension
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

export function installSystemInstantiateHook() {
  var name = "mochaEs6TestInstantiater";
  if (modules.isHookInstalled("instantiate", name)) return;
  modules.installHook("instantiate", async function mochaEs6TestInstantiater(proceed, load) {
    var executable = await proceed(load),
        deps = executable.deps;
    if (await isMochaTestLoad(load, executable))
      installMochaEs6ModuleExecute(load, executable);
    return executable;
  });
  console.log("[mocha-es6] System.instantiate hook installed to allow loading mocha tests");
}

export function uninstallSystemInstantiateHook() {
  modules.removeHook("instantiate", "mochaEs6TestInstantiater");
}

export async function isMochaTestLoad(load, executable) {
  var deps = executable.deps || [];
  if (!deps.some(ea => ea.endsWith("mocha-es6") || ea.endsWith("mocha-es6/index.js")))
    return false;

  var moduleName = load.name,
      parsed = await modules.module(moduleName).ast(),
      stop = {},
      isTest = false;

  withMozillaAstDo(parsed, {}, (next, node) => {
    if (node.type === "CallExpression"
     && node.callee.name && node.callee.name.match(/describe|it/)
     && node.arguments[0].type === "Literal") {
      isTest = true;
    } else next();
  });


  return isTest;
}

function installMochaEs6ModuleExecute(load, executable, options = {}) {
  // this is called from a System.instantiate hook to wrap the execution of the
  // test module body. This is needed b/c mocha expects globals to be present.
  // We can't just simply install those globally b/c the test context needs to be
  // bound into those functions and it is individual for each test module
  var origExecute = executable.execute;
  executable.execute = () => recordTestsWhile(load.name, origExecute);
}

function recordTestsWhile(file, whileFn, options = {}) {

  var module = modules.module(file),
      options = {
        global: module.recorder || System.global,
        reporter: ConsoleReporter, ...options
      },
      logger = options.logger || console,
      _mocha = mocha || global.mocha,
      _Mocha = _mocha.constructor || global.Mocha,
      m = options.mocha || (options.mocha = new _Mocha({reporter: options.reporter || ConsoleReporter}));

  module.define("mocha", m);

  // put mocha globals in place
  prepareMocha(m, options.global);
  m.suite.emit('pre-require', options.global, file, m);
  var result = whileFn();

  if (result && typeof result.then === "function")
    return Promise.resolve(result).then(() => {
      var imported = System.get(file);
      m.suite.emit('require', imported, file, m)
      m.suite.emit('post-require', options.global, file, m);
      logger.log("[mocha-es6] loaded test module %s with %s tests",
        file, gatherTests(m.suite).length);
    });


  var imported = System.get(file);
  m.suite.emit('require', imported, file, m)
  m.suite.emit('post-require', options.global, file, m);
  logger.log("[mocha-es6] loaded test module %s with %s tests",
    file, gatherTests(m.suite).length);

  return result;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// for the time being we are directly installing the System instantiate hook in
// here, i.e. when mocha-es6/index.js gets loaded the system is already prepared
// to run tests...!
// uninstallSystemInstantiateHook()
// System.instantiate = System.instantiate.originalFunction.originalFunction

installSystemInstantiateHook();

 at SyntaxError: Unexpected token (111:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:61)
    at Parser.pp$1.parseExpressionStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:966:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:730:24)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
    at Object.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3098:39)
    at convert (/root/ExpoSE/lib/Tropigate/bin/main.js:50:18)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
