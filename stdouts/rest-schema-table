/root/Targets/rest-schema-table
└─┬ rest-schema-table@3.1.1 
  ├─┬ assert@1.4.1 
  │ └─┬ util@0.10.3 
  │   └── inherits@2.0.1 
  ├── inherits@2.0.3 
  ├── methods@1.1.2 
  └── xtend@4.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/rest-schema-table/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0231 took 2.3608s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program 'use strict';

var inherits = require('inherits');
var methods = require('methods');
var assert = require('assert');

var SchemaTable = require('./schema-table.js');

var plainWordRegex = /^\w+$/;
var METHODS_HASH = methods.reduce(function buildHash(acc, k) {
    acc[k.toUpperCase()] = true;
    return acc;
}, {});

module.exports = RestSchemaTable;

function RestSchemaTable() {
    if (!(this instanceof RestSchemaTable)) {
        return new RestSchemaTable();
    }

    SchemaTable.call(this);
}

inherits(RestSchemaTable, SchemaTable);

var proto = RestSchemaTable.prototype;

proto.set = function set(endpoint, schemas) {
    assert(typeof endpoint === 'string',
        'expected string endpoint');
    var parts = endpoint.split(' ');
    assert(parts.length === 2, 'expected only two parts');
    var httpMethod = parts[0];
    var uriPattern = parts[1];

    assert(METHODS_HASH[httpMethod],
        'expected valid HTTP method');

    assertPattern(uriPattern);

    SchemaTable.prototype.set.call(this, endpoint, schemas);
};

function assertPattern(uriPattern) {
    var parts = uriPattern.split('/');

    assert(parts[0] === '', 'expected leading slash');

    parts = parts.slice(1);

    for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        var hasSplat = part.indexOf('*') >= 0;
        var isParam = part.indexOf(':') === 0;

        if (hasSplat &&
            (part.length > 1 || i !== parts.length - 1)
        ) {
            assert(false, 'expected * to be trailing');
        }

        if (isParam && !part.slice(1).match(plainWordRegex)) {
            assert(false, 'expected params to be plain word');
        }
    }
}
 at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
