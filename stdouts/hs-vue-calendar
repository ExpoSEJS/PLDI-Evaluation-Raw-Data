/root/Targets/hs-vue-calendar
└─┬ hs-vue-calendar@1.0.7 
  ├── base64-js@1.2.1 
  ├── director@1.2.8 
  ├─┬ md5@2.2.1 
  │ ├── charenc@0.0.2 
  │ ├── crypt@0.0.2 
  │ └── is-buffer@1.1.5 
  └── zepto@1.2.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/hs-vue-calendar/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0629 took 3.6724s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:78) on program <style lang="stylus">
    @import "./calendar.styl";
</style>
<template>
    <div class="x-calendar" v-show="pStore.isShow" :style="{left:siteX + 'px',top:siteY + 'px'}">
        <div class="calendar-mon">
            <i class="prev-year" @click="prevYear"></i>
            <i class="prev-mon" @click="prev"></i>
            <span><span>{{curYear}}</span>年<span>{{curMon}}</span></span>
            <i class="next-mon" @click="next"></i>
            <i class="next-year" @click="nextYear"></i>
        </div>
        <div class="calendar-box">
            <div class="calendar-week">
                <span v-for="item in weeks" class="week">{{item}}</span>
            </div>
            <table class="calendar-days">
                <tbody>
                    <tr v-for="(row,x) in days">
                        <td v-for="(idy,y) in row" :class="{select:idy.slt, active:idy.isActive}" @click="selectDate(x,y,$event)">{{idy.day}}</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="calendar-btn" v-show="isShowBtn">
            <!--<span class="ok" @click="confirm">确定</span>
            <span class="cancel" @click="cancel">取消</span>-->
            <span class="today" @click="today">今天</span>
            <span :class="{clear,gray:isGray}" @click="clear">清空</span>
        </div>
    </div>
</template>
<script>
    module.exports = {
        data: function () {
            return {
                curDay: 0,
                curMonNum: 0,
                curMon: 0,
                curYear: 0,
                curWeekNum: '',
                curWeek: '',
                days: [],
                curDate:[],   //记录当前选中的位置
                sepMark:'/',   //默认分隔符为"/"
                //val: ''
            }
        },
        props: {
            pStore: {//vue2.0中，任何试图在组件内修改通过props传入的父组件数据都被认为是anti-pattern的
                isShow: {
                    type: Boolean,
                    default: false
                },
                val: {
                    type: String,
                    default:''
                }
            },
            isGray: {
                type: Boolean,
                default: true
            },   //清空按钮是否置灰
            siteX:{
                type: Number,
                default: 0
            },
            siteY:{
                type: Number,
                default: 0
            },
            format: {
                type: String,
                default: 'yyyy/mm/dd'
            },
            isShowBtn: {
                type: Boolean,
                default: true
            },
            dateType: {
                type: String,
                default: 'dDay'//dTime,dDay
            },
            weeks: {
                type: Array,
                default: function () {
                    //return ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
                    return ['日','一','二','三','四','五','六']
                }
            },
            months: {
                type: Array,
                default: function () {
                    //return ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']
                    return ['一月','二月','三月','四月','五月','六月','七月','八月','九月','十月','十一月','十二月']
                }
            }

        },
        methods: {
            initCalendar: function () {
                var _self = this;
                if(_self.pStore.val){
                    var v = _self.pStore.val;
                    //_self.isGray = false;
                    //var vList = [];
                    if(_self.format){
                        var f = _self.format;
                        if(f.indexOf('-') != -1){
                            _self.sepMark = '-';
                        }else if(f.indexOf('/') != -1){
                            _self.sepMark = '/';
                        }
                    }else {
                        if(v.indexOf('-') != -1){
                            _self.sepMark = '-';
                        }else if(v.indexOf('/') != -1){
                            _self.sepMark = '/';
                        }
                    }
                    var d = new Date(Date.parse(v));
                    _self.curYear = d.getFullYear();
                    _self.curDay = d.getDate();
                    _self.curWeekNum = d.getDay();
                    _self.curMonNum = d.getMonth();

                }
                else {
                    //_self.isGray = true;
                    var date = new Date();
                    _self.curYear = date.getFullYear();
                    _self.curDay = date.getDate();
                    _self.curWeekNum = date.getDay();
                    _self.curMonNum = date.getMonth();
                    /*if(_self.format){
                        var f = _self.format;
                        if(f.indexOf('-') != -1){
                            _self.sepMark = '-';
                        }else if(f.indexOf('/') != -1){
                            _self.sepMark = '/';
                        }
                        if(f == 'yyyy-mm-dd' || f == 'yyyy/mm/dd'){
                            _self.pStore.val = _self.curYear+_self.sepMark+_self.fillZero(_self.curMonNum+1)+_self.sepMark+_self.fillZero(_self.curDay);
                        }else if (f == 'dd-mm-yyyy' || f == 'dd/mm/yyyy'){
                            _self.pStore.val = _self.fillZero(_self.curDay)+_self.sepMark+_self.fillZero(_self.curMonNum+1)+_self.sepMark+_self.curYear;
                        }
                    }else {
                        _self.pStore.val = _self.curYear+_self.sepMark+_self.fillZero(_self.curMonNum+1)+_self.sepMark+_self.fillZero(_self.curDay);
                    }*/

                }
                _self.weeks.forEach(function (w,idx) {
                    if(_self.curWeekNum == idx){
                        _self.curWeek = w;
                    }
                });
                _self.months.forEach(function (m,idx) {
                    if(_self.curMonNum == idx){
                        _self.curMon = m;
                    }
                });
                _self.renderCalendar(_self.curYear,_self.curMonNum);
            },
            renderCalendar: function (y,m) {
                var _self = this;
                var cD = new Date();
                var cDD = cD.getDate();//当日
                var cDM = cD.getMonth();//当月
                var cDY = cD.getFullYear();//当年
                var cVD,cVM,CVY;//选中日
                if(_self.pStore.val){
                    var cVal = new Date(Date.parse(_self.pStore.val));
                    cVD = cVal.getDate();
                    cVM = cVal.getMonth();
                    cVY = cVal.getFullYear();
                }
                else {
                    cVD = 0;
                    cVM = 0;
                    cVY = 0;
                }
                //var lastDateOfPre = new Date(y,m,0);//上个月最后一天日期
                var lastDateOfCur = new Date(y,m+1,0);//当月最后一天日期
                //var firstDateOfCur = new Date(y,m,1);//当月的第一天的日期
                //var firstDateOfNext = new Date(y,m+1,1);//下个月的第一天的日期
                var line = 0;
                var days = [];
                for(var i = 1; i <= lastDateOfCur.getDate(); i ++){
                    var cd = new Date(y,m,i);
                    var cw = cd.getDay();
                    var cur = false;
                    var isA = false;
                    /*if(cw == 0){
                        line = line + 1;
                        days[line] = [];
                    }*/
                    if(cVD != cDD){
                        if(i == cDD && m == cDM && y == cDY){
                            cur = true;
                            if(!_self.pStore.val){
                                isA = true;
                                _self.curDate.x = line;
                                _self.curDate.y = cw;
                            }
                        }
                        if(i == cVD && m == cVM && y == cVY){
                            isA = true;
                            _self.curDate.x = line;
                            _self.curDate.y = cw;
                        }
                    }
                    else {
                        if(i == cDD && m == cDM && y == cDY){
                            cur = true;
                            isA = true;
                            _self.curDate.x = line;
                            _self.curDate.y = cw;
                        }
                    }

                    if(i == 1){
                        if(cw == 0){
                            days[line] = [];
                            days[line].push({
                                day: i,
                                week: cw,
                                slt: true,
                                crt: cur,
                                isActive: isA
                            });
                        }
                        else {
                            var addDayL = cw - 0;//需要填充的上个月的天数
                            var ldp = new Date(y,m,0);
                            var ld = ldp.getDate();
                            days[line] = [];
                            for(var a = 0; a< addDayL; a++){
                                days[line].unshift({
                                    day: ld,
                                    week: cw,
                                    slt: false,
                                    crt: cur,
                                    isActive: false
                                });
                                ld--;
                            }
                            days[line].push({
                                day: i,
                                week: cw,
                                slt: true,
                                crt: cur,
                                isActive: isA
                            });

                        }

                    }
                    else if(i == lastDateOfCur.getDate()){
                        if(cw == 6){
                            days[line].push({
                                day: i,
                                week: cw,
                                slt: true,
                                crt: cur,
                                isActive: isA
                            });
                        }else if (cw == 0){
                            line = line + 1;
                            days[line] = [];
                            days[line].push({
                                day: i,
                                week: cw,
                                slt: true,
                                crt: cur,
                                isActive: isA
                            });
                            var addDayN = 6 - cw;//需要填充的下个月的天数
                            var fdn = new Date(y,m+1,1);
                            var fd = fdn.getDate();
                            for(var a = 0;a < addDayN; a++){
                                days[line].push({
                                    day: fd,
                                    week: cw,
                                    slt: false,
                                    crt: cur,
                                    isActive: false
                                });
                                fd++;
                            }
                        }
                        else {
                            days[line].push({
                                day: i,
                                week: cw,
                                slt: true,
                                crt: cur,
                                isActive: isA
                            });
                            var addDayN = 6 - cw;//需要填充的下个月的天数
                            var fdn = new Date(y,m+1,1);
                            var fd = fdn.getDate();
                            for(var a = 0;a < addDayN; a++){
                                days[line].push({
                                    day: fd,
                                    week: cw,
                                    slt: false,
                                    crt: cur,
                                    isActive: false
                                });
                                fd++;
                            }
                        }
                        //小于6行,最后一行填充
                        if(line < 5){
                            var la = days[line][6].day;
                            var lw = 0;
                            line += 1;
                            days[line] = [];
                            for(var n = 0;n <= 6; n++ ){
                                days[line].push({
                                    day: la,
                                    week: lw,
                                    slt: false,
                                    crt: cur,
                                    isActive: false
                                });
                                la ++;
                                lw ++;

                            }
                        }

                    }else {
                        if(cw == 0){
                            line = line + 1;
                            days[line] = [];
                        }
                        days[line].push({
                            day: i,
                            week: cw,
                            slt: true,
                            crt: cur,
                            isActive: isA
                        });
                    }
                }
                _self.days = days;
            },
            fillZero: function (n) {
                return n < 10 ? '0' + n : n;
            },
            selectDate: function (x,y,event) {
                var _self = this;
                if(_self.days[x][y].slt == true){
                    var d = event.target.innerHTML;
                    if(_self.format){
                        var f = _self.format;
                        if(f.indexOf('-') != -1){
                            _self.sepMark = '-';
                        }else if(f.indexOf('/') != -1){
                            _self.sepMark = '/';
                        }
                        if(f == 'yyyy-mm-dd' || f == 'yyyy/mm/dd'){
                            _self.pStore.val = _self.curYear+_self.sepMark+_self.fillZero(_self.curMonNum+1)+_self.sepMark+_self.fillZero(d);
                        }else if (f == 'dd-mm-yyyy' || f == 'dd/mm/yyyy'){
                            _self.pStore.val = _self.fillZero(d)+_self.sepMark+_self.fillZero(_self.curMonNum+1)+_self.sepMark+_self.curYear;
                        }
                    }else {
                        _self.pStore.val = _self.curYear+_self.sepMark+_self.fillZero(_self.curMonNum+1)+_self.sepMark+_self.fillZero(d);
                    }
                    //var v = _self.curYear+_self.sepMark+_self.fillZero(_self.curMonNum+1)+_self.sepMark+_self.fillZero(d);
                    //_self.pStore.val = v;
                    _self.days[_self.curDate.x][_self.curDate.y].isActive = false;
                    _self.curDate.x = x;
                    _self.curDate.y = y;
                    _self.days[x][y].isActive = true;

                    //_self.isGray = false;
                    _self.pStore.isShow = false;
                    _self.initCalendar();
                    /*if(! _self.isShowBtn){
                        _self.pStore.isShow = false;
                        _self.initCalendar();
                    }*/
                }else {
                    return;
                }
            },
            prevYear: function (e) {
                var _self = this;
                _self.curYear --;
                _self.renderCalendar(_self.curYear,_self.curMonNum);
            },
            nextYear: function (e) {
                var _self = this;
                _self.curYear ++;
                _self.renderCalendar(_self.curYear,_self.curMonNum);
            },
            prev: function (e) {
                var _self = this;
                if(_self.curMonNum == 0){
                    _self.curYear--;
                    _self.curMonNum = 11;
                }else {
                    _self.curMonNum--;
                }
                _self.months.forEach(function (m,idx) {
                    if(_self.curMonNum == idx){
                        _self.curMon = m;
                    }
                });
                _self.renderCalendar(_self.curYear,_self.curMonNum);
            },
            next: function (e) {
                var _self = this;
                if(_self.curMonNum == 11){
                    _self.curYear++;
                    _self.curMonNum = 0;
                }else {
                    _self.curMonNum++;
                }
                _self.months.forEach(function (m,idx) {
                    if(_self.curMonNum == idx){
                        _self.curMon = m;
                    }
                });
                _self.renderCalendar(_self.curYear,_self.curMonNum);
            },
            today: function (e) {
                var _self = this;
                var date = new Date();
                _self.curYear = date.getFullYear();
                _self.curDay = date.getDate();
                _self.curWeekNum = date.getDay();
                _self.curMonNum = date.getMonth();
                if(_self.format){
                    var f = _self.format;
                    if(f.indexOf('-') != -1){
                        _self.sepMark = '-';
                    }else if(f.indexOf('/') != -1){
                        _self.sepMark = '/';
                    }
                    if(f == 'yyyy-mm-dd' || f == 'yyyy/mm/dd'){
                        _self.pStore.val = _self.curYear+_self.sepMark+_self.fillZero(_self.curMonNum+1)+_self.sepMark+_self.fillZero(_self.curDay);
                    }else if (f == 'dd-mm-yyyy' || f == 'dd/mm/yyyy'){
                        _self.pStore.val = _self.fillZero(_self.curDay)+_self.sepMark+_self.fillZero(_self.curMonNum+1)+_self.sepMark+_self.curYear;
                    }
                }else {
                    _self.pStore.val = _self.curYear+_self.sepMark+_self.fillZero(_self.curMonNum+1)+_self.sepMark+_self.fillZero(_self.curDay);
                }
                //_self.renderCalendar(_self.curYear,_self.curMonNum);
                //_self.isGray = false;
                _self.pStore.isShow = false;
                _self.initCalendar();

            },
            clear: function (e) {
                var _self = this;
                if(_self.pStore.val){
                    _self.pStore.val = "";
                    //_self.isGray = true;
                    _self.pStore.isShow = false;
                    _self.initCalendar();
                }
            }/*,
            cancel: function (e) {
                var _self = this;
                _self.pStore.isShow = false;
                _self.initCalendar();
            },
            confirm: function (e) {
                var _self = this;
                _self.pStore.isShow = false;
                _self.initCalendar();
            }*/
        },
        watch: {
            'pStore.isShow': 'initCalendar',
        },
        created: function () {
            this.initCalendar();
        }

    };
</script>

 at SyntaxError: Unexpected token (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
