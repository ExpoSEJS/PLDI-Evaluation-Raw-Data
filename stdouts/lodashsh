/root/Targets/lodashsh
└─┬ lodashsh@0.1.6 
  └─┬ esvu@0.1.4 
    ├── ast-traverse@0.1.1 
    ├── esprima@2.7.3 
    ├── estraverse@4.2.0 
    ├── inherits-js@0.1.1 
    ├─┬ json-honey@0.4.1 
    │ ├─┬ chalk@1.1.3 
    │ │ ├── ansi-styles@2.2.1 
    │ │ ├── escape-string-regexp@1.0.5 
    │ │ ├─┬ has-ansi@2.0.0 
    │ │ │ └── ansi-regex@2.1.1 
    │ │ ├── strip-ansi@3.0.1 
    │ │ └── supports-color@2.0.0 
    │ ├── commander@2.11.0 
    │ └─┬ figures@1.7.0 
    │   └── object-assign@4.1.1 
    ├── lodash@3.10.1 
    └─┬ lodash-cli@3.10.1 
      ├── closure-compiler@0.2.6 
      ├─┬ glob@5.0.12 
      │ ├─┬ inflight@1.0.4 
      │ │ └── wrappy@1.0.1 
      │ ├── inherits@2.0.1 
      │ ├─┬ minimatch@2.0.8 
      │ │ └─┬ brace-expansion@1.1.0 
      │ │   ├── balanced-match@0.2.0 
      │ │   └── concat-map@0.0.1 
      │ ├─┬ once@1.3.2 
      │ │ └── wrappy@1.0.1 
      │ └── path-is-absolute@1.0.0 
      ├── lodash-compat@3.10.1 
      ├── semver@4.3.6 
      └─┬ uglify-js@2.4.23 
        ├── async@0.2.10 
        ├─┬ source-map@0.1.34 
        │ └── amdefine@0.1.1 
        ├── uglify-to-browserify@1.0.2 
        └─┬ yargs@3.5.4 
          ├── camelcase@1.1.0 
          ├── decamelize@1.0.0 
          ├── window-size@0.1.0 
          └── wordwrap@0.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/lodashsh/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0768 took 5.633s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var Parser   = require("esvu").Parser,
    Target   = require("esvu").Target,
    Variable = require("esvu").Variable,
    Property = require("esvu").Property,
    Binding  = require("esvu").Binding,
    Call     = require("esvu").Call,
    Context  = require("esvu").Context,
    assert   = require("assert"),
    parser, context, chains, refs;

chains = [];
refs   = [];

function propLogger(id, list, isChain) {
    id.on("property", function(property) {
        property.on("binding", function(binding) {
            if (binding.value == void 0) {
                binding.on("call", function(call) {
                	var name, isNewChain;

                    list.indexOf(name = property.id.name) == -1 && list.push(name);

					isNewChain = property.id.name == "chain";

					if (isNewChain || isChain) {
						chains.push(call);
						propLogger(call, list, true);
					}
                });
            }
        });
    });
}

function shsh(code) {
	var list;

	assert(typeof code == "string", "Code is expected to be a string");

	list = [];

	parser = new Parser();
	context = new Context();

	context.on("scope", function(scope) {
	    scope.on("variable", function(variable) {
	        variable.on("binding", function(binding) {
	        	var ref;

	        	if ((ref = context.find(binding.value))) {
	        		if (refs.indexOf(ref.binding) != -1) {
	        			propLogger(binding, list);
	        		}
	        	} else if (chains.indexOf(binding.value) !== -1) {
					propLogger(binding, list, true);
	        	} else if (binding.value instanceof Call) {
	                var isLodash;

	                try {
	                    isLodash = binding.value.arguments[0].value == "lodash";
	                } catch (err) {
	                    isLodash = false;
	                }

	                if (isLodash) {
	                	refs.push(binding);
	                    propLogger(binding, list);
	                }
	            }
	        });
	    });
	});

	parser.parse(code, context);


	return list;
}

module.exports = shsh; at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
