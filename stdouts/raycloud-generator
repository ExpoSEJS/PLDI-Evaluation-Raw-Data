/root/Targets/raycloud-generator
└─┬ raycloud-generator@1.0.6 
  ├─┬ commander@2.7.1 
  │ └── graceful-readlink@1.0.1 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  └── sorted-object@1.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/raycloud-generator/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0235 took 1.7487s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var readline = require('readline');

var _exit = process.exit;
var pkg = require('../package.json');

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit;

// CLI

before(program, 'outputHelp', function () {
  this.allowUnknownOption();
});

program
  .version(version)
  .usage('[options] [dir]')
  .option('-i, --init', '构建')
  .option('-v, --view', '构建')
  .option('-t, --template', '构建')
  .option('-m, --module', '构建')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(app_name, path) {
  var wait = 4;

  console.log();
  function complete() {
    if (--wait) return;
    var prompt = launchedFromCmd() ? '>' : '$';

    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, path);
    console.log();
    console.log('   run the app:');

    if (launchedFromCmd()) {
      console.log('     %s SET DEBUG=%s:* & npm start', prompt, app_name);
    } else {
      console.log('     %s DEBUG=%s:* npm start', prompt, app_name);
    }

    console.log();
  }

  //replace
  var conf = loadTemplate('framework/config/route.conf.js');
  var control = loadTemplate('framework/controls/control.common.js');
  var index = loadTemplate('framework/index.js');
  var index_fork = loadTemplate('framework/index_fork.js');
  var index_pr = loadTemplate('framework/index.html');
  var index_dev = loadTemplate('framework/index_fe_dev.html');
  mkdir(path, function(){
    mkdir(path + '/config',function(){
      write(path + '/config/route.conf.js', conf);
      complete();
    });
    mkdir(path + '/controls',function(){
      write(path + '/controls/control.common.js', control);
      complete();
    });
    mkdir(path + '/mock_ajax');
    mkdir(path + '/framework/js');
    mkdir(path + '/modules/index',function(){
      create_mvc(path+'/modules/index','index');
      complete();
    });
    mkdir(path + '/resources/js');
    mkdir(path + '/resources/css');
    mkdir(path + '/resources/img');
    write(path + '/index.js', index);
    write(path + '/index.html', index_pr);
    write(path + '/index_dev.html', index_dev);
    write(path + '/index_fork.js', index_fork);
    complete();
  });
}

function create_mvc(path,type,name){
  var _path = path.split('/');
  var depend ='';
  if(_path.length>1){
    depend = _path[0];
  }
  if(!name){
    name = path.replace(/\//g,'.');
  }

  var module = loadTemplate('jsr/module.js');
  var view = loadTemplate('jsr/view.js');
  var template = loadTemplate('jsr/template.js');

  module = module.replace(/\{name\}/g,name).replace(/\{depend\}/g,depend);
  view = view.replace(/\{name\}/g,name);
  template = template.replace(/\{name\}/g,name);
  switch(type){
    case '-m':
      write(path + '/module.js', module);
      break;
    case '-v':
       write(path + '/view.js', view);
      break;
    case '-v':
      write(path + '/template.js', template);
      break;
    default:
      write(path + '/module.js', module);
      write(path + '/view.js', view);
      write(path + '/template.js', template);
      break;
  }
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
  return process.platform === 'win32' && process.env._ === undefined;
}

/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

/**
 * Main program.
 */

function main() {
  // Path
  var destinationPath = program.args.shift() || '.';
  // App name
  var appName = path.basename(path.resolve(destinationPath));
  program.template = 'jsr';

  if(program.init) {
    emptyDirectory(destinationPath, function (empty) {
      if (empty || program.force) {
        createApplication(appName, destinationPath);
      } else {
        confirm('该目录不是空的，是否继续? [y/N] ', function (ok) {
          if (ok) {
            process.stdin.destroy();
            createApplication(appName, destinationPath);
          } else {
            console.error('aborting');
            exit(1);
          }
        });
      }
    });
  }else{
    var type = '';
    if( program.rawArgs.length>3){
      type = program.rawArgs[2];
    }
    mkdir(destinationPath, function(){
      create_mvc(destinationPath,type);
    });
  }
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
} at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
