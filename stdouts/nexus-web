/root/Targets/nexus-web
└─┬ nexus-web@0.0.0 
  ├── async-array@0.1.7 
  ├── backbone@0.5.3 
  ├─┬ browserify@1.8.1 
  │ ├── coffee-script@1.1.3 
  │ ├── commondir@0.0.2 
  │ ├─┬ deputy@0.0.4 
  │ │ └─┬ detective@0.2.1 
  │ │   └── esprima@0.9.9 
  │ ├─┬ detective@0.0.4 
  │ │ └─┬ burrito@0.2.12 
  │ │   ├── traverse@0.5.2 
  │ │   └── uglify-js@1.1.1 
  │ ├── nub@0.0.0 
  │ └── resolve@0.0.4 
  ├─┬ dnode@0.9.2 
  │ ├─┬ dnode-protocol@0.1.5 
  │ │ └── traverse@0.6.6 
  │ ├── jsonify@0.0.0 
  │ ├── lazy@1.0.11 
  │ ├─┬ socket.io@0.8.6 
  │ │ ├── policyfile@0.0.4 
  │ │ └── redis@0.6.7 
  │ ├─┬ socket.io-client@0.8.6 
  │ │ ├── uglify-js@1.0.6 
  │ │ ├── websocket-client@1.0.0 
  │ │ └── xmlhttprequest@1.2.2 
  │ └── traverse@0.4.6 
  ├─┬ express@2.5.1 
  │ ├─┬ connect@1.8.7 
  │ │ └── formidable@1.0.17 
  │ ├── mime@2.0.3 
  │ ├── mkdirp@0.0.7 
  │ └── qs@6.5.1 
  ├─┬ jade@0.19.0 
  │ ├── commander@0.2.1 
  │ └── mkdirp@0.3.5 
  ├── jadevu@0.0.9 
  ├─┬ optimist@0.2.8 
  │ └── wordwrap@0.0.3 
  ├─┬ stylus@0.19.8 
  │ ├── cssom@0.2.0 
  │ ├── growl@1.1.0 
  │ └── mkdirp@0.0.7 
  └── underscore@1.2.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/nexus-web/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0238 took 4.7421s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var express = require('express')
  , dnode = require('dnode')
  , stylus = require('stylus')
  , jade = require('jade')
  , jadevu = require('jadevu')
  , fs = require('fs')
  , _ = require('underscore')
  , EE2 = require('eventemitter2').EventEmitter2
  , ee2 = new EE2({wildcard:true,delimiter:'::',maxListeners:20})
  , argv = require('optimist').argv
  , port  = argv.p || 8001
  , host  = argv.h || '0.0.0.0'
  , home = ( process.platform === "win32" // HAHA!
             ? process.env.USERPROFILE
             : process.env.HOME )
  , configPath = argv.c || home+'/.nexus/config.js'
  , config = require(configPath)
  , remotes = {}
  , clients = {}

ee2.onAny(function(d){
  if (d)
    console.log(this.event+' ►',d)
  else
    console.log(this.event)
})

ee2.on('remote::*::*',function(data){
  var split = this.event.split('::')
    , name = split[1]
    , event = split[2]
  _.each(clients,function(x,i){
    x.setRemote(remotes[name])
  })
})
  
//------------------------------------------------------------------------------
//                                       handle remotes
//------------------------------------------------------------------------------
  
_.each(config.remotes,function(x,i){addRemote(i,x)})

function addRemote(name, opts, cb) {
  cb = cb || function(){}
  remotes[name] = {id:name,status:'connecting',remote:null}
  opts.port = opts.port || 0xf00
  opts.host = opts.host || '0.0.0.0'
  opts.reconnect = 500
  if (opts.key && opts.cert) {
    opts.key = fs.readFileSync(opts.key)
    opts.cert = fs.readFileSync(opts.cert)
  }
  var client = dnode.connect(opts,function(remoteNexus, conn){
    conn.on('ready',function(){
      remotes[name].status = 'ready'
      remotes[name].remote = remoteNexus
      ee2.emit('remote::'+name+'::ready')
    })
    conn.on('error',function(d){
      remotes[name].status = 'error'
      ee2.emit('remote::'+name+'::error',d)
    })
    conn.on('end',function(){
      remotes[name].status = 'end'
      ee2.emit('remote::'+name+'::end')
    })
    conn.on('refused',function(){
      remotes[name].status = 'refused'
      ee2.emit('remote::'+name+'::refused')
    })
    conn.on('drop',function(){
      remotes[name].status = 'drop'
      ee2.emit('remote::'+name+'::drop')
    })
    conn.on('reconnect',function(){
      remotes[name].status = 'reconnect'
      ee2.emit('remote::'+name+'::reconnect')
    })
  })
  client.on('error',function(d){
    remotes[name].status = 'error'
    ee2.emit('remote::'+name+'::error',d)
  })
}

function reconnectRemote(name, cb) {
  cb = cb || function(){}
  if (!name || !_.isString(name))
    return cb('error')
}

//------------------------------------------------------------------------------
//                                       dnode-interface
//------------------------------------------------------------------------------

function dnodeInterface(remote, conn){
  conn.on('ready',function(){
    _.each(remotes,function(x,i){remote.setRemote(x)})
    clients[conn.id] = remote
    ee2.emit('client::'+conn.id+'::ready')
  })
  conn.on('end',function(){
    delete clients[conn.id]
    ee2.emit('client::'+conn.id+'::end')
  })
  this.addRemote = addRemote
  this.reconnectRemote = reconnectRemote
}

//------------------------------------------------------------------------------
//                                       express-app
//------------------------------------------------------------------------------

var app = express.createServer()

app.set('views',__dirname+'/views')
  
app.use(stylus.middleware
  ( { src : __dirname+'/views'
    , dest : __dirname+'/public' 
    , force : true
    , compress : true
    } ) )

app.use(express.static(__dirname+'/public'))

app.get('/',function(req,res,next){res.render('index.jade')})

dnode(dnodeInterface).listen(app)

app.listen(port, host, function(){
  console.log('webinterface listening on: '+host+':'+port)
})

 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
