/root/Targets/hipper
└─┬ hipper@0.23.0 
  ├── ansi-recover@1.1.0  (git://github.com/dominictarr/ansi-recover.git#27e7851a70a2dcba075e10a3c0ac43f74d9a626d)
  ├── charm@0.2.0 
  ├── colors@0.6.2 
  ├─┬ event-stream@3.0.20 
  │ ├── duplexer@0.1.1 
  │ ├── from@0.1.7 
  │ ├── map-stream@0.0.7 
  │ ├── pause-stream@0.0.11 
  │ ├── split@0.2.10 
  │ ├── stream-combiner@0.0.4 
  │ └── through@2.3.8 
  ├── insert-queue@0.0.3 
  ├── keypress@0.2.1 
  └─┬ rc@0.3.5 
    ├── deep-extend@0.2.11 
    ├── ini@1.1.0 
    └── minimist@0.0.10 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/hipper/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0522 took 2.4356s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

const
  fs       = require('fs')
, es       = require('event-stream')
, Document = require('./lib/document')
, keys     = require('./lib/keys')
, config   = require('./lib/config')

let render = require('./lib/render')
require('ansi-recover')({cursor : true, mouse : true})

if (config.v || config.version) {
  console.log(require('./package.json').version)
  process.exit()
}

function hipper (rc, doc) {
  process.on('exit', () => process.stdout.write('\x1B[2J\x1B[0f'))
  doc = doc || new Document() // internal representation of text file

  render = render(doc, rc)

  require('keypress').enableMouse(process.stdin)

  let input = process.stdin

  if (rc.playback) {
    input = fs.createReadStream(rc.playback).pipe(es.split()).pipe(es.parse())
  } else {
    process.stdin.setRawMode(true)
    process.stdin.resume()
    input = process.stdin
  }

  if (rc.output) {
    let
      write = process.stdout.write
    , os    = fs.createWriteStream(rc.output)
    process.stdout.write = data => {
      os.write(JSON.stringify(data.toString()) + '\n')
      write.call(process.stdout, data)
    }
  }

  if (rc.record) {
    process.stdin.pipe(es.stringify()).pipe(fs.createWriteStream(rc.record))
  }
  if (rc.raw) {
    let
      write = process.stdout.write
    , os    = fs.createWriteStream(rc.raw)
    process.stdout.write = data => {
      os.write(data)
      write.call(process.stdout, data)
    }
  }

  const hip = {
    config    : rc
  , plugins   : []
  , doc
  , renderers : render.renderers // list of things to draw
  , render // thing that draws
  , use (plugin) { // use things
      if (plugin) {
        this.plugins.push(plugin)
      }
      return this
    }
  , init () { // call plugins, pass them stuff
      let self = this
      this.plugins.forEach(plug => {
        plug.call(self, doc, keys, render)
      })
      render.redraw()
      return this
    }
  }
  return hip
}

if (!module.parent) {
  hipper(config)
    .use(require('./plugins/basics'))
    .use(require('./plugins/lines'))
    .use(require('./plugins/indent'))
    .use(require('./plugins/comment'))
    .use(require('./plugins/search'))
    .use(require('./plugins/entry'))
    .use(require('./plugins/highlight'))
    .use(require('./plugins/easy-writer'))
    .use(require('./plugins/control'))
    .use(require('./plugins/movement'))
    .use(require('./plugins/selection')) // MUST come after movement.
    .use(require('./plugins/line-nums')) // MUST come after selection.
    .init()
}

module.exports = hipper
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
