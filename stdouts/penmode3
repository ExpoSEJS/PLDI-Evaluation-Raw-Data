
> bufferutil@1.2.1 install /root/Targets/penmode3/node_modules/bufferutil
> node-gyp rebuild

make: Entering directory '/root/Targets/penmode3/node_modules/bufferutil/build'
  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
  SOLINK_MODULE(target) Release/obj.target/bufferutil.node
  COPY Release/bufferutil.node
make: Leaving directory '/root/Targets/penmode3/node_modules/bufferutil/build'

> utf-8-validate@1.2.2 install /root/Targets/penmode3/node_modules/utf-8-validate
> node-gyp rebuild

make: Entering directory '/root/Targets/penmode3/node_modules/utf-8-validate/build'
  CXX(target) Release/obj.target/validation/src/validation.o
  SOLINK_MODULE(target) Release/obj.target/validation.node
  COPY Release/validation.node
make: Leaving directory '/root/Targets/penmode3/node_modules/utf-8-validate/build'
/root/Targets/penmode3
└─┬ penmode3@0.1.6 
  ├─┬ ansi-to-html@0.3.0 
  │ └── entities@1.1.1 
  ├── colors@1.1.2 
  ├─┬ express@4.13.4 
  │ ├─┬ accepts@1.2.13 
  │ │ └── negotiator@0.5.3 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.1 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.1.5 
  │ ├── cookie-signature@1.0.6 
  │ ├─┬ debug@2.2.0 
  │ │ └── ms@0.7.1 
  │ ├── depd@1.1.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.7.0 
  │ ├─┬ finalhandler@0.4.1 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.3.0 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@1.0.10 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.0.5 
  │ ├── qs@4.0.0 
  │ ├── range-parser@1.0.3 
  │ ├─┬ send@0.13.1 
  │ │ ├── destroy@1.0.4 
  │ │ ├─┬ http-errors@1.3.1 
  │ │ │ └── inherits@2.0.3 
  │ │ ├── mime@1.3.4 
  │ │ └── statuses@1.2.1 
  │ ├─┬ serve-static@1.10.3 
  │ │ └── send@0.13.2 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.0.1 
  ├─┬ latest-version@2.0.0 
  │ └─┬ package-json@2.4.0 
  │   ├─┬ got@5.7.1 
  │   │ ├─┬ create-error-class@3.0.2 
  │   │ │ └── capture-stack-trace@1.0.0 
  │   │ ├── duplexer2@0.1.4 
  │   │ ├── is-redirect@1.0.0 
  │   │ ├── is-retry-allowed@1.1.0 
  │   │ ├── is-stream@1.1.0 
  │   │ ├── lowercase-keys@1.0.0 
  │   │ ├── node-status-codes@1.0.0 
  │   │ ├── object-assign@4.1.1 
  │   │ ├─┬ parse-json@2.2.0 
  │   │ │ └─┬ error-ex@1.3.1 
  │   │ │   └── is-arrayish@0.2.1 
  │   │ ├─┬ pinkie-promise@2.0.1 
  │   │ │ └── pinkie@2.0.4 
  │   │ ├── read-all-stream@3.1.0 
  │   │ ├─┬ readable-stream@2.3.3 
  │   │ │ ├── core-util-is@1.0.2 
  │   │ │ ├── isarray@1.0.0 
  │   │ │ ├── process-nextick-args@1.0.7 
  │   │ │ ├── string_decoder@1.0.3 
  │   │ │ └── util-deprecate@1.0.2 
  │   │ ├── timed-out@3.1.3 
  │   │ ├── unzip-response@1.0.2 
  │   │ └─┬ url-parse-lax@1.0.0 
  │   │   └── prepend-http@1.0.4 
  │   ├─┬ registry-auth-token@3.3.1 
  │   │ └─┬ rc@1.2.1 
  │   │   ├── deep-extend@0.4.2 
  │   │   ├── ini@1.3.4 
  │   │   ├── minimist@1.2.0 
  │   │   └── strip-json-comments@2.0.1 
  │   ├── registry-url@3.1.0 
  │   └── semver@5.4.1 
  ├─┬ prompt@0.2.14 
  │ ├── pkginfo@0.4.1 
  │ ├─┬ read@1.0.7 
  │ │ └── mute-stream@0.0.7 
  │ ├── revalidator@0.1.8 
  │ ├─┬ utile@0.2.1 
  │ │ ├── async@0.2.10 
  │ │ ├── deep-equal@1.0.1 
  │ │ ├── i@0.3.5 
  │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ └── minimist@0.0.8 
  │ │ ├── ncp@0.4.2 
  │ │ └─┬ rimraf@2.6.2 
  │ │   └─┬ glob@7.1.2 
  │ │     ├── fs.realpath@1.0.0 
  │ │     ├─┬ inflight@1.0.6 
  │ │     │ └── wrappy@1.0.2 
  │ │     ├─┬ minimatch@3.0.4 
  │ │     │ └─┬ brace-expansion@1.1.8 
  │ │     │   ├── balanced-match@1.0.0 
  │ │     │   └── concat-map@0.0.1 
  │ │     ├── once@1.4.0 
  │ │     └── path-is-absolute@1.0.1 
  │ └─┬ winston@0.8.3 
  │   ├── colors@0.6.2 
  │   ├── cycle@1.0.3 
  │   ├── eyes@0.1.8 
  │   ├── pkginfo@0.3.1 
  │   └── stack-trace@0.0.10 
  ├─┬ request@2.82.0 
  │ ├── aws-sign2@0.7.0 
  │ ├── aws4@1.6.0 
  │ ├── caseless@0.12.0 
  │ ├─┬ combined-stream@1.0.5 
  │ │ └── delayed-stream@1.0.0 
  │ ├── extend@3.0.1 
  │ ├── forever-agent@0.6.1 
  │ ├─┬ form-data@2.3.1 
  │ │ └── asynckit@0.4.0 
  │ ├─┬ har-validator@5.0.3 
  │ │ ├─┬ ajv@5.2.2 
  │ │ │ ├── co@4.6.0 
  │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │   └── jsonify@0.0.0 
  │ │ └── har-schema@2.0.0 
  │ ├─┬ hawk@6.0.2 
  │ │ ├── boom@4.3.1 
  │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ └── boom@5.2.0 
  │ │ ├── hoek@4.2.0 
  │ │ └── sntp@2.0.2 
  │ ├─┬ http-signature@1.2.0 
  │ │ ├── assert-plus@1.0.0 
  │ │ ├─┬ jsprim@1.4.1 
  │ │ │ ├── extsprintf@1.3.0 
  │ │ │ ├── json-schema@0.2.3 
  │ │ │ └── verror@1.10.0 
  │ │ └─┬ sshpk@1.13.1 
  │ │   ├── asn1@0.2.3 
  │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │   ├── dashdash@1.14.1 
  │ │   ├── ecc-jsbn@0.1.1 
  │ │   ├── getpass@0.1.7 
  │ │   ├── jsbn@0.1.1 
  │ │   └── tweetnacl@0.14.5 
  │ ├── is-typedarray@1.0.0 
  │ ├── isstream@0.1.2 
  │ ├── json-stringify-safe@5.0.1 
  │ ├─┬ mime-types@2.1.17 
  │ │ └── mime-db@1.30.0 
  │ ├── oauth-sign@0.8.2 
  │ ├── performance-now@2.1.0 
  │ ├── qs@6.5.1 
  │ ├── safe-buffer@5.1.1 
  │ ├── stringstream@0.0.5 
  │ ├─┬ tough-cookie@2.3.2 
  │ │ └── punycode@1.4.1 
  │ ├── tunnel-agent@0.6.0 
  │ └── uuid@3.1.0 
  ├─┬ socket.io@1.3.7 
  │ ├─┬ debug@2.1.0 
  │ │ └── ms@0.6.2 
  │ ├─┬ engine.io@1.5.4 
  │ │ ├── base64id@0.1.0 
  │ │ ├─┬ debug@1.0.3 
  │ │ │ └── ms@0.6.2 
  │ │ ├─┬ engine.io-parser@1.2.2 
  │ │ │ ├── after@0.8.1 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ ├── base64-arraybuffer@0.1.2 
  │ │ │ ├── blob@0.0.4 
  │ │ │ └── utf8@2.1.0 
  │ │ └─┬ ws@0.8.0 
  │ │   ├─┬ bufferutil@1.2.1 
  │ │   │ ├── bindings@1.2.1 
  │ │   │ └── nan@2.7.0 
  │ │   ├── options@0.0.6 
  │ │   ├── ultron@1.0.2 
  │ │   └─┬ utf-8-validate@1.2.2 
  │ │     └── nan@2.4.0 
  │ ├─┬ has-binary-data@0.1.3 
  │ │ └── isarray@0.0.1 
  │ ├─┬ socket.io-adapter@0.3.1 
  │ │ ├─┬ debug@1.0.2 
  │ │ │ └── ms@0.6.2 
  │ │ ├── object-keys@1.0.1 
  │ │ └─┬ socket.io-parser@2.2.2 
  │ │   ├── debug@0.7.4 
  │ │   └── isarray@0.0.1 
  │ ├─┬ socket.io-client@1.3.7 
  │ │ ├── backo2@1.0.2 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.1.2 
  │ │ ├── debug@0.7.4 
  │ │ ├─┬ engine.io-client@1.5.4 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├─┬ debug@1.0.4 
  │ │ │ │ └── ms@0.6.2 
  │ │ │ ├─┬ has-cors@1.0.3 
  │ │ │ │ └── global@2.0.1 
  │ │ │ ├── parsejson@0.0.1 
  │ │ │ ├── parseqs@0.0.2 
  │ │ │ ├── parseuri@0.0.4 
  │ │ │ └── xmlhttprequest@1.5.0 
  │ │ ├─┬ has-binary@0.1.6 
  │ │ │ └── isarray@0.0.1 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseuri@0.0.2 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ └── to-array@0.1.3 
  │ └─┬ socket.io-parser@2.2.4 
  │   ├── benchmark@1.0.0 
  │   ├── debug@0.7.4 
  │   ├── isarray@0.0.1 
  │   └── json3@3.2.6 
  └─┬ yargs@3.25.0 
    ├── camelcase@1.2.1 
    ├─┬ cliui@2.1.0 
    │ ├─┬ center-align@0.1.3 
    │ │ ├─┬ align-text@0.1.4 
    │ │ │ ├─┬ kind-of@3.2.2 
    │ │ │ │ └── is-buffer@1.1.5 
    │ │ │ ├── longest@1.0.1 
    │ │ │ └── repeat-string@1.6.1 
    │ │ └── lazy-cache@1.0.4 
    │ ├── right-align@0.1.3 
    │ └── wordwrap@0.0.2 
    ├── decamelize@1.2.0 
    ├─┬ os-locale@1.4.0 
    │ └─┬ lcid@1.0.0 
    │   └── invert-kv@1.0.0 
    ├── window-size@0.1.4 
    └── y18n@3.2.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/penmode3/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0493 took 2.9471s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
require('colors');
var argv = require('yargs')
    .example('$0 --www ./www --plugins ./app/plugins -p 13370', '->'.red + ' Start penmode3 on port 13370 with folder')
    .option('www', {describe: 'Load web server from'})
    .option('plugins', {describe: 'Load plugins from'})
    .option('noserve', {alias: 'n', type: 'boolean', describe: 'Don\'t start the web server'})
    .option('port', {alias: 'p', describe: 'Socket.io [+ Server] Port'})
    .help('h')
    .alias('h', 'help')
    .wrap(null)
    .epilog('Do what you want cause a pirate is free! \n' + 'You are a Pirate!'.rainbow)
    .argv;

if (!argv.noserve) {
  var express = require('express');
  var app = express();
  var server = require('http').createServer(app);
  var io = require('socket.io')(server);
} else {
  var io = require('socket.io')();
}

var crypto = require('crypto');
var request = require('request');
var plugins = [];
var proc_n = null;

var jwt = require('./jwt.js');
var login = undefined;
try {
  login = require('./login.json').login;
} catch (e) {}
var Engine = require('./engine.js');
var Fail = require('./fail.js');
var auth = [];

var WEBPATH = require('path').resolve(__dirname, '../www');
var PLUGINPATH = require('path').resolve(__dirname, './plugins');
var PORT = 13370;

Array.prototype.contains = function (data) {
  return this.indexOf(data) > -1;
};

function setupLogin (cb) {
  var prompt = require('prompt');
  prompt.message = '>'.red;
  prompt.delimiter = ' ';
  prompt.colors = false;
  console.log('Welcome to ' + 'Penmode3'.rainbow);
  console.log('You must add at least 1 user before starting Penmode3\n');
  var schema = {
    properties: {
      username: {
        description: 'Enter your username:',
        type: 'string',
        pattern: /^[a-zA-Z0-9\_\-]+$/,
        message: 'Name must be only letters, number, spaces, or dashes',
        required: true
      },
      password: {
        description: 'Enter your password:',
        type: 'string',
        required: true,
        hidden: true
      },
      repassword: {
        description: 'Confirm your password:',
        type: 'string',
        required: true,
        hidden: true
      }
    }
  };
  prompt.start();
  prompt.get(schema, function (err, result) {
    if (err) {
      return console.log(err.red);
    }
    if (result.password == result.repassword) {
      var user = {};
      user.user = result.username;
      user.pass_sha512 = crypto.createHash('sha512').update(result.password).digest('hex');
      var obj = {};
      obj.login = [];
      obj.login.push(user);
      var path = require('path').resolve(__dirname, './login.json');
      require('fs').writeFile(path, JSON.stringify(obj), function (err) {
        if (err) {
          return console.log(err);
        }
        console.log('User successfully added!'.green);
        login = obj.login;
        return cb();
      });
    } else {
      console.log("Passwords don't match!");
    }
  });
}

// Load Plugins
function loadPlugin() {
  try {
    require('fs').readdirSync(argv.plugins || PLUGINPATH).forEach(function (file) {
      if (file.match(/\.js$/) !== null && file !== 'main.js') {
        var name = file.replace('.js', '');
        plugins.push(name);
      }
    });
    console.log('Plugins loaded: '.green + plugins.join(', '));
  } catch (err) {
    console.log(err.red);
    process.exit();
  }
}

function getTor (cb) {
  request.get({
    url: 'https://check.torproject.org/'
  }, function (err, resp, body) {
    if (!err) {
      if (resp.statusCode === 200) {
        if (body.indexOf('tor-off.png') > -1) {
          return cb(false);
        } else if (body.indexOf('tor-on.png') > -1) {
          return cb(true);
        } else {
          return cb(undefined);
        }
      }
    }
  });
}

function getIP (cb) {
  request.get({
    url: 'http://ipinfo.io/ip',
    json: true
  }, function (err, resp, body) {
    if (!err) {
      if (resp.statusCode === 200) {
        return cb(body);
      }
    }
  });
}

// Socket.io connection
io.on('connection', function (socket) {
  var check_auth = function (socket_id) {
    if (auth.indexOf(socket_id) > -1) {
      return true;
    }
    return false;
  };

  try {
    var salt = crypto.randomBytes(16);
    socket.emit('login_required', salt.toString('hex'));
  } catch (ex) {
    var fail = new Fail('connection', ex);
    socket.emit('fail', fail.stringify());
  }

  socket.on('login', function (webauth) {
    webauth = JSON.parse(webauth);
    var user = null;
    for (var i = 0; i < login.length; i++) {
      if (webauth.username == login[i].user) {
        user = login[i];
      }
    }
    if (user === null) {
      var fail = new Fail('login', 'user is undefined');
      socket.emit('fail', fail.stringify());
      return;
    }
    var pass = new Buffer(user.pass_sha512, 'hex');
    crypto.pbkdf2(pass, salt, 1000, 512 / 8, 'sha512', function (err, key) {
      if (err) {
        throw err;
      }
      jwt.verify(webauth.token, key.toString('hex'), function (err, decoded) {
        if (err) {
          var fail = new Fail('login', err.message);
          socket.emit('fail', fail.stringify());
          return;
        }
        if (decoded.user === user.user && decoded.socket == socket.id) {
          console.log(socket.id);
          auth.push(socket.id);
          proc_n = null;
          socket.emit('authenticated');
        }
      });
    });
  });

  socket.on('get_plugin_list', function () {
    if (!check_auth(socket.id)) { socket.emit('login_required'); return; }
    socket.emit('plugin_list', plugins);
  });

  socket.on('get_ip_status', function () {
    if (!check_auth(socket.id)) { socket.emit('login_required'); return; }
    var ip_status = {};
    getIP(function (e_ip) {
      ip_status.ip = e_ip.replace(/\n/g, '');
      getTor(function (tor_status) {
        ip_status.tor = tor_status;
        socket.emit('ip_status', ip_status);
      });
    });
  });

  socket.on('start_plugin', function (name) {
    if (!check_auth(socket.id)) { socket.emit('login_required'); return; }
    // If a server is already running or server doesn't exist
    if (proc_n || !plugins.contains(name)) {
      // Let the user know that it failed.
      var fail = new Fail('start_plugin', proc_n + ' is already running');
      socket.emit('fail', fail.stringify());
      // Stop execution of this callback
      return;
    }

    // Set which server is currently running
    proc_n = name;
    var en = new Engine(socket, proc_n);
    try {
      var plugin_path = require('path').join((argv.plugins || PLUGINPATH), proc_n + '.js');
      require(plugin_path).execute(en, function (f) {
        proc_n = null;
      });
    } catch (ex) {
      var fail = new Fail('start_plugin', 'Plugin file not found ' + plugin_path);
      socket.emit('fail', fail.stringify());
    }
  });

  socket.on('stop', function () {
    proc_n = null;
  });

  socket.on('command', function (cmd) {
    if (!check_auth(socket.id)) { socket.emit('login_required'); return; }
    if (proc_n) {
      socket.emit('console', '> ' + cmd);
    } else {
      var fail = new Fail('command', 'No process Running');
      socket.emit('fail', fail.stringify());
    }
  });
});

function start() {
  var msg = '';
  if (!argv.noserve) {
    // ExpressStatic file server
    app.use(express.static(argv.www || WEBPATH));
    // Server + Socket.io
    server.listen(argv.port || PORT);
    msg = '[express+socket.io]';
  } else {
    io.listen(argv.port || PORT);
    msg = '[socket.io]';
  }
  console.log('Penmode3'.green +
    ' ' + msg + ' listening on port ' + (argv.port || PORT) +
    ' from ' + (argv.www || WEBPATH));
}

function init () {
  loadPlugin();
  start();
  latestVersion('penmode3').then(function (version) {
    if(version > VERSION) { // JAVASCRIPT POWERRRRRRRRR
      console.log('There is a newer penmode3 version! Type "npm update penmode3 -g" in a terminal!'.yellow);
    }
  });
};

var VERSION = require('../package.json').version;
var latestVersion = require('latest-version');

if (typeof login == 'undefined'){
  setupLogin(function () {
    init();
  });
} else if (login.length == 1 && login[0].user == 'toor') {
  setupLogin(function () {
    init();
  });
} else {
  init();
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
