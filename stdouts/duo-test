/root/Targets/duo-test
└─┬ duo-test@0.4.1 
  ├── bluebird@2.11.0 
  ├── buffer-events@0.0.2 
  ├── co@3.1.0 
  ├── co-exec@1.1.0 
  ├─┬ co-fs@1.2.0 
  │ ├─┬ co-from-stream@0.0.0 
  │ │ └── co-read@0.0.1 
  │ └── thunkify@0.0.1 
  ├─┬ co-timeout@0.1.0 
  │ └── ms@0.6.2 
  ├── commander@2.11.0 
  ├─┬ debug@1.0.5 
  │ └── ms@2.0.0 
  ├─┬ gnode@0.1.2 
  │ └─┬ regenerator@0.8.46 
  │   ├─┬ commoner@0.10.8 
  │   │ ├─┬ detective@4.5.0 
  │   │ │ ├── acorn@4.0.13 
  │   │ │ └── defined@1.0.0 
  │   │ ├─┬ glob@5.0.15 
  │   │ │ └── minimatch@3.0.4 
  │   │ ├── graceful-fs@4.1.11 
  │   │ ├── iconv-lite@0.4.19 
  │   │ ├── mkdirp@0.5.1 
  │   │ ├── q@1.5.0 
  │   │ └─┬ recast@0.11.23 
  │   │   ├── ast-types@0.9.6 
  │   │   └── esprima@3.1.3 
  │   ├─┬ defs@1.1.1 
  │   │ ├─┬ alter@0.2.0 
  │   │ │ └── stable@0.1.6 
  │   │ ├── ast-traverse@0.1.1 
  │   │ ├── breakable@1.0.0 
  │   │ ├── simple-fmt@0.1.0 
  │   │ ├── simple-is@0.2.0 
  │   │ ├── stringmap@0.2.2 
  │   │ ├── stringset@0.2.1 
  │   │ ├── tryor@0.1.2 
  │   │ └─┬ yargs@3.27.0 
  │   │   └─┬ cliui@2.1.0 
  │   │     ├─┬ center-align@0.1.3 
  │   │     │ ├─┬ align-text@0.1.4 
  │   │     │ │ ├─┬ kind-of@3.2.2 
  │   │     │ │ │ └── is-buffer@1.1.5 
  │   │     │ │ ├── longest@1.0.1 
  │   │     │ │ └── repeat-string@1.6.1 
  │   │     │ └── lazy-cache@1.0.4 
  │   │     ├── right-align@0.1.3 
  │   │     └── wordwrap@0.0.2 
  │   ├── esprima-fb@15001.1001.0-dev-harmony-fb 
  │   ├── private@0.1.7 
  │   ├─┬ recast@0.10.33 
  │   │ ├── ast-types@0.8.12 
  │   │ └── source-map@0.5.7 
  │   ├── regenerator-runtime@0.9.6 
  │   └── through@2.3.8 
  ├── incasesensitive@1.0.0 
  ├─┬ koa@0.8.2 
  │ ├─┬ accepts@1.0.7 
  │ │ └── negotiator@0.4.7 
  │ ├─┬ cookies@0.4.1 
  │ │ └── keygrip@1.0.2 
  │ ├── delegates@0.0.3 
  │ ├── dethroy@1.0.2 
  │ ├── error-inject@1.0.0 
  │ ├── escape-html@1.0.3 
  │ ├─┬ finished@1.2.2 
  │ │ └── ee-first@1.0.3 
  │ ├── fresh@0.2.4 
  │ ├── koa-compose@2.3.0 
  │ ├── koa-is-json@1.0.0 
  │ ├── media-typer@0.2.0 
  │ ├── mime-types@1.0.2 
  │ ├── only@0.0.2 
  │ ├── parseurl@1.2.0 
  │ ├── statuses@1.0.4 
  │ ├── type-is@1.3.2 
  │ └── vary@0.1.0 
  ├─┬ koa-route@1.1.4 
  │ ├── methods@0.1.0 
  │ └── path-to-regexp@0.1.7 
  ├─┬ koa-static@1.5.2 
  │ └─┬ koa-send@2.0.2 
  │   ├─┬ mz@2.7.0 
  │   │ ├── any-promise@1.3.0 
  │   │ ├── object-assign@4.1.1 
  │   │ └─┬ thenify-all@1.6.0 
  │   │   └── thenify@3.3.0 
  │   └─┬ resolve-path@1.3.3 
  │     ├─┬ http-errors@1.5.1 
  │     │ ├── setprototypeof@1.0.2 
  │     │ └── statuses@1.3.1 
  │     └── path-is-absolute@1.0.1 
  ├─┬ localtunnel@1.8.3 
  │ ├─┬ debug@2.6.8 
  │ │ └── ms@2.0.0 
  │ ├── openurl@1.1.1 
  │ ├─┬ request@2.81.0 
  │ │ ├── aws-sign2@0.6.0 
  │ │ ├── aws4@1.6.0 
  │ │ ├── caseless@0.12.0 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ ├── extend@3.0.1 
  │ │ ├── forever-agent@0.6.1 
  │ │ ├─┬ form-data@2.1.4 
  │ │ │ ├── asynckit@0.4.0 
  │ │ │ └── mime-types@2.1.17 
  │ │ ├─┬ har-validator@4.2.1 
  │ │ │ ├─┬ ajv@4.11.8 
  │ │ │ │ ├── co@4.6.0 
  │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │   └── jsonify@0.0.0 
  │ │ │ └── har-schema@1.0.5 
  │ │ ├─┬ hawk@3.1.3 
  │ │ │ ├── boom@2.10.1 
  │ │ │ ├── cryptiles@2.0.5 
  │ │ │ ├── hoek@2.16.3 
  │ │ │ └── sntp@1.0.9 
  │ │ ├─┬ http-signature@1.1.1 
  │ │ │ ├── assert-plus@0.2.0 
  │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ ├── assert-plus@1.0.0 
  │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ └─┬ verror@1.10.0 
  │ │ │ │   └── assert-plus@1.0.0 
  │ │ │ └─┬ sshpk@1.13.1 
  │ │ │   ├── asn1@0.2.3 
  │ │ │   ├── assert-plus@1.0.0 
  │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │   ├─┬ dashdash@1.14.1 
  │ │ │   │ └── assert-plus@1.0.0 
  │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │   ├─┬ getpass@0.1.7 
  │ │ │   │ └── assert-plus@1.0.0 
  │ │ │   ├── jsbn@0.1.1 
  │ │ │   └── tweetnacl@0.14.5 
  │ │ ├── is-typedarray@1.0.0 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ ├── oauth-sign@0.8.2 
  │ │ ├── performance-now@0.2.0 
  │ │ ├── qs@6.4.0 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── stringstream@0.0.5 
  │ │ ├─┬ tough-cookie@2.3.3 
  │ │ │ └── punycode@1.4.1 
  │ │ ├── tunnel-agent@0.6.0 
  │ │ └── uuid@3.1.0 
  │ └─┬ yargs@3.29.0 
  │   ├── camelcase@1.2.1 
  │   ├─┬ cliui@3.2.0 
  │   │ ├─┬ string-width@1.0.2 
  │   │ │ ├── code-point-at@1.1.0 
  │   │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │   │ │   └── number-is-nan@1.0.1 
  │   │ ├─┬ strip-ansi@3.0.1 
  │   │ │ └── ansi-regex@2.1.1 
  │   │ └── wrap-ansi@2.1.0 
  │   ├── decamelize@1.2.0 
  │   ├─┬ os-locale@1.4.0 
  │   │ └─┬ lcid@1.0.0 
  │   │   └── invert-kv@1.0.0 
  │   ├── window-size@0.1.4 
  │   └── y18n@3.2.1 
  ├─┬ mocha@1.21.5 
  │ ├── commander@2.3.0 
  │ ├── debug@2.0.0 
  │ ├── diff@1.0.8 
  │ ├── escape-string-regexp@1.0.2 
  │ ├─┬ glob@3.2.3 
  │ │ ├── graceful-fs@2.0.3 
  │ │ ├── inherits@2.0.3 
  │ │ └─┬ minimatch@0.2.14 
  │ │   ├── lru-cache@2.7.3 
  │ │   └── sigmund@1.0.1 
  │ ├── growl@1.8.1 
  │ ├─┬ jade@0.26.3 
  │ │ ├── commander@0.6.1 
  │ │ └── mkdirp@0.3.0 
  │ └─┬ mkdirp@0.5.0 
  │   └── minimist@0.0.8 
  ├── open@0.0.5 
  ├─┬ queue-component@1.0.6  (git://github.com/component/queue.git#23dbce0f19a714b020b4fc52ed07ac0365c9b449)
  │ ├── component-bind@1.0.0 
  │ └── component-emitter@1.1.2 
  ├── thunkify@2.1.2 
  ├─┬ to-pascal-case@0.0.2 
  │ └─┬ to-space-case@0.1.2 
  │   └── to-no-case@0.1.1 
  ├─┬ wd@0.3.12 
  │ ├─┬ archiver@0.14.4 
  │ │ ├── async@0.9.2 
  │ │ ├── buffer-crc32@0.2.13 
  │ │ ├─┬ glob@4.3.5 
  │ │ │ ├─┬ inflight@1.0.6 
  │ │ │ │ └── wrappy@1.0.2 
  │ │ │ ├─┬ minimatch@2.0.10 
  │ │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │ │   ├── balanced-match@1.0.0 
  │ │ │ │   └── concat-map@0.0.1 
  │ │ │ └── once@1.4.0 
  │ │ ├── lazystream@0.1.0 
  │ │ ├── lodash@3.2.0 
  │ │ ├─┬ readable-stream@1.0.34 
  │ │ │ ├── core-util-is@1.0.2 
  │ │ │ ├── isarray@0.0.1 
  │ │ │ └── string_decoder@0.10.31 
  │ │ ├─┬ tar-stream@1.1.5 
  │ │ │ ├── end-of-stream@1.4.0 
  │ │ │ └── xtend@4.0.1 
  │ │ └─┬ zip-stream@0.5.2 
  │ │   ├─┬ compress-commons@0.2.9 
  │ │   │ ├── crc32-stream@0.3.4 
  │ │   │ └── node-int64@0.3.3 
  │ │   └── lodash@3.2.0 
  │ ├── async@1.0.0 
  │ ├── lodash@3.9.3 
  │ ├── q@1.4.1 
  │ ├─┬ request@2.55.0 
  │ │ ├── aws-sign2@0.5.0 
  │ │ ├── bl@0.9.5 
  │ │ ├── caseless@0.9.0 
  │ │ ├─┬ combined-stream@0.0.7 
  │ │ │ └── delayed-stream@0.0.5 
  │ │ ├─┬ form-data@0.2.0 
  │ │ │ └── async@0.9.2 
  │ │ ├─┬ har-validator@1.8.0 
  │ │ │ ├─┬ chalk@1.1.3 
  │ │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ │ ├── has-ansi@2.0.0 
  │ │ │ │ └── supports-color@2.0.0 
  │ │ │ └─┬ is-my-json-valid@2.16.1 
  │ │ │   ├── generate-function@2.0.0 
  │ │ │   ├─┬ generate-object-property@1.2.0 
  │ │ │   │ └── is-property@1.0.2 
  │ │ │   └── jsonpointer@4.0.1 
  │ │ ├── hawk@2.3.1 
  │ │ ├─┬ http-signature@0.10.1 
  │ │ │ ├── asn1@0.1.11 
  │ │ │ ├── assert-plus@0.1.5 
  │ │ │ └── ctype@0.5.3 
  │ │ ├─┬ mime-types@2.0.14 
  │ │ │ └── mime-db@1.12.0 
  │ │ ├── node-uuid@1.4.8 
  │ │ ├── oauth-sign@0.6.0 
  │ │ ├── qs@2.4.2 
  │ │ └── tunnel-agent@0.4.3 
  │ ├── underscore.string@3.0.3 
  │ └── vargs@0.1.0 
  ├── wd-browser@1.1.0 
  ├─┬ which@1.3.0 
  │ └── isexe@2.0.0 
  └── win-fork@1.1.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/duo-test/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0789 took 3.8789s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (18:4) on program 
/**
 * Module dependencies.
 */

var Emitter = require('events').EventEmitter;
var debug = require('debug')('duo-test');
var localtunnel = require('localtunnel');
var basename = require('path').basename;
var PhantomJS = require('./phantomjs');
var read = require('fs').readFileSync;
var exists = require('co-fs').exists;
var thunkify = require('thunkify');
var serve = require('koa-static');
var fmt = require('util').format;
var Remote = require('./remote');
var join = require('path').join;
var assert = require('assert');
var exec = require('co-exec');
var _ = require('koa-route');
var http = require('http');
var koa = require('koa');

/**
 * Assets path.
 */

var path = join(__dirname, '..', 'client');

/**
 * Assets
 */

var assets = {
  duotest: read(join(path, 'build.js'), 'utf-8'),
  mochajs: read(require.resolve('mocha/mocha.js'), 'utf-8'),
  mochacss: read(require.resolve('mocha/mocha.css'), 'utf-8'),
  template: require(join(path, 'default.js'))
};

/**
 * Expose `DuoTest`.
 */

module.exports = DuoTest;

/**
 * Initialize `DuoTest`.
 *
 * @param {String} root
 * @param {Object} opts
 * @api public
 */

function DuoTest(root){
  if (!(this instanceof DuoTest)) return new DuoTest(root);
  assert(root, 'root module path must be given');
  Emitter.call(this);
  this.stdout = process.stdout;
  this.stderr = process.stderr;
  this.title(basename(root));
  this.pathname('/test');
  this.build('/build.js');
  this.root = root;
  this.app = koa();
  this.app.use(serve(this.root, { defer: true }));
  this.browsers = {};
  this.adapters = [];
  this.adapter(Remote.adapter.regexp, Remote.adapter);
  this.adapter(PhantomJS.adapter.regexp, PhantomJS);
  this.app.use(_.get('/duotest', this.event()));
  this.app.use(_.get('/duotest.js', this.send()));
}

/**
 * Inherit `Emitter`.
 */

DuoTest.prototype.__proto__ = Emitter.prototype;

/**
 * Add browser adapter with `regexp` and `fn`.
 *
 * @param {RegExp} regexp
 * @param {Function} fn
 * @api public
 */

DuoTest.prototype.adapter = function(regexp, fn){
  this.adapters.push([regexp, fn]);
  return this;
};

/**
 * Set the build path.
 *
 * @param {String} path
 * @return {DuoTest}
 * @api public
 */

DuoTest.prototype.build = function(path){
  if (0 == arguments.length) return this._build;
  if ('/' != path[0]) path = '/' + path;
  this._build = path;
  return this;
};

/**
 * Add a browser `type:name`.
 *
 * Examples:
 *
 *    add('saucelabs:chrome:35..');
 *    add('saucelabs:iphone:stable');
 *    add('saucelabs:chrome:..stable');
 *    add('phantomjs', opts)
 *
 * @param {String} name
 * @param {Object} opts
 * @return {DuoTest}
 * @api public
 */

DuoTest.prototype.add = function(name, opts){
  var all = this.adapters;
  var opts = opts || {};
  var browsers = [];

  for (var i = 0, a; a = all[i++];) {
    var regexp = a[0];
    var fn = a[1];
    var m;

    if (m = regexp.exec(name)) {
      var b = fn(this, opts, m[1]);
      if (!Array.isArray(b)) b = [b];
      browsers.push.apply(browsers, b);
    }
  }

  for (var i = 0; i < browsers.length; ++i) {
    var b = browsers[i];
    this.browsers[b.id] = b;
  }

  return this;
};

/**
 * Set auth `user`, `key`.
 *
 * @param {String} user
 * @param {String} key
 * @return {Object|DuoTest}
 * @api public
 */

DuoTest.prototype.auth = function(user, key){
  if (0 == arguments.length) return this._auth;
  this._auth = { user: user, key: key };
  return this;
};

/**
 * Set your test title.
 *
 * This will be used in the default.html (if used)
 * and will appear in saucelabs UI.
 *
 * @param {String} title
 * @return {String|DuoTest}
 * @api public
 */

DuoTest.prototype.title = function(title){
  if (0 == arguments.length) return this._title;
  this._title = title;
  return this;
};

/**
 * Set your tests path.
 *
 * This will be used in the app, for example
 * if your directory structure is:
 *
 *    - module
 *      - index.js
 *      - tests
 *        - test.js
 *        - index.html
 *
 * The path should be `/tests` since the app
 * is started from ./module and not ./tests
 *
 * @param {String} pathname
 * @return {String}
 * @api public
 */

DuoTest.prototype.pathname = function(pathname){
  if (0 == arguments.length) return this._pathname;
  pathname = normalize(pathname);
  this._pathname = pathname;
  return this;
};

/**
 * Get the url with optional `clientId` to attach.
 *
 * @param {String} id
 * @return {String}
 * @api private
 */

DuoTest.prototype.url = function(id){
  var url = this.tunnel
    ? fmt('%s%s', this.tunnel.url, this.pathname())
    : fmt('http://localhost:%s%s', this.address.port, this.pathname());

  if (1 == arguments.length) {
    url += fmt('%s__id__=%s'
      , ~url.indexOf('?') ? '&' : '?'
      , id);
  }

  return url;
};

/**
 * Expose the app using localtunnel.
 *
 * @return {DuoTest}
 * @api public
 */

DuoTest.prototype.expose = function(){
  var self = this;
  return function(done){
    var port = self.address.port;
    localtunnel(port, function(err, tunnel){
      if (err) return done(err);
      self.tunnel = tunnel;
      debug('localtunnel %s', tunnel.url);
      done(null, self);
    });
  };
};

/**
 * Execute `cmd` as middleware.
 *
 * @param {String} cmd
 * @return {DuoTest}
 * @api private
 */

DuoTest.prototype.command = function(cmd){
  var root = this.root;
  var app = this.app;
  var self = this;

  app.use(function* command(next){
    if (this.path == self.pathname()) {
      debug('exec %s', cmd);
      yield exec(cmd, { cwd: root });
      debug('executed %s', cmd);
    }
    yield next;
  });

  return this;
};

/**
 * Listen on `port`.
 *
 * TODO: serve default html if custom one is not found.
 *
 * @return {DuoTest}
 * @api public
 */

DuoTest.prototype.listen = function*(port){
  var index = join(this.root, this.pathname(), 'index.html');
  var port = port || 0;
  var app = this.app;
  var self = this;

  // when `test-path/index.html`
  // is missing serve the default
  // assets
  if (!(yield exists(index))) {
    debug('index.html not found serving default.html');

    var html = assets.template({
      opts: JSON.stringify({ ui: 'bdd' }),
      title: this.title(),
      build: this.build()
    });

    app.use(_.get(this.pathname(), serve('html', html)));
    app.use(_.get('/mocha.js', serve('js', assets.mochajs)));
    app.use(_.get('/mocha.css', serve('css', assets.mochacss)));
  }

  // serve type, body.
  function serve(type, body){
    return function*(){
      this.type = type;
      this.body = body;
    };
  }

  // server
  var server = http.createServer(this.app.callback());

  // listen
  yield function(done){
    server.listen(port, function(err){
      if (err) return done(err);
      self.server = server;
      self.address = server.address();
      debug('started localhost:%s', self.address.port);
      done();
    });
  };

  return this;
};

/**
 * Destroy.
 *
 * @api public
 */

DuoTest.prototype.destroy = function*(){
  var browsers = this.browsers;
  var keys = Object.keys(browsers);

  // browsers
  yield keys.map(function(k){
    return browsers[k].quit();
  });

  // server
  if (this.server) {
    this.server.close();
  }

  // tunnel
  if (this.tunnel) {
    this.tunnel.close();
  }

  this.address = null;
  this.server = null;
  this.tunnel = null;
  this.app = null;
  debug('destroyed');
  return this;
};

/**
 * Run test on all browsers.
 *
 * @return {DuoTest}
 * @api public
 */

DuoTest.prototype.run = function*(){
  var all = this.browsers;
  var keys = Object.keys(all);
  var self = this;

  debug('test on %d browsers', keys.length);

  yield keys.map(function(k){
    return function*(){
      var browser = all[k];
      var runner = browser.runner;
      var url = self.url(browser.id);

      yield browser.connect();
      self.emit('browser', browser);

      try {
        yield [end, browser.get(url)];
        yield browser.quit();
        delete self.browsers[browser.id];
      } catch (e) {
        yield browser.quit();
        delete self.browsers[browser.id];
        throw e;
      }

      function end(done){
        runner.once('end', function(){
          setImmediate(done);
        });
      }
    };
  });

  debug('tested on %d browsers', keys.length);

  return this;
};

/**
 * Send duotest().
 *
 * @return {Function}
 * @api private
 */

DuoTest.prototype.send = function(){
  var self = this;
  return function*(){
    this.type = 'js';
    this.body = self.adapters.length
      ? assets.duotest
      : 'duotest = function(){};';
    debug('sent duotest()');
  };
};

/**
 * Receive an event from `duotest()`.
 *
 * @return {Function}
 * @api private
 */

DuoTest.prototype.event = function(){
  var self = this;
  return function*(){
    var data = decodeURIComponent(this.query.data);
    var id = this.query.id;
    var b = self.browsers[id];
    var j = JSON.parse(data);

    // edge-case
    if (!b) return;

    // HACK
    if (j.data) {
      j.data.slow = Function('return this._slow');
      j.data.fullTitle = Function('return this._fullTitle');
    }

    // runner
    var runner = b.runner;

    // HACK
    if (!runner.emittedStart) {
      runner.emittedStart = true;
      runner.emit('start');
    }

    // emit
    debug('emit %s %j', j.event, j.data);
    runner.emit(j.event, j.data, j.data.err);

    // callback
    var fn = this.query.callback;
    var js = fmt('(this.%s && this.%s());', fn, fn);
    this.type = 'js';
    this.body = js;
    debug('sent %s', js);
  };
};

/**
 * Normalize `path`.
 *
 * @param {String} path
 * @return {String}
 * @api private
 */

function normalize(path){
  if ('/' != path[0]) path = '/' + path;
  if ('/' != path.slice(-1)) path += '/';
  return path;
}
 at SyntaxError: Unexpected token (18:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/duo-test/node_modules/duo-test/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
