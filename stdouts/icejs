/root/Targets/icejs
└─┬ icejs@0.0.1 
  ├── co@4.6.0 
  ├─┬ koa@2.3.0 
  │ ├─┬ accepts@1.3.4 
  │ │ └── negotiator@0.6.1 
  │ ├── content-disposition@0.5.2 
  │ ├── content-type@1.0.4 
  │ ├─┬ cookies@0.7.1 
  │ │ └── keygrip@1.0.2 
  │ ├─┬ debug@3.0.1 
  │ │ └── ms@2.0.0 
  │ ├── delegates@1.0.0 
  │ ├── depd@1.1.1 
  │ ├── destroy@1.0.4 
  │ ├── error-inject@1.0.0 
  │ ├── escape-html@1.0.3 
  │ ├── fresh@0.5.2 
  │ ├─┬ http-assert@1.3.0 
  │ │ └── deep-equal@1.0.1 
  │ ├─┬ http-errors@1.6.2 
  │ │ ├── inherits@2.0.3 
  │ │ └── setprototypeof@1.0.3 
  │ ├── is-generator-function@1.0.6 
  │ ├── koa-compose@4.0.0 
  │ ├─┬ koa-convert@1.2.0 
  │ │ └── koa-compose@3.2.1 
  │ ├── koa-is-json@1.0.0 
  │ ├─┬ mime-types@2.1.17 
  │ │ └── mime-db@1.30.0 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── only@0.0.2 
  │ ├── parseurl@1.3.2 
  │ ├── statuses@1.3.1 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ └── vary@1.1.1 
  ├─┬ koa-body@2.3.0 
  │ ├─┬ co-body@5.1.1 
  │ │ ├── inflation@2.0.0 
  │ │ ├── qs@6.5.1 
  │ │ └─┬ raw-body@2.3.2 
  │ │   ├── bytes@3.0.0 
  │ │   ├── iconv-lite@0.4.19 
  │ │   └── unpipe@1.0.0 
  │ └── formidable@1.1.1 
  ├─┬ koa-router@7.2.1 
  │ ├── debug@2.6.8 
  │ ├─┬ koa-compose@3.2.1 
  │ │ └── any-promise@1.3.0 
  │ ├── methods@1.1.2 
  │ └─┬ path-to-regexp@1.7.0 
  │   └── isarray@0.0.1 
  ├─┬ koa-send@4.1.0 
  │ ├── debug@2.6.8 
  │ ├─┬ mz@2.7.0 
  │ │ ├── object-assign@4.1.1 
  │ │ └─┬ thenify-all@1.6.0 
  │ │   └── thenify@3.3.0 
  │ └─┬ resolve-path@1.3.3 
  │   ├─┬ http-errors@1.5.1 
  │   │ └── setprototypeof@1.0.2 
  │   └── path-is-absolute@1.0.1 
  ├── lodash@4.17.4 
  ├── thunkify@2.1.2 
  ├─┬ waterline@0.11.11 
  │ ├─┬ anchor@0.11.6 
  │ │ ├─┬ @mapbox/geojsonhint@2.0.1 
  │ │ │ ├─┬ concat-stream@1.5.2 
  │ │ │ │ ├─┬ readable-stream@2.0.6 
  │ │ │ │ │ ├── core-util-is@1.0.2 
  │ │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ │ ├── process-nextick-args@1.0.7 
  │ │ │ │ │ ├── string_decoder@0.10.31 
  │ │ │ │ │ └── util-deprecate@1.0.2 
  │ │ │ │ └── typedarray@0.0.6 
  │ │ │ ├─┬ jsonlint-lines@1.7.1 
  │ │ │ │ ├── JSV@4.0.2 
  │ │ │ │ └─┬ nomnom@1.8.1 
  │ │ │ │   ├─┬ chalk@0.4.0 
  │ │ │ │   │ ├── ansi-styles@1.0.0 
  │ │ │ │   │ ├── has-color@0.1.7 
  │ │ │ │   │ └── strip-ansi@0.1.1 
  │ │ │ │   └── underscore@1.6.0 
  │ │ │ ├── minimist@1.2.0 
  │ │ │ ├─┬ vfile@2.0.0 
  │ │ │ │ ├─┬ has@1.0.1 
  │ │ │ │ │ └── function-bind@1.1.1 
  │ │ │ │ ├── is-buffer@1.1.5 
  │ │ │ │ ├── replace-ext@1.0.0 
  │ │ │ │ ├── unist-util-stringify-position@1.1.1 
  │ │ │ │ └── x-is-string@0.1.0 
  │ │ │ └─┬ vfile-reporter@3.0.0 
  │ │ │   ├─┬ chalk@1.1.3 
  │ │ │   │ ├── ansi-styles@2.2.1 
  │ │ │   │ ├── escape-string-regexp@1.0.5 
  │ │ │   │ ├── has-ansi@2.0.0 
  │ │ │   │ └── supports-color@2.0.0 
  │ │ │   ├─┬ log-symbols@1.0.2 
  │ │ │   │ └─┬ chalk@1.1.3 
  │ │ │   │   ├── ansi-styles@2.2.1 
  │ │ │   │   └── strip-ansi@3.0.1 
  │ │ │   ├─┬ plur@2.1.2 
  │ │ │   │ └── irregular-plurals@1.3.0 
  │ │ │   ├── repeat-string@1.6.1 
  │ │ │   ├─┬ string-width@1.0.2 
  │ │ │   │ ├── code-point-at@1.1.0 
  │ │ │   │ ├─┬ is-fullwidth-code-point@1.0.0 
  │ │ │   │ │ └── number-is-nan@1.0.1 
  │ │ │   │ └── strip-ansi@3.0.1 
  │ │ │   ├─┬ strip-ansi@3.0.1 
  │ │ │   │ └── ansi-regex@2.1.1 
  │ │ │   └── trim@0.0.1 
  │ │ ├── @sailshq/lodash@3.10.2 
  │ │ └── validator@4.4.0 
  │ ├── async@1.5.2 
  │ ├── bluebird@3.2.1 
  │ ├── deep-diff@0.3.3 
  │ ├── lodash@3.10.1 
  │ ├─┬ prompt@0.2.14 
  │ │ ├── pkginfo@0.4.1 
  │ │ ├─┬ read@1.0.7 
  │ │ │ └── mute-stream@0.0.7 
  │ │ ├── revalidator@0.1.8 
  │ │ ├─┬ utile@0.2.1 
  │ │ │ ├── async@0.2.10 
  │ │ │ ├── i@0.3.5 
  │ │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ │ └── minimist@0.0.8 
  │ │ │ ├── ncp@0.4.2 
  │ │ │ └─┬ rimraf@2.6.2 
  │ │ │   └─┬ glob@7.1.2 
  │ │ │     ├── fs.realpath@1.0.0 
  │ │ │     ├─┬ inflight@1.0.6 
  │ │ │     │ └── wrappy@1.0.2 
  │ │ │     ├─┬ minimatch@3.0.4 
  │ │ │     │ └─┬ brace-expansion@1.1.8 
  │ │ │     │   ├── balanced-match@1.0.0 
  │ │ │     │   └── concat-map@0.0.1 
  │ │ │     └── once@1.4.0 
  │ │ └─┬ winston@0.8.3 
  │ │   ├── async@0.2.10 
  │ │   ├── colors@0.6.2 
  │ │   ├── cycle@1.0.3 
  │ │   ├── eyes@0.1.8 
  │ │   ├── isstream@0.1.2 
  │ │   ├── pkginfo@0.3.1 
  │ │   └── stack-trace@0.0.10 
  │ ├─┬ switchback@2.0.0 
  │ │ └── lodash@2.4.2 
  │ ├─┬ waterline-criteria@0.11.2 
  │ │ └── lodash@2.4.2 
  │ └─┬ waterline-schema@0.2.2 
  │   └── lodash@3.10.1 
  └── when@3.7.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/icejs/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 31% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0286 took 1.6237s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (20:6) on program 
'use strict';

/**
 * Module dependencies.
 */

const isGeneratorFunction = require('is-generator-function');
const debug = require('debug')('koa:application');
const onFinished = require('on-finished');
const response = require('./response');
const compose = require('koa-compose');
const isJSON = require('koa-is-json');
const context = require('./context');
const request = require('./request');
const statuses = require('statuses');
const Cookies = require('cookies');
const accepts = require('accepts');
const Emitter = require('events');
const assert = require('assert');
const Stream = require('stream');
const http = require('http');
const only = require('only');
const convert = require('koa-convert');
const deprecate = require('depd')('koa');

/**
 * Expose `Application` class.
 * Inherits from `Emitter.prototype`.
 */

module.exports = class Application extends Emitter {
  /**
   * Initialize a new `Application`.
   *
   * @api public
   */

  constructor() {
    super();

    this.proxy = false;
    this.middleware = [];
    this.subdomainOffset = 2;
    this.env = process.env.NODE_ENV || 'development';
    this.context = Object.create(context);
    this.request = Object.create(request);
    this.response = Object.create(response);
  }

  /**
   * Shorthand for:
   *
   *    http.createServer(app.callback()).listen(...)
   *
   * @param {Mixed} ...
   * @return {Server}
   * @api public
   */

  listen(...args) {
    debug('listen');
    const server = http.createServer(this.callback());
    return server.listen(...args);
  }

  /**
   * Return JSON representation.
   * We only bother showing settings.
   *
   * @return {Object}
   * @api public
   */

  toJSON() {
    return only(this, [
      'subdomainOffset',
      'proxy',
      'env'
    ]);
  }

  /**
   * Inspect implementation.
   *
   * @return {Object}
   * @api public
   */

  inspect() {
    return this.toJSON();
  }

  /**
   * Use the given middleware `fn`.
   *
   * Old-style middleware will be converted.
   *
   * @param {Function} fn
   * @return {Application} self
   * @api public
   */

  use(fn) {
    if (typeof fn !== 'function') throw new TypeError('middleware must be a function!');
    if (isGeneratorFunction(fn)) {
      deprecate('Support for generators will be removed in v3. ' +
                'See the documentation for examples of how to convert old middleware ' +
                'https://github.com/koajs/koa/blob/master/docs/migration.md');
      fn = convert(fn);
    }
    debug('use %s', fn._name || fn.name || '-');
    this.middleware.push(fn);
    return this;
  }

  /**
   * Return a request handler callback
   * for node's native http server.
   *
   * @return {Function}
   * @api public
   */

  callback() {
    const fn = compose(this.middleware);

    if (!this.listeners('error').length) this.on('error', this.onerror);

    const handleRequest = (req, res) => {
      res.statusCode = 404;
      const ctx = this.createContext(req, res);
      const onerror = err => ctx.onerror(err);
      const handleResponse = () => respond(ctx);
      onFinished(res, onerror);
      return fn(ctx).then(handleResponse).catch(onerror);
    };

    return handleRequest;
  }

  /**
   * Initialize a new context.
   *
   * @api private
   */

  createContext(req, res) {
    const context = Object.create(this.context);
    const request = context.request = Object.create(this.request);
    const response = context.response = Object.create(this.response);
    context.app = request.app = response.app = this;
    context.req = request.req = response.req = req;
    context.res = request.res = response.res = res;
    request.ctx = response.ctx = context;
    request.response = response;
    response.request = request;
    context.originalUrl = request.originalUrl = req.url;
    context.cookies = new Cookies(req, res, {
      keys: this.keys,
      secure: request.secure
    });
    request.ip = request.ips[0] || req.socket.remoteAddress || '';
    context.accept = request.accept = accepts(req);
    context.state = {};
    return context;
  }

  /**
   * Default error handler.
   *
   * @param {Error} err
   * @api private
   */

  onerror(err) {
    assert(err instanceof Error, `non-error thrown: ${err}`);

    if (404 == err.status || err.expose) return;
    if (this.silent) return;

    const msg = err.stack || err.toString();
    console.error();
    console.error(msg.replace(/^/gm, '  '));
    console.error();
  }
};

/**
 * Response helper.
 */

function respond(ctx) {
  // allow bypassing koa
  if (false === ctx.respond) return;

  const res = ctx.res;
  if (!ctx.writable) return;

  let body = ctx.body;
  const code = ctx.status;

  // ignore body
  if (statuses.empty[code]) {
    // strip headers
    ctx.body = null;
    return res.end();
  }

  if ('HEAD' == ctx.method) {
    if (!res.headersSent && isJSON(body)) {
      ctx.length = Buffer.byteLength(JSON.stringify(body));
    }
    return res.end();
  }

  // status body
  if (null == body) {
    body = ctx.message || String(code);
    if (!res.headersSent) {
      ctx.type = 'text';
      ctx.length = Buffer.byteLength(body);
    }
    return res.end(body);
  }

  // responses
  if (Buffer.isBuffer(body)) return res.end(body);
  if ('string' == typeof body) return res.end(body);
  if (body instanceof Stream) return body.pipe(res);

  // body: json
  body = JSON.stringify(body);
  if (!res.headersSent) {
    ctx.length = Buffer.byteLength(body);
  }
  res.end(body);
}
 at SyntaxError: Unexpected token (20:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/icejs/node_modules/icejs/index.js. Coverage (Term): 15% Coverage (LOC): 20%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
