/root/Targets/cordova-osx
└── cordova-osx@4.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/cordova-osx/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 26% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","pow","join","RegExp","sort","Error","Number","toString","getOSType","parseInt"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0458 took 22.9829s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (23:4) on program 
/**
 * Accepts any node Stream instance and hijacks its "write()" function,
 * so that it can count any newlines that get written to the output.
 *
 * When a '\n' byte is encountered, then a "newline" event will be emitted
 * on the stream, with no arguments. It is up to the listeners to determine
 * any necessary deltas required for their use-case.
 *
 * Ex:
 *
 *   var cursor = ansi(process.stdout)
 *     , ln = 0
 *   process.stdout.on('newline', function () {
 *    ln++
 *   })
 */

/**
 * Module dependencies.
 */

var assert = require('assert')
var NEWLINE = '\n'.charCodeAt(0)

function emitNewlineEvents (stream) {
  if (stream._emittingNewlines) {
    // already emitting newline events
    return
  }

  var write = stream.write

  stream.write = function (data) {
    // first write the data
    var rtn = write.apply(stream, arguments)

    if (stream.listeners('newline').length > 0) {
      var len = data.length
        , i = 0
      // now try to calculate any deltas
      if (typeof data == 'string') {
        for (; i<len; i++) {
          processByte(stream, data.charCodeAt(i))
        }
      } else {
        // buffer
        for (; i<len; i++) {
          processByte(stream, data[i])
        }
      }
    }

    return rtn
  }

  stream._emittingNewlines = true
}
module.exports = emitNewlineEvents


/**
 * Processes an individual byte being written to a stream
 */

function processByte (stream, b) {
  assert.equal(typeof b, 'number')
  if (b === NEWLINE) {
    stream.emit('newline')
  }
}
 at SyntaxError: Unexpected token (23:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/bin/templates/scripts/cordova/Api.js. Coverage (Term): 6% Coverage (LOC): 8%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/cordova-common/cordova-common.js. Coverage (Term): 44% Coverage (LOC): 47%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/cordova-common/src/events.js. Coverage (Term): 43% Coverage (LOC): 45%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/cordova-common/src/superspawn.js. Coverage (Term): 13% Coverage (LOC): 14%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/underscore/underscore.js. Coverage (Term): 19% Coverage (LOC): 33%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/q/q.js. Coverage (Term): 18% Coverage (LOC): 27%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/shell.js. Coverage (Term): 100% Coverage (LOC): 100%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/common.js. Coverage (Term): 19% Coverage (LOC): 27%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/ls.js. Coverage (Term): 11% Coverage (LOC): 12%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/cd.js. Coverage (Term): 38% Coverage (LOC): 46%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/pwd.js. Coverage (Term): 60% Coverage (LOC): 75%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/find.js. Coverage (Term): 25% Coverage (LOC): 26%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/cp.js. Coverage (Term): 7% Coverage (LOC): 9%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/rm.js. Coverage (Term): 8% Coverage (LOC): 10%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/mv.js. Coverage (Term): 13% Coverage (LOC): 16%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/mkdir.js. Coverage (Term): 20% Coverage (LOC): 23%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/test.js. Coverage (Term): 17% Coverage (LOC): 13%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/cat.js. Coverage (Term): 23% Coverage (LOC): 30%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/to.js. Coverage (Term): 39% Coverage (LOC): 50%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/toEnd.js. Coverage (Term): 39% Coverage (LOC): 50%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/sed.js. Coverage (Term): 24% Coverage (LOC): 30%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/grep.js. Coverage (Term): 19% Coverage (LOC): 23%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/which.js. Coverage (Term): 15% Coverage (LOC): 17%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/echo.js. Coverage (Term): 45% Coverage (LOC): 63%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/dirs.js. Coverage (Term): 13% Coverage (LOC): 17%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/ln.js. Coverage (Term): 26% Coverage (LOC): 27%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/exec.js. Coverage (Term): 9% Coverage (LOC): 9%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/tempdir.js. Coverage (Term): 21% Coverage (LOC): 35%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/chmod.js. Coverage (Term): 14% Coverage (LOC): 21%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/shelljs/src/error.js. Coverage (Term): 71% Coverage (LOC): 83%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/cordova-common/src/ActionStack.js. Coverage (Term): 18% Coverage (LOC): 22%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/cordova-common/src/CordovaError/CordovaError.js. Coverage (Term): 22% Coverage (LOC): 31%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/cordova-common/src/CordovaLogger.js. Coverage (Term): 5% Coverage (LOC): 7%
*- File /root/Targets/cordova-osx/node_modules/cordova-osx/node_modules/ansi/lib/ansi.js. Coverage (Term): 3% Coverage (LOC): 5%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
