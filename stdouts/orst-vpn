/root/Targets/orst-vpn
└─┬ orst-vpn@0.1.0 
  ├─┬ mssql@2.5.0 
  │ ├── generic-pool@2.5.4 
  │ ├─┬ promise@7.3.1 
  │ │ └── asap@2.0.6 
  │ └─┬ tedious@1.13.2 
  │   ├─┬ babel-runtime@5.8.38 
  │   │ └── core-js@1.2.7 
  │   ├── big-number@0.3.1 
  │   ├── bl@1.2.1 
  │   ├── iconv-lite@0.4.19 
  │   ├─┬ readable-stream@2.3.3 
  │   │ ├── core-util-is@1.0.2 
  │   │ ├── inherits@2.0.3 
  │   │ ├── isarray@1.0.0 
  │   │ ├── process-nextick-args@1.0.7 
  │   │ ├── safe-buffer@5.1.1 
  │   │ ├── string_decoder@1.0.3 
  │   │ └── util-deprecate@1.0.2 
  │   └── sprintf@0.1.5 
  └─┬ vpnc@1.4.10 
    ├── inpath@1.0.2 
    ├─┬ kext@1.1.2 
    │ └── async@0.2.10 
    ├─┬ sudo@1.0.3 
    │ ├── pidof@1.0.2 
    │ └─┬ read@1.0.7 
    │   └── mute-stream@0.0.7 
    ├── temp@0.4.0 
    ├── underscore@1.3.3 
    └─┬ yacon@1.0.1 
      ├── callsite@1.0.0 
      └── colors@0.6.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/orst-vpn/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.042 took 3.2132s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
/**
 * Connect to ORST_VPN3K using vpnc.
 * @author Jack Peterson (jack@tinybike.net)
 */

"use strict";

var vpnc = require("vpnc");
var db = require("mssql");
var log = console.log;

function stringify(o) {
    if (o !== undefined && o !== null) {
        if (o.constructor === Object || o.constructor === Array) {
            return JSON.stringify(o, null, 2);
        } else {
            return o.toString();
        }
    }
}

function is_function(f) {
    return Object.prototype.toString.call(f) === "[object Function]";
}

var vpn = {

    config: {},

    vpnc: vpnc,

    db: db,

    disconnect: function () {
        this.vpnc.disconnect(function (err, code) {
            if (err) {
                console.error("Error disconnecting VPN:", err);
            } else {
                if (this.config.debug) log("VPN disconnected [" + code + "]");
            }
        });
    },

    connect: function (cb) {
        var self = this;
        this.vpnc.available(function (err, version) {
            if (err) {
                if (is_function(cb)) {
                    return cb(err);
                } else {
                    return console.error("vpnc unavailable:", err);
                }
            }
            if (self.config.debug) log("Found vpnc:", stringify(version));
            self.vpnc.connect(self.config.vpn, function (err, code) {
                if (self.config.debug) log("VPN connected [" + code + "]");
                if (err) {
                    if (is_function(cb)) {
                        return cb(err);
                    } else {
                        return console.error("Error connecting VPN:", err);
                    }
                }
                if (is_function(cb)) {
                    try {
                        cb();
                    } catch (ex) {
                        cb(ex);
                    }
                }
            });
        });
    },

    // connect to vpn, connect to database, run a single query, disconnect
    db_query: function (query, cb) {
        var self = this;

        try {
            this.connect(function () {

                // connect to MSSQL database
                var conn = new db.Connection(self.config.db, function (err) {
                    if (err) throw err;

                    // query database and fetch results
                    conn.request().query(query, function (err, results) {
                        if (err) throw err;

                        if (is_function(cb)) {
                            if (self.config.debug) log(stringify(results));
                            cb(null, results);
                        } else {
                            log("No callback provided, printing results...");
                            log(stringify(results));
                        }

                        // disconnect from vpn
                        self.disconnect();
                    });
                });

                conn.on("error", function (err) {
                    if (err) {
                        self.disconnect();
                        if (is_function(cb)) {
                            cb(err);
                        } else {
                            console.error("Database error:", err);
                        }
                    }
                });

            });

        } catch (ex) {
            if (is_function(cb)) {
                cb(ex);
            } else {
                console.error("VPN connection error:", ex);
            }
        }
    }

};

process.on("exit", function (code) { if (code) vpn.disconnect(); });

module.exports = vpn;
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
