/root/Targets/chai-jscodeshift
├── UNMET PEER DEPENDENCY chai@>=1.9.2
├─┬ chai-jscodeshift@15.0.0 
│ └── merge@1.2.0 
└── UNMET PEER DEPENDENCY jscodeshift@>=0.3.0

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/chai-jscodeshift/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0828 took 2.0591s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (23:8) on program var fs = require('fs');
var path = require('path');
var merge = require('merge');
var jscodeshift = require('jscodeshift');

var config = {
  fixtureDirectory: process.cwd(),
  inputFixturePath: function(fixture, fixtureDirectory) {
    return path.join(fixtureDirectory, fixture + '.input.js');
  },
  outputFixturePath: function(fixture, fixtureDirectory) {
    return path.join(fixtureDirectory, fixture + '.output.js');
  },
  transformOptions: {},
};

module.exports = function chaiJSCodeShift(options) {
  var finalConfig = merge({}, config, options || {});

  // eslint-disable-next-line no-shadow, func-style
  var chaiHelper = function chaiJSCodeShift(chaiOptions) {
    var Assertion = chaiOptions.Assertion;
    var assert = chaiOptions.assert;

    function transformFixtureWithOptions(transformer, fixture, transformOptions) {
      var inputPath = finalConfig.inputFixturePath(fixture, finalConfig.fixtureDirectory);

      var input = fs.readFileSync(inputPath, 'utf8');
      return transformer(
        {source: input, path: inputPath},
        {jscodeshift: jscodeshift},
        merge({}, finalConfig.transformOptions, transformOptions || {})
      ).trim();
    }

    function transform(fixture, transformOptions) {
      var outputPath = finalConfig.outputFixturePath(fixture, finalConfig.fixtureDirectory);
      var output = fs.readFileSync(outputPath, 'utf8').trim();
      var transformed = transformFixtureWithOptions(this._obj, fixture, transformOptions);
      new Assertion(transformed).to.equal(output);
    }

    function throwWhileTransforming(fixture, error, transformOptions) {
      var transformer = this._obj;
      new Assertion(function() { transformFixtureWithOptions(transformer, fixture, transformOptions); }).to.throw(error);
    }

    Assertion.addMethod('transform', transform);
    Assertion.addMethod('throwWhileTransforming', throwWhileTransforming);

    assert.transforms = function(transformer, fixture, transformerOptions) {
      return (new Assertion(transformer)).to.transform(fixture, transformerOptions || {});
    };

    assert.throwsWhileTransforming = function(transformer, fixture, error, transformerOptions) {
      return (new Assertion(transformer)).to.throwWhileTransforming(fixture, error, transformerOptions);
    };
  };

  // Utilities to be able to actually test this
  chaiHelper.resetConfig = function resetConfig() {
    finalConfig = config;
  };

  chaiHelper.updateConfig = function updateConfig(newConfig) {
    finalConfig = merge({}, finalConfig, newConfig);
  };

  return chaiHelper;
};
 at SyntaxError: Unexpected token (23:8)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
