/root/Targets/hypercloud-ui-vanilla
└─┬ hypercloud-ui-vanilla@1.0.0 
  ├── ejs@2.5.7 
  ├─┬ express@4.16.1 
  │ ├─┬ accepts@1.3.4 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├─┬ body-parser@1.18.2 
  │ │ ├── bytes@3.0.0 
  │ │ ├─┬ http-errors@1.6.2 
  │ │ │ ├── inherits@2.0.3 
  │ │ │ └── setprototypeof@1.0.3 
  │ │ ├── iconv-lite@0.4.19 
  │ │ └── raw-body@2.3.2 
  │ ├── content-disposition@0.5.2 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├── depd@1.1.1 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├─┬ finalhandler@1.1.0 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@2.0.2 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.5.2 
  │ ├── qs@6.5.1 
  │ ├── range-parser@1.2.0 
  │ ├── safe-buffer@5.1.1 
  │ ├─┬ send@0.16.1 
  │ │ ├── destroy@1.0.4 
  │ │ └── mime@1.4.1 
  │ ├── serve-static@1.13.1 
  │ ├── setprototypeof@1.1.0 
  │ ├── statuses@1.3.1 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.1 
  │ └── vary@1.1.2 
  ├─┬ less-express@1.1.0 
  │ ├─┬ less@2.7.2 
  │ │ ├─┬ errno@0.1.4 
  │ │ │ └── prr@0.0.0 
  │ │ ├── graceful-fs@4.1.11 
  │ │ ├── image-size@0.5.5 
  │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ └── minimist@0.0.8 
  │ │ ├─┬ promise@7.3.1 
  │ │ │ └── asap@2.0.6 
  │ │ ├─┬ request@2.83.0 
  │ │ │ ├── aws-sign2@0.7.0 
  │ │ │ ├── aws4@1.6.0 
  │ │ │ ├── caseless@0.12.0 
  │ │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ │ └── delayed-stream@1.0.0 
  │ │ │ ├── extend@3.0.1 
  │ │ │ ├── forever-agent@0.6.1 
  │ │ │ ├─┬ form-data@2.3.1 
  │ │ │ │ └── asynckit@0.4.0 
  │ │ │ ├─┬ har-validator@5.0.3 
  │ │ │ │ ├─┬ ajv@5.2.3 
  │ │ │ │ │ ├── co@4.6.0 
  │ │ │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │ │   └── jsonify@0.0.0 
  │ │ │ │ └── har-schema@2.0.0 
  │ │ │ ├─┬ hawk@6.0.2 
  │ │ │ │ ├── boom@4.3.1 
  │ │ │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ │ │ └── boom@5.2.0 
  │ │ │ │ ├── hoek@4.2.0 
  │ │ │ │ └── sntp@2.0.2 
  │ │ │ ├─┬ http-signature@1.2.0 
  │ │ │ │ ├── assert-plus@1.0.0 
  │ │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ │ └─┬ verror@1.10.0 
  │ │ │ │ │   └── core-util-is@1.0.2 
  │ │ │ │ └─┬ sshpk@1.13.1 
  │ │ │ │   ├── asn1@0.2.3 
  │ │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │ │   ├── dashdash@1.14.1 
  │ │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │ │   ├── getpass@0.1.7 
  │ │ │ │   ├── jsbn@0.1.1 
  │ │ │ │   └── tweetnacl@0.14.5 
  │ │ │ ├── is-typedarray@1.0.0 
  │ │ │ ├── isstream@0.1.2 
  │ │ │ ├── json-stringify-safe@5.0.1 
  │ │ │ ├── oauth-sign@0.8.2 
  │ │ │ ├── performance-now@2.1.0 
  │ │ │ ├── stringstream@0.0.5 
  │ │ │ ├─┬ tough-cookie@2.3.3 
  │ │ │ │ └── punycode@1.4.1 
  │ │ │ ├── tunnel-agent@0.6.0 
  │ │ │ └── uuid@3.1.0 
  │ │ └── source-map@0.5.7 
  │ ├─┬ lru-cache@4.1.1 
  │ │ ├── pseudomap@1.0.2 
  │ │ └── yallist@2.1.2 
  │ └── underscore@1.8.3 
  └── nicedate@1.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/hypercloud-ui-vanilla/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0578 took 2.5323s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (37:32) on program const path = require('path')
const express = require('express')
const lessExpress = require('less-express')
const ejs = require('ejs')
const nicedate = require('nicedate')

const DAT_KEY_REGEX = /([0-9a-f]{64})/i

module.exports = function ({cloud, config}) {
  var app = express()

  app.locals = {
    session: false, // default session value
    errors: false, // common default value
    appInfo: {
      version: cloud.version,
      brandname: config.brandname,
      hostname: config.hostname,
      port: config.port
    }
  }

  app.engine('html', ejs.renderFile)
  app.set('view engine', 'html')
  app.set('views', path.join(__dirname, 'assets/html'))

  // assets
  // =

  app.get('/assets/css/main.css', lessExpress(path.join(__dirname, 'assets/css/main.less')))
  app.use('/assets/css', express.static(path.join(__dirname, 'assets/css')))
  app.use('/assets/js', express.static(path.join(__dirname, 'assets/js')))

  // pages
  // =

  app.get('/', async (req, res) => {
    var {session} = res.locals

    // load user, if applicable
    var userRecord = false
    if (session) {
      userRecord = await cloud.usersDB.getByID(session.id)
    }

    // respond
    res.render('frontpage', {
      userRecord,
      verified: req.query.verified,
      nicedate,
      activityLimit: 25,
      activity: await cloud.activityDB.listGlobalEvents({
        limit: 25,
        lt: req.query.start,
        reverse: true
      })
    })
  })

  app.get('/explore', async (req, res) => {
    if (req.query.view === 'activity') {
      return res.render('explore-activity', {
        nicedate,
        activityLimit: 25,
        activity: await cloud.activityDB.listGlobalEvents({
          limit: 25,
          lt: req.query.start,
          reverse: true
        })
      })
    }
    var users = await cloud.usersDB.list()
    res.render('explore', {users})
  })

  app.get('/new-archive', async (req, res) => {
    var {session} = res.locals

    // load user, if applicable
    var userRecord = false
    if (session) {
      userRecord = await cloud.usersDB.getByID(session.id)
    }

    res.render('new-archive', {userRecord})
  })

  app.get('/user/:username/:archivename', async (req, res) => {
    // validate & sanitize input
    req.checkParams('username').isAlphanumeric().isLength({ min: 3, max: 16 })
    req.checkParams('archivename').isDatName().isLength({ min: 3, max: 64 })
    ;(await req.getValidationResult()).throw()
    var {username, archivename} = req.params

    // lookup user
    var userRecord = await cloud.usersDB.getByUsername(username)
    if (!userRecord) throw new NotFoundError()

    // lookup archive
    const findFn = (DAT_KEY_REGEX.test(archivename))
      ? a => a.key === archivename
      : a => a.name === archivename
    var archive = userRecord.archives.find(findFn)
    if (!archive) throw new NotFoundError()

    var progress = await cloud.api.archives._getArchiveProgress(archive.key)
    var {session} = res.locals
    res.render('archive', {
      username,
      key: archive.key,
      archivename,
      progress: (progress * 100) | 0,
      isOwner: session && session.id === userRecord.id
    })
  })

  app.get('/user/:username', async (req, res) => {
    // validate & sanitize input
    req.checkParams('username').isAlphanumeric().isLength({ min: 3, max: 16 })
    ;(await req.getValidationResult()).throw()
    var {username} = req.params

    // lookup user
    var userRecord = await cloud.usersDB.getByUsername(username)
    if (!userRecord) throw new NotFoundError()

    var {session} = res.locals
    res.render('user', {userRecord})
  })

  app.get('/about', (req, res) => res.render('about'))
  app.get('/terms', (req, res) => res.render('terms'))
  app.get('/privacy', (req, res) => res.render('privacy'))
  app.get('/support', (req, res) => res.render('support'))
  app.get('/login', async (req, res) => res.render('login'))

  app.get('/register', async (req, res) => {
    res.render('register', {
      isOpen: config.registration.open
    })
  })

  app.get('/registered', async (req, res) => {
    res.render('registered', {email: req.query.email})
  })

  app.get('*', (req, res) => {
    res.render('404')
  })

  // error-handling fallback
  // =

  app.use((err, req, res, next) => {
    // common errors
    if ('status' in err) {
      res.status(err.status)
      res.render('error', { error: err })
      return
    }

    // general uncaught error
    console.error('[ERROR]', err)
    res.status(500)
    var error = {
      message: 'Internal server error',
      internalError: true
    }
    res.render('error', {error})
  })

  return app
} at SyntaxError: Unexpected token (37:32)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp.expect (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:597:28)
    at Parser.pp$3.parseExprList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2152:16)
    at Parser.pp$3.parseSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1741:35)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1718:17)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
