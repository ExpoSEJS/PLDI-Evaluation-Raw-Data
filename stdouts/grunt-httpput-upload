/root/Targets/grunt-httpput-upload
└─┬ grunt-httpput-upload@0.0.4 
  ├─┬ grunt@0.4.5 
  │ ├── async@0.1.22 
  │ ├── coffee-script@1.3.3 
  │ ├── colors@0.6.2 
  │ ├── dateformat@1.0.2-1.2.3 
  │ ├── eventemitter2@0.4.14 
  │ ├── exit@0.1.2 
  │ ├─┬ findup-sync@0.1.3 
  │ │ ├─┬ glob@3.2.11 
  │ │ │ ├── inherits@2.0.3 
  │ │ │ └── minimatch@0.3.0 
  │ │ └── lodash@2.4.2 
  │ ├── getobject@0.1.0 
  │ ├─┬ glob@3.1.21 
  │ │ ├── graceful-fs@1.2.3 
  │ │ └── inherits@1.0.2 
  │ ├─┬ grunt-legacy-log@0.1.3 
  │ │ ├─┬ grunt-legacy-log-utils@0.1.1 
  │ │ │ ├── lodash@2.4.2 
  │ │ │ └── underscore.string@2.3.3 
  │ │ ├── lodash@2.4.2 
  │ │ └── underscore.string@2.3.3 
  │ ├── grunt-legacy-util@0.2.0 
  │ ├── hooker@0.2.3 
  │ ├── iconv-lite@0.2.11 
  │ ├─┬ js-yaml@2.0.5 
  │ │ ├─┬ argparse@0.1.16 
  │ │ │ ├── underscore@1.7.0 
  │ │ │ └── underscore.string@2.4.0 
  │ │ └── esprima@1.0.4 
  │ ├── lodash@0.9.2 
  │ ├─┬ minimatch@0.2.14 
  │ │ ├── lru-cache@2.7.3 
  │ │ └── sigmund@1.0.1 
  │ ├─┬ nopt@1.0.10 
  │ │ └── abbrev@1.1.1 
  │ ├── rimraf@2.2.8 
  │ ├── underscore.string@2.2.1 
  │ └── which@1.0.9 
  ├── grunt-contrib-clean@0.5.0 
  ├─┬ grunt-contrib-jshint@0.8.0 
  │ └─┬ jshint@2.4.4 
  │   ├── cli@0.4.5 
  │   ├── console-browserify@0.1.6 
  │   ├─┬ htmlparser2@3.3.0 
  │   │ ├── domelementtype@1.3.0 
  │   │ ├── domhandler@2.1.0 
  │   │ ├── domutils@1.1.6 
  │   │ └─┬ readable-stream@1.0.34 
  │   │   ├── core-util-is@1.0.2 
  │   │   ├── isarray@0.0.1 
  │   │   └── string_decoder@0.10.31 
  │   ├── shelljs@0.1.4 
  │   └── underscore@1.4.4 
  ├─┬ grunt-contrib-nodeunit@0.3.3 
  │ └─┬ nodeunit@0.8.8 
  │   └─┬ tap@10.7.2 
  │     ├── bind-obj-methods@1.0.0 
  │     ├── bluebird@3.5.1 
  │     ├── clean-yaml-object@0.1.0 
  │     ├── color-support@1.1.3 
  │     ├─┬ coveralls@2.13.3 
  │     │ ├─┬ js-yaml@3.6.1 
  │     │ │ ├── argparse@1.0.9 
  │     │ │ └── esprima@2.7.3 
  │     │ ├── lcov-parse@0.0.10 
  │     │ ├── log-driver@1.2.5 
  │     │ ├── minimist@1.2.0 
  │     │ └─┬ request@2.79.0 
  │     │   ├── aws-sign2@0.6.0 
  │     │   ├── caseless@0.11.0 
  │     │   ├── form-data@2.1.4 
  │     │   ├─┬ har-validator@2.0.6 
  │     │   │ ├─┬ chalk@1.1.3 
  │     │   │ │ ├── ansi-styles@2.2.1 
  │     │   │ │ ├── has-ansi@2.0.0 
  │     │   │ │ └── supports-color@2.0.0 
  │     │   │ ├── commander@2.11.0 
  │     │   │ ├─┬ is-my-json-valid@2.16.1 
  │     │   │ │ ├── generate-function@2.0.0 
  │     │   │ │ ├─┬ generate-object-property@1.2.0 
  │     │   │ │ │ └── is-property@1.0.2 
  │     │   │ │ ├── jsonpointer@4.0.1 
  │     │   │ │ └── xtend@4.0.1 
  │     │   │ └─┬ pinkie-promise@2.0.1 
  │     │   │   └── pinkie@2.0.4 
  │     │   ├─┬ hawk@3.1.3 
  │     │   │ ├── boom@2.10.1 
  │     │   │ ├── cryptiles@2.0.5 
  │     │   │ ├── hoek@2.16.3 
  │     │   │ └── sntp@1.0.9 
  │     │   ├─┬ http-signature@1.1.1 
  │     │   │ └── assert-plus@0.2.0 
  │     │   ├── qs@6.3.2 
  │     │   └── tunnel-agent@0.4.3 
  │     ├─┬ foreground-child@1.5.6 
  │     │ └─┬ cross-spawn@4.0.2 
  │     │   ├─┬ lru-cache@4.1.1 
  │     │   │ ├── pseudomap@1.0.2 
  │     │   │ └── yallist@2.1.2 
  │     │   └── which@1.3.0 
  │     ├── fs-exists-cached@1.0.0 
  │     ├── function-loop@1.0.1 
  │     ├─┬ glob@7.1.2 
  │     │ ├── fs.realpath@1.0.0 
  │     │ ├─┬ inflight@1.0.6 
  │     │ │ └── wrappy@1.0.2 
  │     │ ├─┬ minimatch@3.0.4 
  │     │ │ └─┬ brace-expansion@1.1.8 
  │     │ │   ├── balanced-match@1.0.0 
  │     │ │   └── concat-map@0.0.1 
  │     │ ├── once@1.4.0 
  │     │ └── path-is-absolute@1.0.1 
  │     ├── isexe@2.0.0 
  │     ├─┬ js-yaml@3.10.0 
  │     │ ├─┬ argparse@1.0.9 
  │     │ │ └── sprintf-js@1.0.3 
  │     │ └── esprima@4.0.0 
  │     ├─┬ nyc@11.2.1 
  │     │ ├── archy@1.0.0 
  │     │ ├── arrify@1.0.1 
  │     │ ├─┬ caching-transform@1.0.1 
  │     │ │ └─┬ write-file-atomic@1.3.4 
  │     │ │   ├── graceful-fs@4.1.11 
  │     │ │   ├── imurmurhash@0.1.4 
  │     │ │   └── slide@1.1.6 
  │     │ ├── convert-source-map@1.5.0 
  │     │ ├── debug-log@1.0.1 
  │     │ ├─┬ default-require-extensions@1.0.0 
  │     │ │ └─┬ strip-bom@2.0.0 
  │     │ │   └── is-utf8@0.2.1 
  │     │ ├─┬ find-cache-dir@0.1.1 
  │     │ │ ├── commondir@1.0.1 
  │     │ │ └─┬ pkg-dir@1.0.0 
  │     │ │   └─┬ find-up@1.1.2 
  │     │ │     ├── path-exists@2.1.0 
  │     │ │     └─┬ pinkie-promise@2.0.1 
  │     │ │       └── pinkie@2.0.4 
  │     │ ├─┬ find-up@2.1.0 
  │     │ │ └─┬ locate-path@2.0.0 
  │     │ │   ├─┬ p-locate@2.0.0 
  │     │ │   │ └── p-limit@1.1.0 
  │     │ │   └── path-exists@3.0.0 
  │     │ ├─┬ foreground-child@1.5.6 
  │     │ │ └─┬ cross-spawn@4.0.2 
  │     │ │   └─┬ lru-cache@4.1.1 
  │     │ │     ├── pseudomap@1.0.2 
  │     │ │     └── yallist@2.1.2 
  │     │ ├─┬ glob@7.1.2 
  │     │ │ ├── fs.realpath@1.0.0 
  │     │ │ ├─┬ inflight@1.0.6 
  │     │ │ │ └── wrappy@1.0.2 
  │     │ │ ├── inherits@2.0.3 
  │     │ │ ├─┬ minimatch@3.0.4 
  │     │ │ │ └─┬ brace-expansion@1.1.8 
  │     │ │ │   ├── balanced-match@1.0.0 
  │     │ │ │   └── concat-map@0.0.1 
  │     │ │ ├── once@1.4.0 
  │     │ │ └── path-is-absolute@1.0.1 
  │     │ ├── istanbul-lib-coverage@1.1.1 
  │     │ ├─┬ istanbul-lib-hook@1.0.7 
  │     │ │ └── append-transform@0.4.0 
  │     │ ├─┬ istanbul-lib-instrument@1.8.0 
  │     │ │ ├─┬ babel-generator@6.26.0 
  │     │ │ │ ├── babel-messages@6.23.0 
  │     │ │ │ ├─┬ babel-runtime@6.26.0 
  │     │ │ │ │ ├── core-js@2.5.1 
  │     │ │ │ │ └── regenerator-runtime@0.11.0 
  │     │ │ │ ├─┬ detect-indent@4.0.0 
  │     │ │ │ │ └─┬ repeating@2.0.1 
  │     │ │ │ │   └── is-finite@1.0.2 
  │     │ │ │ ├── jsesc@1.3.0 
  │     │ │ │ ├── lodash@4.17.4 
  │     │ │ │ └── trim-right@1.0.1 
  │     │ │ ├── babel-template@6.26.0 
  │     │ │ ├─┬ babel-traverse@6.26.0 
  │     │ │ │ ├─┬ babel-code-frame@6.26.0 
  │     │ │ │ │ ├─┬ chalk@1.1.3 
  │     │ │ │ │ │ ├── ansi-styles@2.2.1 
  │     │ │ │ │ │ ├── escape-string-regexp@1.0.5 
  │     │ │ │ │ │ ├── has-ansi@2.0.0 
  │     │ │ │ │ │ └── supports-color@2.0.0 
  │     │ │ │ │ └── js-tokens@3.0.2 
  │     │ │ │ ├── globals@9.18.0 
  │     │ │ │ └─┬ invariant@2.2.2 
  │     │ │ │   └── loose-envify@1.3.1 
  │     │ │ ├─┬ babel-types@6.26.0 
  │     │ │ │ ├── esutils@2.0.2 
  │     │ │ │ └── to-fast-properties@1.0.3 
  │     │ │ ├── babylon@6.18.0 
  │     │ │ └── semver@5.4.1 
  │     │ ├─┬ istanbul-lib-report@1.1.1 
  │     │ │ ├── path-parse@1.0.5 
  │     │ │ └─┬ supports-color@3.2.3 
  │     │ │   └── has-flag@1.0.0 
  │     │ ├─┬ istanbul-lib-source-maps@1.2.1 
  │     │ │ ├─┬ debug@2.6.8 
  │     │ │ │ └── ms@2.0.0 
  │     │ │ └── source-map@0.5.7 
  │     │ ├─┬ istanbul-reports@1.1.2 
  │     │ │ └─┬ handlebars@4.0.10 
  │     │ │   ├── async@1.5.2 
  │     │ │   ├─┬ optimist@0.6.1 
  │     │ │   │ └── wordwrap@0.0.3 
  │     │ │   ├─┬ source-map@0.4.4 
  │     │ │   │ └── amdefine@1.0.1 
  │     │ │   └─┬ uglify-js@2.8.29 
  │     │ │     ├── uglify-to-browserify@1.0.2 
  │     │ │     └─┬ yargs@3.10.0 
  │     │ │       ├── camelcase@1.2.1 
  │     │ │       ├─┬ cliui@2.1.0 
  │     │ │       │ ├─┬ center-align@0.1.3 
  │     │ │       │ │ ├─┬ align-text@0.1.4 
  │     │ │       │ │ │ └── longest@1.0.1 
  │     │ │       │ │ └── lazy-cache@1.0.4 
  │     │ │       │ ├── right-align@0.1.3 
  │     │ │       │ └── wordwrap@0.0.2 
  │     │ │       └── window-size@0.1.0 
  │     │ ├─┬ md5-hex@1.3.0 
  │     │ │ └── md5-o-matic@0.1.1 
  │     │ ├── merge-source-map@1.0.4 
  │     │ ├─┬ micromatch@2.3.11 
  │     │ │ ├─┬ arr-diff@2.0.0 
  │     │ │ │ └── arr-flatten@1.1.0 
  │     │ │ ├── array-unique@0.2.1 
  │     │ │ ├─┬ braces@1.8.5 
  │     │ │ │ ├─┬ expand-range@1.8.2 
  │     │ │ │ │ └─┬ fill-range@2.2.3 
  │     │ │ │ │   ├── is-number@2.1.0 
  │     │ │ │ │   ├─┬ isobject@2.1.0 
  │     │ │ │ │   │ └── isarray@1.0.0 
  │     │ │ │ │   ├─┬ randomatic@1.1.7 
  │     │ │ │ │   │ ├─┬ is-number@3.0.0 
  │     │ │ │ │   │ │ └── kind-of@3.2.2 
  │     │ │ │ │   │ └── kind-of@4.0.0 
  │     │ │ │ │   └── repeat-string@1.6.1 
  │     │ │ │ ├── preserve@0.2.0 
  │     │ │ │ └── repeat-element@1.1.2 
  │     │ │ ├─┬ expand-brackets@0.1.5 
  │     │ │ │ └── is-posix-bracket@0.1.1 
  │     │ │ ├── extglob@0.3.2 
  │     │ │ ├── filename-regex@2.0.1 
  │     │ │ ├── is-extglob@1.0.0 
  │     │ │ ├── is-glob@2.0.1 
  │     │ │ ├─┬ kind-of@3.2.2 
  │     │ │ │ └── is-buffer@1.1.5 
  │     │ │ ├─┬ normalize-path@2.1.1 
  │     │ │ │ └── remove-trailing-separator@1.1.0 
  │     │ │ ├─┬ object.omit@2.0.1 
  │     │ │ │ ├─┬ for-own@0.1.5 
  │     │ │ │ │ └── for-in@1.0.2 
  │     │ │ │ └── is-extendable@0.1.1 
  │     │ │ ├─┬ parse-glob@3.0.4 
  │     │ │ │ ├─┬ glob-base@0.3.0 
  │     │ │ │ │ └── glob-parent@2.0.0 
  │     │ │ │ └── is-dotfile@1.0.3 
  │     │ │ └─┬ regex-cache@0.4.4 
  │     │ │   └─┬ is-equal-shallow@0.1.3 
  │     │ │     └── is-primitive@2.0.0 
  │     │ ├─┬ mkdirp@0.5.1 
  │     │ │ └── minimist@0.0.8 
  │     │ ├── resolve-from@2.0.0 
  │     │ ├── rimraf@2.6.1 
  │     │ ├── signal-exit@3.0.2 
  │     │ ├─┬ spawn-wrap@1.3.8 
  │     │ │ ├── os-homedir@1.0.2 
  │     │ │ └─┬ which@1.3.0 
  │     │ │   └── isexe@2.0.0 
  │     │ ├─┬ test-exclude@4.1.1 
  │     │ │ ├── object-assign@4.1.1 
  │     │ │ ├─┬ read-pkg-up@1.0.1 
  │     │ │ │ ├── find-up@1.1.2 
  │     │ │ │ └─┬ read-pkg@1.1.0 
  │     │ │ │   ├─┬ load-json-file@1.1.0 
  │     │ │ │   │ ├─┬ parse-json@2.2.0 
  │     │ │ │   │ │ └─┬ error-ex@1.3.1 
  │     │ │ │   │ │   └── is-arrayish@0.2.1 
  │     │ │ │   │ └── pify@2.3.0 
  │     │ │ │   ├─┬ normalize-package-data@2.4.0 
  │     │ │ │   │ ├── hosted-git-info@2.5.0 
  │     │ │ │   │ ├─┬ is-builtin-module@1.0.0 
  │     │ │ │   │ │ └── builtin-modules@1.1.1 
  │     │ │ │   │ └─┬ validate-npm-package-license@3.0.1 
  │     │ │ │   │   ├─┬ spdx-correct@1.0.2 
  │     │ │ │   │   │ └── spdx-license-ids@1.2.2 
  │     │ │ │   │   └── spdx-expression-parse@1.0.4 
  │     │ │ │   └── path-type@1.1.0 
  │     │ │ └── require-main-filename@1.0.1 
  │     │ ├─┬ yargs@8.0.2 
  │     │ │ ├── camelcase@4.1.0 
  │     │ │ ├─┬ cliui@3.2.0 
  │     │ │ │ ├─┬ string-width@1.0.2 
  │     │ │ │ │ ├── code-point-at@1.1.0 
  │     │ │ │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │     │ │ │ │   └── number-is-nan@1.0.1 
  │     │ │ │ ├─┬ strip-ansi@3.0.1 
  │     │ │ │ │ └── ansi-regex@2.1.1 
  │     │ │ │ └─┬ wrap-ansi@2.1.0 
  │     │ │ │   └── string-width@1.0.2 
  │     │ │ ├── decamelize@1.2.0 
  │     │ │ ├── get-caller-file@1.0.2 
  │     │ │ ├─┬ os-locale@2.1.0 
  │     │ │ │ ├─┬ execa@0.7.0 
  │     │ │ │ │ ├─┬ cross-spawn@5.1.0 
  │     │ │ │ │ │ └─┬ shebang-command@1.2.0 
  │     │ │ │ │ │   └── shebang-regex@1.0.0 
  │     │ │ │ │ ├── get-stream@3.0.0 
  │     │ │ │ │ ├── is-stream@1.1.0 
  │     │ │ │ │ ├─┬ npm-run-path@2.0.2 
  │     │ │ │ │ │ └── path-key@2.0.1 
  │     │ │ │ │ ├── p-finally@1.0.0 
  │     │ │ │ │ └── strip-eof@1.0.0 
  │     │ │ │ ├─┬ lcid@1.0.0 
  │     │ │ │ │ └── invert-kv@1.0.0 
  │     │ │ │ └─┬ mem@1.1.0 
  │     │ │ │   └── mimic-fn@1.1.0 
  │     │ │ ├─┬ read-pkg-up@2.0.0 
  │     │ │ │ └─┬ read-pkg@2.0.0 
  │     │ │ │   ├─┬ load-json-file@2.0.0 
  │     │ │ │   │ └── strip-bom@3.0.0 
  │     │ │ │   └── path-type@2.0.0 
  │     │ │ ├── require-directory@2.1.1 
  │     │ │ ├── set-blocking@2.0.0 
  │     │ │ ├─┬ string-width@2.1.1 
  │     │ │ │ ├── is-fullwidth-code-point@2.0.0 
  │     │ │ │ └─┬ strip-ansi@4.0.0 
  │     │ │ │   └── ansi-regex@3.0.0 
  │     │ │ ├── which-module@2.0.0 
  │     │ │ ├── y18n@3.2.1 
  │     │ │ └── yargs-parser@7.0.0 
  │     │ └─┬ yargs-parser@5.0.0 
  │     │   └── camelcase@3.0.0 
  │     ├── opener@1.4.3 
  │     ├── os-homedir@1.0.2 
  │     ├── own-or@1.0.0 
  │     ├── own-or-env@1.0.0 
  │     ├─┬ readable-stream@2.3.3 
  │     │ ├── isarray@1.0.0 
  │     │ ├── process-nextick-args@1.0.7 
  │     │ ├── string_decoder@1.0.3 
  │     │ └── util-deprecate@1.0.2 
  │     ├── signal-exit@3.0.2 
  │     ├─┬ source-map-support@0.4.18 
  │     │ └── source-map@0.5.7 
  │     ├── stack-utils@1.0.1 
  │     ├─┬ tap-mocha-reporter@3.0.6 
  │     │ ├─┬ debug@2.6.9 
  │     │ │ └── ms@2.0.0 
  │     │ ├── diff@1.4.0 
  │     │ ├── escape-string-regexp@1.0.5 
  │     │ ├─┬ glob@7.1.2 
  │     │ │ └── minimatch@3.0.4 
  │     │ ├─┬ js-yaml@3.10.0 
  │     │ │ ├── argparse@1.0.9 
  │     │ │ └── esprima@4.0.0 
  │     │ ├─┬ readable-stream@2.3.3 
  │     │ │ ├── isarray@1.0.0 
  │     │ │ └── string_decoder@1.0.3 
  │     │ └─┬ unicode-length@1.0.3 
  │     │   └─┬ strip-ansi@3.0.1 
  │     │     └── ansi-regex@2.1.1 
  │     ├─┬ tap-parser@5.4.0 
  │     │ ├── events-to-array@1.1.2 
  │     │ ├─┬ js-yaml@3.10.0 
  │     │ │ ├── argparse@1.0.9 
  │     │ │ └── esprima@4.0.0 
  │     │ └─┬ readable-stream@2.3.3 
  │     │   ├── isarray@1.0.0 
  │     │   └── string_decoder@1.0.3 
  │     ├── tmatch@3.1.0 
  │     ├── trivial-deferred@1.0.1 
  │     ├── tsame@1.1.2 
  │     └── yapool@1.0.0 
  ├─┬ jshint-stylish@0.1.5 
  │ ├─┬ chalk@0.4.0 
  │ │ ├── ansi-styles@1.0.0 
  │ │ ├── has-color@0.1.7 
  │ │ └── strip-ansi@0.1.1 
  │ └── text-table@0.2.0 
  ├─┬ load-grunt-tasks@0.3.0 
  │ └─┬ globule@0.2.0 
  │   ├─┬ glob@3.2.11 
  │   │ └── minimatch@0.3.0 
  │   └── lodash@2.4.2 
  └─┬ request@2.83.0 
    ├── aws-sign2@0.7.0 
    ├── aws4@1.6.0 
    ├── caseless@0.12.0 
    ├─┬ combined-stream@1.0.5 
    │ └── delayed-stream@1.0.0 
    ├── extend@3.0.1 
    ├── forever-agent@0.6.1 
    ├─┬ form-data@2.3.1 
    │ └── asynckit@0.4.0 
    ├─┬ har-validator@5.0.3 
    │ ├─┬ ajv@5.2.3 
    │ │ ├── co@4.6.0 
    │ │ ├── fast-deep-equal@1.0.0 
    │ │ ├── json-schema-traverse@0.3.1 
    │ │ └─┬ json-stable-stringify@1.0.1 
    │ │   └── jsonify@0.0.0 
    │ └── har-schema@2.0.0 
    ├─┬ hawk@6.0.2 
    │ ├── boom@4.3.1 
    │ ├─┬ cryptiles@3.1.2 
    │ │ └── boom@5.2.0 
    │ ├── hoek@4.2.0 
    │ └── sntp@2.0.2 
    ├─┬ http-signature@1.2.0 
    │ ├── assert-plus@1.0.0 
    │ ├─┬ jsprim@1.4.1 
    │ │ ├── assert-plus@1.0.0 
    │ │ ├── extsprintf@1.3.0 
    │ │ ├── json-schema@0.2.3 
    │ │ └─┬ verror@1.10.0 
    │ │   └── assert-plus@1.0.0 
    │ └─┬ sshpk@1.13.1 
    │   ├── asn1@0.2.3 
    │   ├── assert-plus@1.0.0 
    │   ├── bcrypt-pbkdf@1.0.1 
    │   ├─┬ dashdash@1.14.1 
    │   │ └── assert-plus@1.0.0 
    │   ├── ecc-jsbn@0.1.1 
    │   ├─┬ getpass@0.1.7 
    │   │ └── assert-plus@1.0.0 
    │   ├── jsbn@0.1.1 
    │   └── tweetnacl@0.14.5 
    ├── is-typedarray@1.0.0 
    ├── isstream@0.1.2 
    ├── json-stringify-safe@5.0.1 
    ├─┬ mime-types@2.1.17 
    │ └── mime-db@1.30.0 
    ├── oauth-sign@0.8.2 
    ├── performance-now@2.1.0 
    ├── qs@6.5.1 
    ├── safe-buffer@5.1.1 
    ├── stringstream@0.0.5 
    ├─┬ tough-cookie@2.3.3 
    │ └── punycode@1.4.1 
    ├── tunnel-agent@0.6.0 
    └── uuid@3.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/grunt-httpput-upload/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 35% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 35% coverage ] ****** [2 done /0 queued / 1 running / 1 errors / 28.000000000000004% coverage ] ****** [2 done /0 queued / 1 running / 1 errors / 28.000000000000004% coverage ] ****** [3 done /0 queued / 1 running / 2 errors / 28.000000000000004% coverage ] ****** [3 done /0 queued / 1 running / 2 errors / 28.000000000000004% coverage ] ****** [4 done /0 queued / 1 running / 3 errors / 28.000000000000004% coverage ] ****** [4 done /0 queued / 1 running / 3 errors / 28.000000000000004% coverage ] ****** [5 done /0 queued / 1 running / 4 errors / 28.000000000000004% coverage ] ****** [5 done /0 queued / 1 running / 4 errors / 28.000000000000004% coverage ] ****** [6 done /1 queued / 1 running / 5 errors / 28.999999999999996% coverage ] ****** [6 done /0 queued / 2 running / 5 errors / 28.999999999999996% coverage ] ****** [6 done /0 queued / 2 running / 5 errors / 28.999999999999996% coverage ] ****** [7 done /0 queued / 1 running / 6 errors / 28.999999999999996% coverage ] ****** [8 done /1 queued / 1 running / 7 errors / 28.999999999999996% coverage ] ****** [8 done /0 queued / 2 running / 7 errors / 28.999999999999996% coverage ] ****** [8 done /0 queued / 2 running / 7 errors / 28.999999999999996% coverage ] ****** [9 done /2 queued / 2 running / 8 errors / 28.999999999999996% coverage ] ****** [9 done /1 queued / 3 running / 8 errors / 28.999999999999996% coverage ] ****** [9 done /0 queued / 4 running / 8 errors / 28.999999999999996% coverage ] ****** [9 done /0 queued / 4 running / 8 errors / 28.999999999999996% coverage ] ****** [10 done /1 queued / 4 running / 9 errors / 28.999999999999996% coverage ] ****** [10 done /0 queued / 5 running / 9 errors / 28.999999999999996% coverage ] ****** [10 done /0 queued / 5 running / 9 errors / 28.999999999999996% coverage ] ****** [11 done /0 queued / 5 running / 10 errors / 28.999999999999996% coverage ] ****** [11 done /0 queued / 5 running / 10 errors / 28.999999999999996% coverage ] ****** [12 done /1 queued / 5 running / 11 errors / 28.999999999999996% coverage ] ****** [12 done /0 queued / 6 running / 11 errors / 28.999999999999996% coverage ] ****** [12 done /0 queued / 6 running / 11 errors / 28.999999999999996% coverage ] ****** [13 done /1 queued / 6 running / 12 errors / 28.999999999999996% coverage ] ****** [13 done /0 queued / 7 running / 12 errors / 28.999999999999996% coverage ] ****** [13 done /0 queued / 7 running / 12 errors / 28.999999999999996% coverage ] ****** [14 done /1 queued / 7 running / 13 errors / 28.999999999999996% coverage ] ****** [14 done /0 queued / 8 running / 13 errors / 28.999999999999996% coverage ] ****** [14 done /0 queued / 8 running / 13 errors / 28.999999999999996% coverage ] ****** [15 done /1 queued / 8 running / 14 errors / 28.999999999999996% coverage ] ****** [15 done /0 queued / 9 running / 14 errors / 28.999999999999996% coverage ] ****** [15 done /0 queued / 9 running / 14 errors / 28.999999999999996% coverage ] ****** [16 done /1 queued / 9 running / 15 errors / 28.999999999999996% coverage ] ****** [16 done /0 queued / 10 running / 15 errors / 28.999999999999996% coverage ] ****** [16 done /0 queued / 10 running / 15 errors / 28.999999999999996% coverage ] ****** [17 done /1 queued / 10 running / 16 errors / 28.999999999999996% coverage ] ****** [17 done /0 queued / 11 running / 16 errors / 28.999999999999996% coverage ] ****** [17 done /0 queued / 11 running / 16 errors / 28.999999999999996% coverage ] ****** [18 done /1 queued / 11 running / 17 errors / 28.999999999999996% coverage ] ****** [18 done /0 queued / 12 running / 17 errors / 28.999999999999996% coverage ] ****** [18 done /0 queued / 12 running / 17 errors / 28.999999999999996% coverage ] ****** [19 done /1 queued / 12 running / 18 errors / 28.999999999999996% coverage ] ****** [19 done /0 queued / 13 running / 18 errors / 28.999999999999996% coverage ] ****** [19 done /0 queued / 13 running / 18 errors / 28.999999999999996% coverage ] ****** [20 done /1 queued / 13 running / 19 errors / 28.999999999999996% coverage ] ****** [20 done /0 queued / 14 running / 19 errors / 28.999999999999996% coverage ] ****** [20 done /0 queued / 14 running / 19 errors / 28.999999999999996% coverage ] ****** [21 done /1 queued / 14 running / 20 errors / 28.999999999999996% coverage ] ****** [21 done /0 queued / 15 running / 20 errors / 28.999999999999996% coverage ] ****** [21 done /0 queued / 15 running / 20 errors / 28.999999999999996% coverage ] ****** [22 done /1 queued / 15 running / 21 errors / 28.999999999999996% coverage ] ****** [22 done /0 queued / 16 running / 21 errors / 28.999999999999996% coverage ] ****** [22 done /0 queued / 16 running / 21 errors / 28.999999999999996% coverage ] ****** [23 done /1 queued / 16 running / 22 errors / 28.999999999999996% coverage ] ****** [23 done /1 queued / 16 running / 22 errors / 28.999999999999996% coverage ] ****** [24 done /3 queued / 16 running / 23 errors / 28.999999999999996% coverage ] ****** [24 done /3 queued / 16 running / 23 errors / 28.999999999999996% coverage ] ****** [25 done /4 queued / 16 running / 24 errors / 28.999999999999996% coverage ] ****** [25 done /4 queued / 16 running / 24 errors / 28.999999999999996% coverage ] ****** [26 done /5 queued / 16 running / 25 errors / 28.999999999999996% coverage ] ****** [26 done /5 queued / 16 running / 25 errors / 28.999999999999996% coverage ] ****** [27 done /6 queued / 16 running / 26 errors / 28.999999999999996% coverage ] ****** [27 done /6 queued / 16 running / 26 errors / 28.999999999999996% coverage ] ****** [28 done /9 queued / 16 running / 27 errors / 28.999999999999996% coverage ] ****** [28 done /9 queued / 16 running / 27 errors / 28.999999999999996% coverage ] ****** [29 done /10 queued / 16 running / 28 errors / 28.999999999999996% coverage ] ****** [29 done /10 queued / 16 running / 28 errors / 28.999999999999996% coverage ] ****** [30 done /12 queued / 16 running / 29 errors / 28.999999999999996% coverage ] ****** [30 done /12 queued / 16 running / 29 errors / 28.999999999999996% coverage ] ****** [31 done /13 queued / 16 running / 30 errors / 28.999999999999996% coverage ] ****** [31 done /13 queued / 16 running / 30 errors / 28.999999999999996% coverage ] ****** [32 done /14 queued / 16 running / 31 errors / 28.999999999999996% coverage ] ****** [32 done /14 queued / 16 running / 31 errors / 28.999999999999996% coverage ] ****** [33 done /15 queued / 16 running / 32 errors / 28.999999999999996% coverage ] ****** [33 done /15 queued / 16 running / 32 errors / 28.999999999999996% coverage ] ****** [34 done /16 queued / 16 running / 33 errors / 28.999999999999996% coverage ] ****** [34 done /16 queued / 16 running / 33 errors / 28.999999999999996% coverage ] ****** [35 done /17 queued / 16 running / 34 errors / 28.999999999999996% coverage ] ****** [35 done /17 queued / 16 running / 34 errors / 28.999999999999996% coverage ] ****** [36 done /19 queued / 16 running / 35 errors / 28.999999999999996% coverage ] ****** [36 done /19 queued / 16 running / 35 errors / 28.999999999999996% coverage ] ****** [37 done /20 queued / 16 running / 36 errors / 28.999999999999996% coverage ] ****** [37 done /20 queued / 16 running / 36 errors / 28.999999999999996% coverage ] ****** [38 done /21 queued / 16 running / 37 errors / 28.999999999999996% coverage ] ****** [38 done /21 queued / 16 running / 37 errors / 28.999999999999996% coverage ] ****** [39 done /22 queued / 16 running / 38 errors / 28.999999999999996% coverage ] ****** [39 done /22 queued / 16 running / 38 errors / 28.999999999999996% coverage ] ****** [40 done /23 queued / 16 running / 39 errors / 28.999999999999996% coverage ] ****** [40 done /23 queued / 16 running / 39 errors / 28.999999999999996% coverage ] ****** [41 done /23 queued / 16 running / 40 errors / 28.999999999999996% coverage ] ****** [41 done /23 queued / 16 running / 40 errors / 28.999999999999996% coverage ] ****** [42 done /27 queued / 16 running / 41 errors / 28.999999999999996% coverage ] ****** [42 done /27 queued / 16 running / 41 errors / 28.999999999999996% coverage ] ****** [43 done /27 queued / 16 running / 42 errors / 28.999999999999996% coverage ] ****** [43 done /27 queued / 16 running / 42 errors / 28.999999999999996% coverage ] ****** [44 done /29 queued / 16 running / 43 errors / 28.999999999999996% coverage ] ****** [44 done /29 queued / 16 running / 43 errors / 28.999999999999996% coverage ] ****** [45 done /32 queued / 16 running / 44 errors / 28.999999999999996% coverage ] ****** [45 done /32 queued / 16 running / 44 errors / 28.999999999999996% coverage ] ****** [46 done /32 queued / 16 running / 45 errors / 28.999999999999996% coverage ] ****** [46 done /32 queued / 16 running / 45 errors / 28.999999999999996% coverage ] ****** [47 done /34 queued / 16 running / 46 errors / 28.999999999999996% coverage ] ****** [47 done /34 queued / 16 running / 46 errors / 28.999999999999996% coverage ] ****** [48 done /35 queued / 16 running / 47 errors / 28.999999999999996% coverage ] ****** [48 done /35 queued / 16 running / 47 errors / 28.999999999999996% coverage ] ****** [49 done /36 queued / 16 running / 48 errors / 28.999999999999996% coverage ] ****** [49 done /36 queued / 16 running / 48 errors / 28.999999999999996% coverage ] ****** [50 done /38 queued / 16 running / 49 errors / 28.999999999999996% coverage ] ****** [50 done /38 queued / 16 running / 49 errors / 28.999999999999996% coverage ] ****** [51 done /38 queued / 16 running / 50 errors / 28.999999999999996% coverage ] ****** [51 done /38 queued / 16 running / 50 errors / 28.999999999999996% coverage ] ****** [52 done /40 queued / 16 running / 51 errors / 28.999999999999996% coverage ] ****** [52 done /40 queued / 16 running / 51 errors / 28.999999999999996% coverage ] ****** [53 done /41 queued / 16 running / 52 errors / 28.999999999999996% coverage ] ****** [53 done /41 queued / 16 running / 52 errors / 28.999999999999996% coverage ] ****** [54 done /41 queued / 16 running / 53 errors / 28.999999999999996% coverage ] ****** [54 done /41 queued / 16 running / 53 errors / 28.999999999999996% coverage ] ****** [55 done /44 queued / 16 running / 54 errors / 28.999999999999996% coverage ] ****** [55 done /44 queued / 16 running / 54 errors / 28.999999999999996% coverage ] ****** [56 done /45 queued / 16 running / 55 errors / 28.999999999999996% coverage ] ****** [56 done /45 queued / 16 running / 55 errors / 28.999999999999996% coverage ] ****** [57 done /46 queued / 16 running / 56 errors / 28.999999999999996% coverage ] ****** [57 done /46 queued / 16 running / 56 errors / 28.999999999999996% coverage ] ****** [58 done /48 queued / 16 running / 57 errors / 28.999999999999996% coverage ] ****** [58 done /48 queued / 16 running / 57 errors / 28.999999999999996% coverage ] ****** [59 done /49 queued / 16 running / 58 errors / 28.999999999999996% coverage ] ****** [59 done /49 queued / 16 running / 58 errors / 28.999999999999996% coverage ] ****** [60 done /50 queued / 16 running / 59 errors / 28.999999999999996% coverage ] ****** [60 done /50 queued / 16 running / 59 errors / 28.999999999999996% coverage ] ****** [61 done /51 queued / 16 running / 60 errors / 28.999999999999996% coverage ] ****** [61 done /51 queued / 16 running / 60 errors / 28.999999999999996% coverage ] ****** [62 done /51 queued / 16 running / 61 errors / 28.999999999999996% coverage ] ****** [62 done /51 queued / 16 running / 61 errors / 28.999999999999996% coverage ] ****** [63 done /51 queued / 16 running / 62 errors / 28.999999999999996% coverage ] ****** [63 done /51 queued / 16 running / 62 errors / 28.999999999999996% coverage ] ****** [64 done /51 queued / 16 running / 63 errors / 28.999999999999996% coverage ] ****** [64 done /51 queued / 16 running / 63 errors / 28.999999999999996% coverage ] ****** [65 done /51 queued / 16 running / 64 errors / 28.999999999999996% coverage ] ****** [65 done /51 queued / 16 running / 64 errors / 28.999999999999996% coverage ] ****** [66 done /51 queued / 16 running / 65 errors / 28.999999999999996% coverage ] ****** [66 done /51 queued / 16 running / 65 errors / 28.999999999999996% coverage ] ****** [67 done /52 queued / 16 running / 66 errors / 28.999999999999996% coverage ] ****** [67 done /52 queued / 16 running / 66 errors / 28.999999999999996% coverage ] ****** [68 done /53 queued / 16 running / 67 errors / 28.999999999999996% coverage ] ****** [68 done /53 queued / 16 running / 67 errors / 28.999999999999996% coverage ] ****** [69 done /54 queued / 16 running / 68 errors / 28.999999999999996% coverage ] ****** [69 done /54 queued / 16 running / 68 errors / 28.999999999999996% coverage ] ****** [70 done /55 queued / 16 running / 69 errors / 28.999999999999996% coverage ] ****** [70 done /55 queued / 16 running / 69 errors / 28.999999999999996% coverage ] ****** [71 done /55 queued / 16 running / 70 errors / 28.999999999999996% coverage ] ****** [71 done /55 queued / 16 running / 70 errors / 28.999999999999996% coverage ] ****** [72 done /55 queued / 16 running / 71 errors / 28.999999999999996% coverage ] ****** [72 done /55 queued / 16 running / 71 errors / 28.999999999999996% coverage ] ****** [73 done /55 queued / 16 running / 72 errors / 28.999999999999996% coverage ] ****** [73 done /55 queued / 16 running / 72 errors / 28.999999999999996% coverage ] ****** [74 done /56 queued / 16 running / 73 errors / 28.999999999999996% coverage ] ****** [74 done /56 queued / 16 running / 73 errors / 28.999999999999996% coverage ] ****** [75 done /57 queued / 16 running / 74 errors / 28.999999999999996% coverage ] ****** [75 done /57 queued / 16 running / 74 errors / 28.999999999999996% coverage ] ****** [76 done /58 queued / 16 running / 75 errors / 28.999999999999996% coverage ] ****** [76 done /58 queued / 16 running / 75 errors / 28.999999999999996% coverage ] ****** [77 done /58 queued / 16 running / 76 errors / 28.999999999999996% coverage ] ****** [77 done /58 queued / 16 running / 76 errors / 28.999999999999996% coverage ] ****** [78 done /58 queued / 16 running / 77 errors / 28.999999999999996% coverage ] ****** [78 done /58 queued / 16 running / 77 errors / 28.999999999999996% coverage ] ****** [79 done /58 queued / 16 running / 78 errors / 28.999999999999996% coverage ] ****** [79 done /58 queued / 16 running / 78 errors / 28.999999999999996% coverage ] ****** [80 done /58 queued / 16 running / 79 errors / 28.999999999999996% coverage ] ****** [80 done /58 queued / 16 running / 79 errors / 28.999999999999996% coverage ] ****** [81 done /59 queued / 16 running / 80 errors / 28.999999999999996% coverage ] ****** [81 done /59 queued / 16 running / 80 errors / 28.999999999999996% coverage ] ****** [82 done /60 queued / 16 running / 81 errors / 28.999999999999996% coverage ] ****** [82 done /60 queued / 16 running / 81 errors / 28.999999999999996% coverage ] ****** [83 done /64 queued / 16 running / 82 errors / 28.999999999999996% coverage ] ****** [83 done /64 queued / 16 running / 82 errors / 28.999999999999996% coverage ] ****** [84 done /65 queued / 16 running / 83 errors / 28.999999999999996% coverage ] ****** [84 done /65 queued / 16 running / 83 errors / 28.999999999999996% coverage ] ****** [85 done /66 queued / 16 running / 84 errors / 28.999999999999996% coverage ] ****** [85 done /66 queued / 16 running / 84 errors / 28.999999999999996% coverage ] ****** [86 done /67 queued / 16 running / 85 errors / 28.999999999999996% coverage ] ****** [86 done /67 queued / 16 running / 85 errors / 28.999999999999996% coverage ] ****** [87 done /69 queued / 16 running / 86 errors / 28.999999999999996% coverage ] ****** [87 done /69 queued / 16 running / 86 errors / 28.999999999999996% coverage ] ****** [88 done /70 queued / 16 running / 87 errors / 28.999999999999996% coverage ] ****** [88 done /70 queued / 16 running / 87 errors / 28.999999999999996% coverage ] ****** [89 done /71 queued / 16 running / 88 errors / 28.999999999999996% coverage ] ****** [89 done /71 queued / 16 running / 88 errors / 28.999999999999996% coverage ] ****** [90 done /72 queued / 16 running / 89 errors / 28.999999999999996% coverage ] ****** [90 done /72 queued / 16 running / 89 errors / 28.999999999999996% coverage ] ****** [91 done /73 queued / 16 running / 90 errors / 28.999999999999996% coverage ] ****** [91 done /73 queued / 16 running / 90 errors / 28.999999999999996% coverage ] ****** [92 done /74 queued / 16 running / 91 errors / 28.999999999999996% coverage ] ****** [92 done /74 queued / 16 running / 91 errors / 28.999999999999996% coverage ] ****** [93 done /75 queued / 16 running / 92 errors / 28.999999999999996% coverage ] ****** [93 done /75 queued / 16 running / 92 errors / 28.999999999999996% coverage ] ****** [94 done /76 queued / 16 running / 93 errors / 28.999999999999996% coverage ] ****** [94 done /76 queued / 16 running / 93 errors / 28.999999999999996% coverage ] ****** [95 done /77 queued / 16 running / 94 errors / 28.999999999999996% coverage ] ****** [95 done /77 queued / 16 running / 94 errors / 28.999999999999996% coverage ] ****** [96 done /78 queued / 16 running / 95 errors / 28.999999999999996% coverage ] ****** [96 done /78 queued / 16 running / 95 errors / 28.999999999999996% coverage ] ****** [97 done /79 queued / 16 running / 96 errors / 28.999999999999996% coverage ] ****** [97 done /79 queued / 16 running / 96 errors / 28.999999999999996% coverage ] ****** [98 done /80 queued / 16 running / 97 errors / 28.999999999999996% coverage ] ****** [98 done /80 queued / 16 running / 97 errors / 28.999999999999996% coverage ] ****** [99 done /80 queued / 16 running / 98 errors / 28.999999999999996% coverage ] ****** [99 done /80 queued / 16 running / 98 errors / 28.999999999999996% coverage ] ****** [100 done /81 queued / 16 running / 99 errors / 28.999999999999996% coverage ] ****** [100 done /81 queued / 16 running / 99 errors / 28.999999999999996% coverage ] ****** [101 done /81 queued / 16 running / 100 errors / 28.999999999999996% coverage ] ****** [101 done /81 queued / 16 running / 100 errors / 28.999999999999996% coverage ] ****** [102 done /82 queued / 16 running / 101 errors / 28.999999999999996% coverage ] ****** [102 done /82 queued / 16 running / 101 errors / 28.999999999999996% coverage ] ****** [103 done /84 queued / 16 running / 102 errors / 28.999999999999996% coverage ] ****** [103 done /84 queued / 16 running / 102 errors / 28.999999999999996% coverage ] ****** [104 done /86 queued / 16 running / 103 errors / 28.999999999999996% coverage ] ****** [104 done /86 queued / 16 running / 103 errors / 28.999999999999996% coverage ] ****** [105 done /88 queued / 16 running / 104 errors / 28.999999999999996% coverage ] ****** [105 done /88 queued / 16 running / 104 errors / 28.999999999999996% coverage ] ****** [106 done /88 queued / 16 running / 105 errors / 28.999999999999996% coverage ] ****** [106 done /88 queued / 16 running / 105 errors / 28.999999999999996% coverage ] ****** [107 done /89 queued / 16 running / 106 errors / 28.999999999999996% coverage ] ****** [107 done /89 queued / 16 running / 106 errors / 28.999999999999996% coverage ] ****** [108 done /90 queued / 16 running / 107 errors / 28.999999999999996% coverage ] ****** [108 done /90 queued / 16 running / 107 errors / 28.999999999999996% coverage ] ****** [109 done /92 queued / 16 running / 108 errors / 28.999999999999996% coverage ] ****** [109 done /92 queued / 16 running / 108 errors / 28.999999999999996% coverage ] ****** [110 done /95 queued / 16 running / 109 errors / 28.999999999999996% coverage ] ****** [110 done /95 queued / 16 running / 109 errors / 28.999999999999996% coverage ] ****** [111 done /96 queued / 16 running / 110 errors / 28.999999999999996% coverage ] ****** [111 done /96 queued / 16 running / 110 errors / 28.999999999999996% coverage ] ****** [112 done /100 queued / 16 running / 111 errors / 28.999999999999996% coverage ] ****** [112 done /100 queued / 16 running / 111 errors / 28.999999999999996% coverage ] ****** [113 done /102 queued / 16 running / 112 errors / 28.999999999999996% coverage ] ****** [113 done /102 queued / 16 running / 112 errors / 28.999999999999996% coverage ] ****** [114 done /104 queued / 16 running / 113 errors / 28.999999999999996% coverage ] ****** [114 done /104 queued / 16 running / 113 errors / 28.999999999999996% coverage ] ****** [115 done /107 queued / 16 running / 114 errors / 28.999999999999996% coverage ] ****** [115 done /107 queued / 16 running / 114 errors / 28.999999999999996% coverage ] ****** [116 done /108 queued / 16 running / 115 errors / 28.999999999999996% coverage ] ****** [116 done /108 queued / 16 running / 115 errors / 28.999999999999996% coverage ] ****** [117 done /109 queued / 16 running / 116 errors / 28.999999999999996% coverage ] ****** [117 done /109 queued / 16 running / 116 errors / 28.999999999999996% coverage ] ****** [118 done /110 queued / 16 running / 117 errors / 28.999999999999996% coverage ] ****** [118 done /110 queued / 16 running / 117 errors / 28.999999999999996% coverage ] ****** [119 done /111 queued / 16 running / 118 errors / 28.999999999999996% coverage ] ****** [119 done /111 queued / 16 running / 118 errors / 28.999999999999996% coverage ] ****** [120 done /113 queued / 16 running / 119 errors / 28.999999999999996% coverage ] ****** [120 done /113 queued / 16 running / 119 errors / 28.999999999999996% coverage ] ****** [121 done /115 queued / 16 running / 120 errors / 28.999999999999996% coverage ] ****** [121 done /115 queued / 16 running / 120 errors / 28.999999999999996% coverage ] ****** [122 done /115 queued / 16 running / 121 errors / 28.999999999999996% coverage ] ****** [122 done /115 queued / 16 running / 121 errors / 28.999999999999996% coverage ] ****** [123 done /115 queued / 16 running / 122 errors / 28.999999999999996% coverage ] ****** [123 done /115 queued / 16 running / 122 errors / 28.999999999999996% coverage ] ****** [124 done /116 queued / 16 running / 123 errors / 28.999999999999996% coverage ] ****** [124 done /116 queued / 16 running / 123 errors / 28.999999999999996% coverage ] ****** [125 done /116 queued / 16 running / 124 errors / 28.999999999999996% coverage ] ****** [125 done /116 queued / 16 running / 124 errors / 28.999999999999996% coverage ] ****** [126 done /116 queued / 16 running / 125 errors / 28.999999999999996% coverage ] ****** [126 done /116 queued / 16 running / 125 errors / 28.999999999999996% coverage ] ****** [127 done /117 queued / 16 running / 126 errors / 28.999999999999996% coverage ] ****** [127 done /117 queued / 16 running / 126 errors / 28.999999999999996% coverage ] ****** [128 done /118 queued / 16 running / 127 errors / 28.999999999999996% coverage ] ****** [128 done /118 queued / 16 running / 127 errors / 28.999999999999996% coverage ] ****** [129 done /118 queued / 16 running / 128 errors / 28.999999999999996% coverage ] ****** [129 done /118 queued / 16 running / 128 errors / 28.999999999999996% coverage ] ****** [130 done /119 queued / 16 running / 129 errors / 28.999999999999996% coverage ] ****** [130 done /119 queued / 16 running / 129 errors / 28.999999999999996% coverage ] ****** [131 done /120 queued / 16 running / 130 errors / 28.999999999999996% coverage ] ****** [131 done /120 queued / 16 running / 130 errors / 28.999999999999996% coverage ] ****** [132 done /121 queued / 16 running / 131 errors / 28.999999999999996% coverage ] ****** [132 done /121 queued / 16 running / 131 errors / 28.999999999999996% coverage ] ****** [133 done /122 queued / 16 running / 132 errors / 28.999999999999996% coverage ] ****** [133 done /122 queued / 16 running / 132 errors / 28.999999999999996% coverage ] ****** [134 done /122 queued / 16 running / 133 errors / 28.999999999999996% coverage ] ****** [134 done /122 queued / 16 running / 133 errors / 28.999999999999996% coverage ] ****** [135 done /122 queued / 16 running / 134 errors / 28.999999999999996% coverage ] ****** [135 done /122 queued / 16 running / 134 errors / 28.999999999999996% coverage ] ****** [136 done /123 queued / 16 running / 135 errors / 28.999999999999996% coverage ] ****** [136 done /123 queued / 16 running / 135 errors / 28.999999999999996% coverage ] ****** [137 done /124 queued / 16 running / 136 errors / 28.999999999999996% coverage ] ****** [137 done /124 queued / 16 running / 136 errors / 28.999999999999996% coverage ] ****** [138 done /124 queued / 16 running / 137 errors / 28.999999999999996% coverage ] ****** [138 done /124 queued / 16 running / 137 errors / 28.999999999999996% coverage ] ****** [139 done /125 queued / 16 running / 138 errors / 28.999999999999996% coverage ] ****** [139 done /125 queued / 16 running / 138 errors / 28.999999999999996% coverage ] ****** [140 done /125 queued / 16 running / 139 errors / 28.999999999999996% coverage ] ****** [140 done /125 queued / 16 running / 139 errors / 28.999999999999996% coverage ] ****** [141 done /127 queued / 16 running / 140 errors / 28.999999999999996% coverage ] ****** [141 done /127 queued / 16 running / 140 errors / 28.999999999999996% coverage ] ****** [142 done /129 queued / 16 running / 141 errors / 28.999999999999996% coverage ] ****** [142 done /129 queued / 16 running / 141 errors / 28.999999999999996% coverage ] ****** [143 done /130 queued / 16 running / 142 errors / 28.999999999999996% coverage ] ****** [143 done /130 queued / 16 running / 142 errors / 28.999999999999996% coverage ] ****** [144 done /132 queued / 16 running / 143 errors / 28.999999999999996% coverage ] ****** [144 done /132 queued / 16 running / 143 errors / 28.999999999999996% coverage ] ****** [145 done /133 queued / 16 running / 144 errors / 28.999999999999996% coverage ] ****** [145 done /133 queued / 16 running / 144 errors / 28.999999999999996% coverage ] ****** [146 done /133 queued / 16 running / 145 errors / 28.999999999999996% coverage ] ****** [146 done /133 queued / 16 running / 145 errors / 28.999999999999996% coverage ] ****** [147 done /136 queued / 16 running / 146 errors / 28.999999999999996% coverage ] ****** [147 done /136 queued / 16 running / 146 errors / 28.999999999999996% coverage ] ****** [148 done /137 queued / 16 running / 147 errors / 28.999999999999996% coverage ] ****** [148 done /137 queued / 16 running / 147 errors / 28.999999999999996% coverage ] ****** [149 done /138 queued / 16 running / 148 errors / 28.999999999999996% coverage ] ****** [149 done /138 queued / 16 running / 148 errors / 28.999999999999996% coverage ] ****** [150 done /139 queued / 16 running / 149 errors / 28.999999999999996% coverage ] ****** [150 done /139 queued / 16 running / 149 errors / 28.999999999999996% coverage ] ****** [151 done /139 queued / 16 running / 150 errors / 28.999999999999996% coverage ] ****** [151 done /139 queued / 16 running / 150 errors / 28.999999999999996% coverage ] ****** [152 done /139 queued / 16 running / 151 errors / 28.999999999999996% coverage ] ****** [152 done /139 queued / 16 running / 151 errors / 28.999999999999996% coverage ] ****** [153 done /140 queued / 16 running / 152 errors / 28.999999999999996% coverage ] ****** [153 done /140 queued / 16 running / 152 errors / 28.999999999999996% coverage ] ****** [154 done /141 queued / 16 running / 153 errors / 28.999999999999996% coverage ] ****** [154 done /141 queued / 16 running / 153 errors / 28.999999999999996% coverage ] ****** [155 done /142 queued / 16 running / 154 errors / 28.999999999999996% coverage ] ****** [155 done /142 queued / 16 running / 154 errors / 28.999999999999996% coverage ] ****** [156 done /143 queued / 16 running / 155 errors / 28.999999999999996% coverage ] ****** [156 done /143 queued / 16 running / 155 errors / 28.999999999999996% coverage ] ****** [157 done /144 queued / 16 running / 156 errors / 28.999999999999996% coverage ] ****** [157 done /144 queued / 16 running / 156 errors / 28.999999999999996% coverage ] ****** [158 done /144 queued / 16 running / 157 errors / 28.999999999999996% coverage ] ****** [158 done /144 queued / 16 running / 157 errors / 28.999999999999996% coverage ] ****** [159 done /146 queued / 16 running / 158 errors / 28.999999999999996% coverage ] ****** [159 done /146 queued / 16 running / 158 errors / 28.999999999999996% coverage ] ****** [160 done /147 queued / 16 running / 159 errors / 28.999999999999996% coverage ] ****** [160 done /147 queued / 16 running / 159 errors / 28.999999999999996% coverage ] ****** [161 done /147 queued / 16 running / 160 errors / 28.999999999999996% coverage ] ****** [161 done /147 queued / 16 running / 160 errors / 28.999999999999996% coverage ] ****** [162 done /147 queued / 16 running / 161 errors / 28.999999999999996% coverage ] ****** [162 done /147 queued / 16 running / 161 errors / 28.999999999999996% coverage ] ****** [163 done /148 queued / 16 running / 162 errors / 28.999999999999996% coverage ] ****** [163 done /148 queued / 16 running / 162 errors / 28.999999999999996% coverage ] ****** [164 done /149 queued / 16 running / 163 errors / 28.999999999999996% coverage ] ****** [164 done /149 queued / 16 running / 163 errors / 28.999999999999996% coverage ] ****** [165 done /150 queued / 16 running / 164 errors / 28.999999999999996% coverage ] ****** [165 done /150 queued / 16 running / 164 errors / 28.999999999999996% coverage ] ****** [166 done /151 queued / 16 running / 165 errors / 28.999999999999996% coverage ] ****** [166 done /151 queued / 16 running / 165 errors / 28.999999999999996% coverage ] ****** [167 done /151 queued / 16 running / 166 errors / 28.999999999999996% coverage ] ****** [167 done /151 queued / 16 running / 166 errors / 28.999999999999996% coverage ] ****** [168 done /152 queued / 16 running / 167 errors / 28.999999999999996% coverage ] ****** [168 done /152 queued / 16 running / 167 errors / 28.999999999999996% coverage ] ****** [169 done /153 queued / 16 running / 168 errors / 28.999999999999996% coverage ] ****** [169 done /153 queued / 16 running / 168 errors / 28.999999999999996% coverage ] ****** [170 done /154 queued / 16 running / 169 errors / 28.999999999999996% coverage ] ****** [170 done /154 queued / 16 running / 169 errors / 28.999999999999996% coverage ] ****** [171 done /155 queued / 16 running / 170 errors / 28.999999999999996% coverage ] ****** [171 done /155 queued / 16 running / 170 errors / 28.999999999999996% coverage ] ****** [172 done /156 queued / 16 running / 171 errors / 28.999999999999996% coverage ] ****** [172 done /156 queued / 16 running / 171 errors / 28.999999999999996% coverage ] ****** [173 done /159 queued / 16 running / 172 errors / 28.999999999999996% coverage ] ****** [173 done /159 queued / 16 running / 172 errors / 28.999999999999996% coverage ] ****** [174 done /160 queued / 16 running / 173 errors / 28.999999999999996% coverage ] ****** [174 done /160 queued / 16 running / 173 errors / 28.999999999999996% coverage ] ****** [175 done /161 queued / 16 running / 174 errors / 28.999999999999996% coverage ] ****** [175 done /161 queued / 16 running / 174 errors / 28.999999999999996% coverage ] ****** [176 done /162 queued / 16 running / 175 errors / 28.999999999999996% coverage ] ****** [176 done /162 queued / 16 running / 175 errors / 28.999999999999996% coverage ] ****** [177 done /163 queued / 16 running / 176 errors / 28.999999999999996% coverage ] ****** [177 done /163 queued / 16 running / 176 errors / 28.999999999999996% coverage ] ****** [178 done /164 queued / 16 running / 177 errors / 28.999999999999996% coverage ] ****** [178 done /164 queued / 16 running / 177 errors / 28.999999999999996% coverage ] ****** [179 done /165 queued / 16 running / 178 errors / 28.999999999999996% coverage ] ****** [179 done /165 queued / 16 running / 178 errors / 28.999999999999996% coverage ] ****** [180 done /166 queued / 16 running / 179 errors / 28.999999999999996% coverage ] ****** [180 done /166 queued / 16 running / 179 errors / 28.999999999999996% coverage ] ****** [181 done /168 queued / 16 running / 180 errors / 28.999999999999996% coverage ] ****** [181 done /168 queued / 16 running / 180 errors / 28.999999999999996% coverage ] ****** [182 done /169 queued / 16 running / 181 errors / 28.999999999999996% coverage ] ****** [182 done /169 queued / 16 running / 181 errors / 28.999999999999996% coverage ] ****** [183 done /169 queued / 16 running / 182 errors / 28.999999999999996% coverage ] ****** [183 done /169 queued / 16 running / 182 errors / 28.999999999999996% coverage ] ****** [184 done /170 queued / 16 running / 183 errors / 28.999999999999996% coverage ] ****** [184 done /170 queued / 16 running / 183 errors / 28.999999999999996% coverage ] ****** [185 done /172 queued / 16 running / 184 errors / 28.999999999999996% coverage ] ****** [185 done /172 queued / 16 running / 184 errors / 28.999999999999996% coverage ] ****** [186 done /176 queued / 16 running / 185 errors / 28.999999999999996% coverage ] ****** [186 done /176 queued / 16 running / 185 errors / 28.999999999999996% coverage ] ****** [187 done /177 queued / 16 running / 186 errors / 28.999999999999996% coverage ] ****** [187 done /177 queued / 16 running / 186 errors / 28.999999999999996% coverage ] ****** [188 done /178 queued / 16 running / 187 errors / 28.999999999999996% coverage ] ****** [188 done /178 queued / 16 running / 187 errors / 28.999999999999996% coverage ] ****** [189 done /178 queued / 16 running / 188 errors / 28.999999999999996% coverage ] ****** [189 done /178 queued / 16 running / 188 errors / 28.999999999999996% coverage ] ****** [190 done /182 queued / 16 running / 189 errors / 28.999999999999996% coverage ] ****** [190 done /182 queued / 16 running / 189 errors / 28.999999999999996% coverage ] ****** [191 done /185 queued / 16 running / 190 errors / 28.999999999999996% coverage ] ****** [191 done /185 queued / 16 running / 190 errors / 28.999999999999996% coverage ] ****** [192 done /186 queued / 16 running / 191 errors / 28.999999999999996% coverage ] ****** [192 done /186 queued / 16 running / 191 errors / 28.999999999999996% coverage ] ****** [193 done /188 queued / 16 running / 192 errors / 28.999999999999996% coverage ] ****** [193 done /188 queued / 16 running / 192 errors / 28.999999999999996% coverage ] ****** [194 done /189 queued / 16 running / 193 errors / 28.999999999999996% coverage ] ****** [194 done /189 queued / 16 running / 193 errors / 28.999999999999996% coverage ] ****** [195 done /191 queued / 16 running / 194 errors / 28.999999999999996% coverage ] ****** [195 done /191 queued / 16 running / 194 errors / 28.999999999999996% coverage ] ****** [196 done /192 queued / 16 running / 195 errors / 28.999999999999996% coverage ] ****** [196 done /192 queued / 16 running / 195 errors / 28.999999999999996% coverage ] ****** [197 done /194 queued / 16 running / 196 errors / 28.999999999999996% coverage ] ****** [197 done /194 queued / 16 running / 196 errors / 28.999999999999996% coverage ] ****** [198 done /195 queued / 16 running / 197 errors / 28.999999999999996% coverage ] ****** [198 done /195 queued / 16 running / 197 errors / 28.999999999999996% coverage ] ****** [199 done /195 queued / 16 running / 198 errors / 28.999999999999996% coverage ] ****** [199 done /195 queued / 16 running / 198 errors / 28.999999999999996% coverage ] ****** [200 done /199 queued / 16 running / 199 errors / 28.999999999999996% coverage ] ****** [200 done /199 queued / 16 running / 199 errors / 28.999999999999996% coverage ] ****** [201 done /200 queued / 16 running / 200 errors / 28.999999999999996% coverage ] ****** [201 done /200 queued / 16 running / 200 errors / 28.999999999999996% coverage ] ****** [202 done /200 queued / 16 running / 201 errors / 28.999999999999996% coverage ] ****** [202 done /200 queued / 16 running / 201 errors / 28.999999999999996% coverage ] ****** [203 done /201 queued / 16 running / 202 errors / 28.999999999999996% coverage ] ****** [203 done /201 queued / 16 running / 202 errors / 28.999999999999996% coverage ] ****** [204 done /201 queued / 16 running / 203 errors / 28.999999999999996% coverage ] ****** [204 done /201 queued / 16 running / 203 errors / 28.999999999999996% coverage ] ****** [205 done /201 queued / 16 running / 204 errors / 28.999999999999996% coverage ] ****** [205 done /201 queued / 16 running / 204 errors / 28.999999999999996% coverage ] ****** [206 done /201 queued / 16 running / 205 errors / 28.999999999999996% coverage ] ****** [206 done /201 queued / 16 running / 205 errors / 28.999999999999996% coverage ] ****** [207 done /202 queued / 16 running / 206 errors / 28.999999999999996% coverage ] ****** [207 done /202 queued / 16 running / 206 errors / 28.999999999999996% coverage ] ****** [208 done /203 queued / 16 running / 207 errors / 28.999999999999996% coverage ] ****** [208 done /203 queued / 16 running / 207 errors / 28.999999999999996% coverage ] ****** [209 done /203 queued / 16 running / 208 errors / 28.999999999999996% coverage ] ****** [209 done /203 queued / 16 running / 208 errors / 28.999999999999996% coverage ] ****** [210 done /203 queued / 16 running / 209 errors / 28.999999999999996% coverage ] ****** [210 done /203 queued / 16 running / 209 errors / 28.999999999999996% coverage ] ****** [211 done /204 queued / 16 running / 210 errors / 28.999999999999996% coverage ] ****** [211 done /204 queued / 16 running / 210 errors / 28.999999999999996% coverage ] ****** [212 done /205 queued / 16 running / 211 errors / 28.999999999999996% coverage ] ****** [212 done /205 queued / 16 running / 211 errors / 28.999999999999996% coverage ] ****** [213 done /206 queued / 16 running / 212 errors / 28.999999999999996% coverage ] ****** [213 done /206 queued / 16 running / 212 errors / 28.999999999999996% coverage ] ****** [214 done /206 queued / 16 running / 213 errors / 28.999999999999996% coverage ] ****** [214 done /206 queued / 16 running / 213 errors / 28.999999999999996% coverage ] ****** [215 done /206 queued / 16 running / 214 errors / 28.999999999999996% coverage ] ****** [215 done /206 queued / 16 running / 214 errors / 28.999999999999996% coverage ] ****** [216 done /207 queued / 16 running / 215 errors / 28.999999999999996% coverage ] ****** [216 done /207 queued / 16 running / 215 errors / 28.999999999999996% coverage ] ****** [217 done /208 queued / 16 running / 216 errors / 28.999999999999996% coverage ] ****** [217 done /208 queued / 16 running / 216 errors / 28.999999999999996% coverage ] ****** [218 done /209 queued / 16 running / 217 errors / 28.999999999999996% coverage ] ****** [218 done /209 queued / 16 running / 217 errors / 28.999999999999996% coverage ] ****** [219 done /209 queued / 16 running / 218 errors / 28.999999999999996% coverage ] ****** [219 done /209 queued / 16 running / 218 errors / 28.999999999999996% coverage ] ****** [220 done /211 queued / 16 running / 219 errors / 28.999999999999996% coverage ] ****** [220 done /211 queued / 16 running / 219 errors / 28.999999999999996% coverage ] ****** [221 done /211 queued / 16 running / 220 errors / 28.999999999999996% coverage ] ****** [221 done /211 queued / 16 running / 220 errors / 28.999999999999996% coverage ] ****** [222 done /211 queued / 16 running / 221 errors / 28.999999999999996% coverage ] ****** [222 done /211 queued / 16 running / 221 errors / 28.999999999999996% coverage ] ****** [223 done /211 queued / 16 running / 222 errors / 28.999999999999996% coverage ] ****** [223 done /211 queued / 16 running / 222 errors / 28.999999999999996% coverage ] ****** [224 done /214 queued / 16 running / 223 errors / 28.999999999999996% coverage ] ****** [224 done /214 queued / 16 running / 223 errors / 28.999999999999996% coverage ] ****** [225 done /215 queued / 16 running / 224 errors / 28.999999999999996% coverage ] ****** [225 done /215 queued / 16 running / 224 errors / 28.999999999999996% coverage ] ****** [226 done /215 queued / 16 running / 225 errors / 28.999999999999996% coverage ] ****** [226 done /215 queued / 16 running / 225 errors / 28.999999999999996% coverage ] ****** [227 done /218 queued / 16 running / 226 errors / 28.999999999999996% coverage ] ****** [227 done /218 queued / 16 running / 226 errors / 28.999999999999996% coverage ] ****** [228 done /219 queued / 16 running / 227 errors / 28.999999999999996% coverage ] ****** [228 done /219 queued / 16 running / 227 errors / 28.999999999999996% coverage ] ****** [229 done /220 queued / 16 running / 228 errors / 28.999999999999996% coverage ] ****** [229 done /220 queued / 16 running / 228 errors / 28.999999999999996% coverage ] ****** [230 done /220 queued / 16 running / 229 errors / 28.999999999999996% coverage ] ****** [230 done /220 queued / 16 running / 229 errors / 28.999999999999996% coverage ] ****** [231 done /221 queued / 16 running / 230 errors / 28.999999999999996% coverage ] ****** [231 done /221 queued / 16 running / 230 errors / 28.999999999999996% coverage ] ****** [232 done /222 queued / 16 running / 231 errors / 28.999999999999996% coverage ] ****** [232 done /222 queued / 16 running / 231 errors / 28.999999999999996% coverage ] ****** [233 done /223 queued / 16 running / 232 errors / 28.999999999999996% coverage ] ****** [233 done /223 queued / 16 running / 232 errors / 28.999999999999996% coverage ] ****** [234 done /223 queued / 16 running / 233 errors / 28.999999999999996% coverage ] ****** [234 done /223 queued / 16 running / 233 errors / 28.999999999999996% coverage ] ****** [235 done /226 queued / 16 running / 234 errors / 28.999999999999996% coverage ] ****** [235 done /226 queued / 16 running / 234 errors / 28.999999999999996% coverage ] ****** [236 done /230 queued / 16 running / 235 errors / 28.999999999999996% coverage ] ****** [236 done /230 queued / 16 running / 235 errors / 28.999999999999996% coverage ] ****** [237 done /231 queued / 16 running / 236 errors / 28.999999999999996% coverage ] ****** [237 done /231 queued / 16 running / 236 errors / 28.999999999999996% coverage ] ****** [238 done /232 queued / 16 running / 237 errors / 28.999999999999996% coverage ] ****** [238 done /232 queued / 16 running / 237 errors / 28.999999999999996% coverage ] ****** [239 done /232 queued / 16 running / 238 errors / 28.999999999999996% coverage ] ****** [239 done /232 queued / 16 running / 238 errors / 28.999999999999996% coverage ] ****** [240 done /233 queued / 16 running / 239 errors / 28.999999999999996% coverage ] ****** [240 done /233 queued / 16 running / 239 errors / 28.999999999999996% coverage ] ****** [241 done /233 queued / 16 running / 240 errors / 28.999999999999996% coverage ] ****** [241 done /233 queued / 16 running / 240 errors / 28.999999999999996% coverage ] ****** [242 done /233 queued / 16 running / 241 errors / 28.999999999999996% coverage ] ****** [242 done /233 queued / 16 running / 241 errors / 28.999999999999996% coverage ] ****** [243 done /233 queued / 16 running / 242 errors / 28.999999999999996% coverage ] ****** [243 done /233 queued / 16 running / 242 errors / 28.999999999999996% coverage ] ****** [244 done /234 queued / 16 running / 243 errors / 28.999999999999996% coverage ] ****** [244 done /234 queued / 16 running / 243 errors / 28.999999999999996% coverage ] ****** [245 done /235 queued / 16 running / 244 errors / 28.999999999999996% coverage ] ****** [245 done /235 queued / 16 running / 244 errors / 28.999999999999996% coverage ] ****** [246 done /235 queued / 16 running / 245 errors / 28.999999999999996% coverage ] ****** [246 done /235 queued / 16 running / 245 errors / 28.999999999999996% coverage ] ****** [247 done /235 queued / 16 running / 246 errors / 28.999999999999996% coverage ] ****** [247 done /235 queued / 16 running / 246 errors / 28.999999999999996% coverage ] ****** [248 done /236 queued / 16 running / 247 errors / 28.999999999999996% coverage ] ****** [248 done /236 queued / 16 running / 247 errors / 28.999999999999996% coverage ] ****** [249 done /240 queued / 16 running / 248 errors / 28.999999999999996% coverage ] ****** [249 done /240 queued / 16 running / 248 errors / 28.999999999999996% coverage ] ****** [250 done /241 queued / 16 running / 249 errors / 28.999999999999996% coverage ] ****** [250 done /241 queued / 16 running / 249 errors / 28.999999999999996% coverage ] ****** [251 done /241 queued / 16 running / 250 errors / 28.999999999999996% coverage ] ****** [251 done /241 queued / 16 running / 250 errors / 28.999999999999996% coverage ] ****** [252 done /242 queued / 16 running / 251 errors / 28.999999999999996% coverage ] ****** [252 done /242 queued / 16 running / 251 errors / 28.999999999999996% coverage ] ****** [253 done /242 queued / 16 running / 252 errors / 28.999999999999996% coverage ] ****** [253 done /242 queued / 16 running / 252 errors / 28.999999999999996% coverage ] ****** [254 done /243 queued / 16 running / 253 errors / 28.999999999999996% coverage ] ****** [254 done /243 queued / 16 running / 253 errors / 28.999999999999996% coverage ] ****** [255 done /244 queued / 16 running / 254 errors / 28.999999999999996% coverage ] ****** [255 done /244 queued / 16 running / 254 errors / 28.999999999999996% coverage ] ****** [256 done /244 queued / 16 running / 255 errors / 28.999999999999996% coverage ] ****** [256 done /244 queued / 16 running / 255 errors / 28.999999999999996% coverage ] ****** [257 done /244 queued / 16 running / 256 errors / 28.999999999999996% coverage ] ****** [257 done /244 queued / 16 running / 256 errors / 28.999999999999996% coverage ] ****** [258 done /248 queued / 16 running / 257 errors / 28.999999999999996% coverage ] ****** [258 done /248 queued / 16 running / 257 errors / 28.999999999999996% coverage ] ****** [259 done /252 queued / 16 running / 258 errors / 28.999999999999996% coverage ] ****** [259 done /252 queued / 16 running / 258 errors / 28.999999999999996% coverage ] ****** [260 done /254 queued / 16 running / 259 errors / 28.999999999999996% coverage ] ****** [260 done /254 queued / 16 running / 259 errors / 28.999999999999996% coverage ] ****** [261 done /256 queued / 16 running / 260 errors / 28.999999999999996% coverage ] ****** [261 done /256 queued / 16 running / 260 errors / 28.999999999999996% coverage ] ****** [262 done /256 queued / 16 running / 261 errors / 28.999999999999996% coverage ] ****** [262 done /256 queued / 16 running / 261 errors / 28.999999999999996% coverage ] ****** [263 done /257 queued / 16 running / 262 errors / 28.999999999999996% coverage ] ****** [263 done /257 queued / 16 running / 262 errors / 28.999999999999996% coverage ] ****** [264 done /258 queued / 16 running / 263 errors / 28.999999999999996% coverage ] ****** [264 done /258 queued / 16 running / 263 errors / 28.999999999999996% coverage ] ****** [265 done /259 queued / 16 running / 264 errors / 28.999999999999996% coverage ] ****** [265 done /259 queued / 16 running / 264 errors / 28.999999999999996% coverage ] ****** [266 done /260 queued / 16 running / 265 errors / 28.999999999999996% coverage ] ****** [266 done /260 queued / 16 running / 265 errors / 28.999999999999996% coverage ] ****** [267 done /260 queued / 16 running / 266 errors / 28.999999999999996% coverage ] ****** [267 done /260 queued / 16 running / 266 errors / 28.999999999999996% coverage ] ****** [268 done /261 queued / 16 running / 267 errors / 28.999999999999996% coverage ] ****** [268 done /261 queued / 16 running / 267 errors / 28.999999999999996% coverage ] ****** [269 done /265 queued / 16 running / 268 errors / 28.999999999999996% coverage ] ****** [269 done /265 queued / 16 running / 268 errors / 28.999999999999996% coverage ] ****** [270 done /266 queued / 16 running / 269 errors / 28.999999999999996% coverage ] ****** [270 done /266 queued / 16 running / 269 errors / 28.999999999999996% coverage ] ****** [271 done /266 queued / 16 running / 270 errors / 28.999999999999996% coverage ] ****** [271 done /266 queued / 16 running / 270 errors / 28.999999999999996% coverage ] ****** [272 done /267 queued / 16 running / 271 errors / 28.999999999999996% coverage ] ****** [272 done /267 queued / 16 running / 271 errors / 28.999999999999996% coverage ] ****** [273 done /268 queued / 16 running / 272 errors / 28.999999999999996% coverage ] ****** [273 done /268 queued / 16 running / 272 errors / 28.999999999999996% coverage ] ****** [274 done /268 queued / 16 running / 273 errors / 28.999999999999996% coverage ] ****** [274 done /268 queued / 16 running / 273 errors / 28.999999999999996% coverage ] ****** [275 done /268 queued / 16 running / 274 errors / 28.999999999999996% coverage ] ****** [275 done /268 queued / 16 running / 274 errors / 28.999999999999996% coverage ] ****** [276 done /268 queued / 16 running / 275 errors / 28.999999999999996% coverage ] ****** [276 done /268 queued / 16 running / 275 errors / 28.999999999999996% coverage ] ****** [277 done /268 queued / 16 running / 276 errors / 28.999999999999996% coverage ] ****** [277 done /268 queued / 16 running / 276 errors / 28.999999999999996% coverage ] ****** [278 done /268 queued / 16 running / 277 errors / 28.999999999999996% coverage ] ****** [278 done /268 queued / 16 running / 277 errors / 28.999999999999996% coverage ] ****** [279 done /269 queued / 16 running / 278 errors / 28.999999999999996% coverage ] ****** [279 done /269 queued / 16 running / 278 errors / 28.999999999999996% coverage ] ****** [280 done /270 queued / 16 running / 279 errors / 28.999999999999996% coverage ] ****** [280 done /270 queued / 16 running / 279 errors / 28.999999999999996% coverage ] ****** [281 done /270 queued / 16 running / 280 errors / 28.999999999999996% coverage ] ****** [281 done /270 queued / 16 running / 280 errors / 28.999999999999996% coverage ] ****** [282 done /272 queued / 16 running / 281 errors / 28.999999999999996% coverage ] ****** [282 done /272 queued / 16 running / 281 errors / 28.999999999999996% coverage ] ****** [283 done /272 queued / 16 running / 282 errors / 28.999999999999996% coverage ] ****** [283 done /272 queued / 16 running / 282 errors / 28.999999999999996% coverage ] ****** [284 done /273 queued / 16 running / 283 errors / 28.999999999999996% coverage ] ****** [284 done /273 queued / 16 running / 283 errors / 28.999999999999996% coverage ] ****** [285 done /274 queued / 16 running / 284 errors / 28.999999999999996% coverage ] ****** [285 done /274 queued / 16 running / 284 errors / 28.999999999999996% coverage ] ****** [286 done /274 queued / 16 running / 285 errors / 28.999999999999996% coverage ] ****** [286 done /274 queued / 16 running / 285 errors / 28.999999999999996% coverage ] ****** [287 done /274 queued / 16 running / 286 errors / 28.999999999999996% coverage ] ****** [287 done /274 queued / 16 running / 286 errors / 28.999999999999996% coverage ] ****** [288 done /274 queued / 16 running / 287 errors / 28.999999999999996% coverage ] ****** [288 done /274 queued / 16 running / 287 errors / 28.999999999999996% coverage ] ****** [289 done /278 queued / 16 running / 288 errors / 28.999999999999996% coverage ] ****** [289 done /278 queued / 16 running / 288 errors / 28.999999999999996% coverage ] ****** [290 done /281 queued / 16 running / 289 errors / 28.999999999999996% coverage ] ****** [290 done /281 queued / 16 running / 289 errors / 28.999999999999996% coverage ] ****** [291 done /282 queued / 16 running / 290 errors / 28.999999999999996% coverage ] ****** [291 done /282 queued / 16 running / 290 errors / 28.999999999999996% coverage ] ****** [292 done /283 queued / 16 running / 291 errors / 28.999999999999996% coverage ] ****** [292 done /283 queued / 16 running / 291 errors / 28.999999999999996% coverage ] ****** [293 done /285 queued / 16 running / 292 errors / 28.999999999999996% coverage ] ****** [293 done /285 queued / 16 running / 292 errors / 28.999999999999996% coverage ] ****** [294 done /287 queued / 16 running / 293 errors / 28.999999999999996% coverage ] ****** [294 done /287 queued / 16 running / 293 errors / 28.999999999999996% coverage ] ****** [295 done /288 queued / 16 running / 294 errors / 28.999999999999996% coverage ] ****** [295 done /288 queued / 16 running / 294 errors / 28.999999999999996% coverage ] ****** [296 done /288 queued / 16 running / 295 errors / 28.999999999999996% coverage ] ****** [296 done /288 queued / 16 running / 295 errors / 28.999999999999996% coverage ] ****** [297 done /290 queued / 16 running / 296 errors / 28.999999999999996% coverage ] ****** [297 done /290 queued / 16 running / 296 errors / 28.999999999999996% coverage ] ****** [298 done /291 queued / 16 running / 297 errors / 28.999999999999996% coverage ] ****** [298 done /291 queued / 16 running / 297 errors / 28.999999999999996% coverage ] ****** [299 done /293 queued / 16 running / 298 errors / 28.999999999999996% coverage ] ****** [299 done /293 queued / 16 running / 298 errors / 28.999999999999996% coverage ] ****** [300 done /294 queued / 16 running / 299 errors / 28.999999999999996% coverage ] ****** [300 done /294 queued / 16 running / 299 errors / 28.999999999999996% coverage ] ****** [301 done /295 queued / 16 running / 300 errors / 28.999999999999996% coverage ] ****** [301 done /295 queued / 16 running / 300 errors / 28.999999999999996% coverage ] ****** [302 done /296 queued / 16 running / 301 errors / 28.999999999999996% coverage ] ****** [302 done /296 queued / 16 running / 301 errors / 28.999999999999996% coverage ] ****** [303 done /297 queued / 16 running / 302 errors / 28.999999999999996% coverage ] ****** [303 done /297 queued / 16 running / 302 errors / 28.999999999999996% coverage ] ****** [304 done /298 queued / 16 running / 303 errors / 28.999999999999996% coverage ] ****** [304 done /298 queued / 16 running / 303 errors / 28.999999999999996% coverage ] ****** [305 done /299 queued / 16 running / 304 errors / 28.999999999999996% coverage ] ****** [305 done /299 queued / 16 running / 304 errors / 28.999999999999996% coverage ] ****** [306 done /300 queued / 16 running / 305 errors / 28.999999999999996% coverage ] ****** [306 done /300 queued / 16 running / 305 errors / 28.999999999999996% coverage ] ****** [307 done /302 queued / 16 running / 306 errors / 28.999999999999996% coverage ] ****** [307 done /302 queued / 16 running / 306 errors / 28.999999999999996% coverage ] ****** [308 done /302 queued / 16 running / 307 errors / 28.999999999999996% coverage ] ****** [308 done /302 queued / 16 running / 307 errors / 28.999999999999996% coverage ] ****** [309 done /304 queued / 16 running / 308 errors / 28.999999999999996% coverage ] ****** [309 done /304 queued / 16 running / 308 errors / 28.999999999999996% coverage ] ****** [310 done /305 queued / 16 running / 309 errors / 28.999999999999996% coverage ] ****** [310 done /305 queued / 16 running / 309 errors / 28.999999999999996% coverage ] ****** [311 done /305 queued / 16 running / 310 errors / 28.999999999999996% coverage ] ****** [311 done /305 queued / 16 running / 310 errors / 28.999999999999996% coverage ] ****** [312 done /306 queued / 16 running / 311 errors / 28.999999999999996% coverage ] ****** [312 done /306 queued / 16 running / 311 errors / 28.999999999999996% coverage ] ****** [313 done /308 queued / 16 running / 312 errors / 28.999999999999996% coverage ] ****** [313 done /308 queued / 16 running / 312 errors / 28.999999999999996% coverage ] ****** [314 done /309 queued / 16 running / 313 errors / 28.999999999999996% coverage ] ****** [314 done /309 queued / 16 running / 313 errors / 28.999999999999996% coverage ] ****** [315 done /309 queued / 16 running / 314 errors / 28.999999999999996% coverage ] ****** [315 done /309 queued / 16 running / 314 errors / 28.999999999999996% coverage ] ****** [316 done /313 queued / 16 running / 315 errors / 28.999999999999996% coverage ] ****** [316 done /313 queued / 16 running / 315 errors / 28.999999999999996% coverage ] ****** [317 done /317 queued / 16 running / 316 errors / 28.999999999999996% coverage ] ****** [317 done /317 queued / 16 running / 316 errors / 28.999999999999996% coverage ] ****** [318 done /317 queued / 16 running / 317 errors / 28.999999999999996% coverage ] ****** [318 done /317 queued / 16 running / 317 errors / 28.999999999999996% coverage ] ****** [319 done /321 queued / 16 running / 318 errors / 28.999999999999996% coverage ] ****** [319 done /321 queued / 16 running / 318 errors / 28.999999999999996% coverage ] ****** [320 done /326 queued / 16 running / 319 errors / 28.999999999999996% coverage ] ****** [320 done /326 queued / 16 running / 319 errors / 28.999999999999996% coverage ] ****** [321 done /327 queued / 16 running / 320 errors / 28.999999999999996% coverage ] ****** [321 done /327 queued / 16 running / 320 errors / 28.999999999999996% coverage ] ****** [322 done /327 queued / 16 running / 321 errors / 28.999999999999996% coverage ] ****** [322 done /327 queued / 16 running / 321 errors / 28.999999999999996% coverage ] ****** [323 done /328 queued / 16 running / 322 errors / 28.999999999999996% coverage ] ****** [323 done /328 queued / 16 running / 322 errors / 28.999999999999996% coverage ] ****** [324 done /332 queued / 16 running / 323 errors / 28.999999999999996% coverage ] ****** [324 done /332 queued / 16 running / 323 errors / 28.999999999999996% coverage ] ****** [325 done /333 queued / 16 running / 324 errors / 28.999999999999996% coverage ] ****** [325 done /333 queued / 16 running / 324 errors / 28.999999999999996% coverage ] ****** [326 done /335 queued / 16 running / 325 errors / 28.999999999999996% coverage ] ****** [326 done /335 queued / 16 running / 325 errors / 28.999999999999996% coverage ] ****** [327 done /336 queued / 16 running / 326 errors / 28.999999999999996% coverage ] ****** [327 done /336 queued / 16 running / 326 errors / 28.999999999999996% coverage ] ****** [328 done /337 queued / 16 running / 327 errors / 28.999999999999996% coverage ] ****** [328 done /337 queued / 16 running / 327 errors / 28.999999999999996% coverage ] ****** [329 done /338 queued / 16 running / 328 errors / 28.999999999999996% coverage ] ****** [329 done /338 queued / 16 running / 328 errors / 28.999999999999996% coverage ] ****** [330 done /339 queued / 16 running / 329 errors / 28.999999999999996% coverage ] ****** [330 done /339 queued / 16 running / 329 errors / 28.999999999999996% coverage ] ****** [331 done /340 queued / 16 running / 330 errors / 28.999999999999996% coverage ] ****** [331 done /340 queued / 16 running / 330 errors / 28.999999999999996% coverage ] ****** [332 done /341 queued / 16 running / 331 errors / 28.999999999999996% coverage ] ****** [332 done /341 queued / 16 running / 331 errors / 28.999999999999996% coverage ] ****** [333 done /341 queued / 16 running / 332 errors / 28.999999999999996% coverage ] ****** [333 done /341 queued / 16 running / 332 errors / 28.999999999999996% coverage ] ****** [334 done /343 queued / 16 running / 333 errors / 28.999999999999996% coverage ] ****** [334 done /343 queued / 16 running / 333 errors / 28.999999999999996% coverage ] ****** [335 done /343 queued / 16 running / 334 errors / 28.999999999999996% coverage ] ****** [335 done /343 queued / 16 running / 334 errors / 28.999999999999996% coverage ] ****** [336 done /343 queued / 16 running / 335 errors / 28.999999999999996% coverage ] ****** [336 done /343 queued / 16 running / 335 errors / 28.999999999999996% coverage ] ****** [337 done /343 queued / 16 running / 336 errors / 28.999999999999996% coverage ] ****** [337 done /343 queued / 16 running / 336 errors / 28.999999999999996% coverage ] ****** [338 done /345 queued / 16 running / 337 errors / 28.999999999999996% coverage ] ****** [338 done /345 queued / 16 running / 337 errors / 28.999999999999996% coverage ] ****** [339 done /346 queued / 16 running / 338 errors / 28.999999999999996% coverage ] ****** [339 done /346 queued / 16 running / 338 errors / 28.999999999999996% coverage ] ****** [340 done /346 queued / 16 running / 339 errors / 28.999999999999996% coverage ] ****** [340 done /346 queued / 16 running / 339 errors / 28.999999999999996% coverage ] ****** [341 done /347 queued / 16 running / 340 errors / 28.999999999999996% coverage ] ****** [341 done /347 queued / 16 running / 340 errors / 28.999999999999996% coverage ] ****** [342 done /350 queued / 16 running / 341 errors / 28.999999999999996% coverage ] ****** [342 done /350 queued / 16 running / 341 errors / 28.999999999999996% coverage ] ****** [343 done /350 queued / 16 running / 342 errors / 28.999999999999996% coverage ] ****** [343 done /350 queued / 16 running / 342 errors / 28.999999999999996% coverage ] ****** [344 done /351 queued / 16 running / 343 errors / 28.999999999999996% coverage ] ****** [344 done /351 queued / 16 running / 343 errors / 28.999999999999996% coverage ] ****** [345 done /351 queued / 16 running / 344 errors / 28.999999999999996% coverage ] ****** [345 done /351 queued / 16 running / 344 errors / 28.999999999999996% coverage ] ****** [346 done /353 queued / 16 running / 345 errors / 28.999999999999996% coverage ] ****** [346 done /353 queued / 16 running / 345 errors / 28.999999999999996% coverage ] ****** [347 done /354 queued / 16 running / 346 errors / 28.999999999999996% coverage ] ****** [347 done /354 queued / 16 running / 346 errors / 28.999999999999996% coverage ] ****** [348 done /355 queued / 16 running / 347 errors / 28.999999999999996% coverage ] ****** [348 done /355 queued / 16 running / 347 errors / 28.999999999999996% coverage ] ****** [349 done /356 queued / 16 running / 348 errors / 28.999999999999996% coverage ] ****** [349 done /356 queued / 16 running / 348 errors / 28.999999999999996% coverage ] ****** [350 done /356 queued / 16 running / 349 errors / 28.999999999999996% coverage ] ****** [350 done /356 queued / 16 running / 349 errors / 28.999999999999996% coverage ] ****** [351 done /356 queued / 16 running / 350 errors / 28.999999999999996% coverage ] ****** [351 done /356 queued / 16 running / 350 errors / 28.999999999999996% coverage ] ****** [352 done /357 queued / 16 running / 351 errors / 28.999999999999996% coverage ] ****** [352 done /357 queued / 16 running / 351 errors / 28.999999999999996% coverage ] ****** [353 done /358 queued / 16 running / 352 errors / 28.999999999999996% coverage ] ****** [353 done /358 queued / 16 running / 352 errors / 28.999999999999996% coverage ] ****** [354 done /360 queued / 16 running / 353 errors / 28.999999999999996% coverage ] ****** [354 done /360 queued / 16 running / 353 errors / 28.999999999999996% coverage ] ****** [355 done /361 queued / 16 running / 354 errors / 28.999999999999996% coverage ] ****** [355 done /361 queued / 16 running / 354 errors / 28.999999999999996% coverage ] ****** [356 done /362 queued / 16 running / 355 errors / 28.999999999999996% coverage ] ****** [356 done /362 queued / 16 running / 355 errors / 28.999999999999996% coverage ] ****** [357 done /363 queued / 16 running / 356 errors / 28.999999999999996% coverage ] ****** [357 done /363 queued / 16 running / 356 errors / 28.999999999999996% coverage ] ****** [358 done /364 queued / 16 running / 357 errors / 28.999999999999996% coverage ] ****** [358 done /364 queued / 16 running / 357 errors / 28.999999999999996% coverage ] ****** [359 done /364 queued / 16 running / 358 errors / 28.999999999999996% coverage ] ****** [359 done /364 queued / 16 running / 358 errors / 28.999999999999996% coverage ] ****** [360 done /368 queued / 16 running / 359 errors / 28.999999999999996% coverage ] ****** [360 done /368 queued / 16 running / 359 errors / 28.999999999999996% coverage ] ****** [361 done /368 queued / 16 running / 360 errors / 28.999999999999996% coverage ] ****** [361 done /368 queued / 16 running / 360 errors / 28.999999999999996% coverage ] ****** [362 done /368 queued / 16 running / 361 errors / 28.999999999999996% coverage ] ****** [362 done /368 queued / 16 running / 361 errors / 28.999999999999996% coverage ] ****** [363 done /369 queued / 16 running / 362 errors / 28.999999999999996% coverage ] ****** [363 done /369 queued / 16 running / 362 errors / 28.999999999999996% coverage ] ****** [364 done /370 queued / 16 running / 363 errors / 28.999999999999996% coverage ] ****** [364 done /370 queued / 16 running / 363 errors / 28.999999999999996% coverage ] ****** [365 done /371 queued / 16 running / 364 errors / 28.999999999999996% coverage ] ****** [365 done /371 queued / 16 running / 364 errors / 28.999999999999996% coverage ] ****** [366 done /373 queued / 16 running / 365 errors / 28.999999999999996% coverage ] ****** [366 done /373 queued / 16 running / 365 errors / 28.999999999999996% coverage ] ****** [367 done /374 queued / 16 running / 366 errors / 28.999999999999996% coverage ] ****** [367 done /374 queued / 16 running / 366 errors / 28.999999999999996% coverage ] ****** [368 done /374 queued / 16 running / 367 errors / 28.999999999999996% coverage ] ****** [368 done /374 queued / 16 running / 367 errors / 28.999999999999996% coverage ] ****** [369 done /376 queued / 16 running / 368 errors / 28.999999999999996% coverage ] ****** [369 done /376 queued / 16 running / 368 errors / 28.999999999999996% coverage ] ****** [370 done /378 queued / 16 running / 369 errors / 28.999999999999996% coverage ] ****** [370 done /378 queued / 16 running / 369 errors / 28.999999999999996% coverage ] ****** [371 done /383 queued / 16 running / 370 errors / 28.999999999999996% coverage ] ****** [371 done /383 queued / 16 running / 370 errors / 28.999999999999996% coverage ] ****** [372 done /384 queued / 16 running / 371 errors / 28.999999999999996% coverage ] ****** [372 done /384 queued / 16 running / 371 errors / 28.999999999999996% coverage ] ****** [373 done /386 queued / 16 running / 372 errors / 28.999999999999996% coverage ] ****** [373 done /386 queued / 16 running / 372 errors / 28.999999999999996% coverage ] ****** [374 done /386 queued / 16 running / 373 errors / 28.999999999999996% coverage ] ****** [374 done /386 queued / 16 running / 373 errors / 28.999999999999996% coverage ] ****** [375 done /387 queued / 16 running / 374 errors / 28.999999999999996% coverage ] ****** [375 done /387 queued / 16 running / 374 errors / 28.999999999999996% coverage ] ****** [376 done /388 queued / 16 running / 375 errors / 28.999999999999996% coverage ] ****** [376 done /388 queued / 16 running / 375 errors / 28.999999999999996% coverage ] ****** [377 done /390 queued / 16 running / 376 errors / 28.999999999999996% coverage ] ****** [377 done /390 queued / 16 running / 376 errors / 28.999999999999996% coverage ] ****** [378 done /391 queued / 16 running / 377 errors / 28.999999999999996% coverage ] ****** [378 done /391 queued / 16 running / 377 errors / 28.999999999999996% coverage ] ****** [379 done /392 queued / 16 running / 378 errors / 28.999999999999996% coverage ] ****** [379 done /392 queued / 16 running / 378 errors / 28.999999999999996% coverage ] ****** [380 done /392 queued / 16 running / 379 errors / 28.999999999999996% coverage ] ****** [380 done /392 queued / 16 running / 379 errors / 28.999999999999996% coverage ] ****** [381 done /396 queued / 16 running / 380 errors / 28.999999999999996% coverage ] ****** [381 done /396 queued / 16 running / 380 errors / 28.999999999999996% coverage ] ****** [382 done /396 queued / 16 running / 381 errors / 28.999999999999996% coverage ] ****** [382 done /396 queued / 16 running / 381 errors / 28.999999999999996% coverage ] ****** [383 done /399 queued / 16 running / 382 errors / 28.999999999999996% coverage ] ****** [383 done /399 queued / 16 running / 382 errors / 28.999999999999996% coverage ] ****** [384 done /400 queued / 16 running / 383 errors / 28.999999999999996% coverage ] ****** [384 done /400 queued / 16 running / 383 errors / 28.999999999999996% coverage ] ****** [385 done /401 queued / 16 running / 384 errors / 28.999999999999996% coverage ] ****** [385 done /401 queued / 16 running / 384 errors / 28.999999999999996% coverage ] ****** [386 done /402 queued / 16 running / 385 errors / 28.999999999999996% coverage ] ****** [386 done /402 queued / 16 running / 385 errors / 28.999999999999996% coverage ] ****** [387 done /404 queued / 16 running / 386 errors / 28.999999999999996% coverage ] ****** [387 done /404 queued / 16 running / 386 errors / 28.999999999999996% coverage ] ****** [388 done /405 queued / 16 running / 387 errors / 28.999999999999996% coverage ] ****** [388 done /405 queued / 16 running / 387 errors / 28.999999999999996% coverage ] ****** [389 done /406 queued / 16 running / 388 errors / 28.999999999999996% coverage ] ****** [389 done /406 queued / 16 running / 388 errors / 28.999999999999996% coverage ] ****** [390 done /407 queued / 16 running / 389 errors / 28.999999999999996% coverage ] ****** [390 done /407 queued / 16 running / 389 errors / 28.999999999999996% coverage ] ****** [391 done /409 queued / 16 running / 390 errors / 28.999999999999996% coverage ] ****** [391 done /409 queued / 16 running / 390 errors / 28.999999999999996% coverage ] ****** [392 done /414 queued / 16 running / 391 errors / 28.999999999999996% coverage ] ****** [392 done /414 queued / 16 running / 391 errors / 28.999999999999996% coverage ] ****** [393 done /416 queued / 16 running / 392 errors / 28.999999999999996% coverage ] ****** [393 done /416 queued / 16 running / 392 errors / 28.999999999999996% coverage ] ****** [394 done /416 queued / 16 running / 393 errors / 28.999999999999996% coverage ] ****** [394 done /416 queued / 16 running / 393 errors / 28.999999999999996% coverage ] ****** [395 done /420 queued / 16 running / 394 errors / 28.999999999999996% coverage ] ****** [395 done /420 queued / 16 running / 394 errors / 28.999999999999996% coverage ] ****** [396 done /421 queued / 16 running / 395 errors / 28.999999999999996% coverage ] ****** [396 done /421 queued / 16 running / 395 errors / 28.999999999999996% coverage ] ****** [397 done /421 queued / 16 running / 396 errors / 28.999999999999996% coverage ] ****** [397 done /421 queued / 16 running / 396 errors / 28.999999999999996% coverage ] ****** [398 done /422 queued / 16 running / 397 errors / 28.999999999999996% coverage ] ****** [398 done /422 queued / 16 running / 397 errors / 28.999999999999996% coverage ] ****** [399 done /422 queued / 16 running / 398 errors / 28.999999999999996% coverage ] ****** [399 done /422 queued / 16 running / 398 errors / 28.999999999999996% coverage ] ****** [400 done /423 queued / 16 running / 399 errors / 28.999999999999996% coverage ] ****** [400 done /423 queued / 16 running / 399 errors / 28.999999999999996% coverage ] ****** [401 done /426 queued / 16 running / 400 errors / 28.999999999999996% coverage ] ****** [401 done /426 queued / 16 running / 400 errors / 28.999999999999996% coverage ] ****** [402 done /427 queued / 16 running / 401 errors / 28.999999999999996% coverage ] ****** [402 done /427 queued / 16 running / 401 errors / 28.999999999999996% coverage ] ****** [403 done /430 queued / 16 running / 402 errors / 28.999999999999996% coverage ] ****** [403 done /430 queued / 16 running / 402 errors / 28.999999999999996% coverage ] ****** [404 done /430 queued / 16 running / 403 errors / 28.999999999999996% coverage ] ****** [404 done /430 queued / 16 running / 403 errors / 28.999999999999996% coverage ] ****** [405 done /431 queued / 16 running / 404 errors / 28.999999999999996% coverage ] ****** [405 done /431 queued / 16 running / 404 errors / 28.999999999999996% coverage ] ****** [406 done /432 queued / 16 running / 405 errors / 28.999999999999996% coverage ] ****** [406 done /432 queued / 16 running / 405 errors / 28.999999999999996% coverage ] ****** [407 done /434 queued / 16 running / 406 errors / 28.999999999999996% coverage ] ****** [407 done /434 queued / 16 running / 406 errors / 28.999999999999996% coverage ] ****** [408 done /435 queued / 16 running / 407 errors / 28.999999999999996% coverage ] ****** [408 done /435 queued / 16 running / 407 errors / 28.999999999999996% coverage ] ****** [409 done /435 queued / 16 running / 408 errors / 28.999999999999996% coverage ] ****** [409 done /435 queued / 16 running / 408 errors / 28.999999999999996% coverage ] ****** [410 done /437 queued / 16 running / 409 errors / 28.999999999999996% coverage ] ****** [410 done /437 queued / 16 running / 409 errors / 28.999999999999996% coverage ] ****** [411 done /438 queued / 16 running / 410 errors / 28.999999999999996% coverage ] ****** [411 done /438 queued / 16 running / 410 errors / 28.999999999999996% coverage ] ****** [412 done /439 queued / 16 running / 411 errors / 28.999999999999996% coverage ] ****** [412 done /439 queued / 16 running / 411 errors / 28.999999999999996% coverage ] ****** [413 done /441 queued / 16 running / 412 errors / 28.999999999999996% coverage ] ****** [413 done /441 queued / 16 running / 412 errors / 28.999999999999996% coverage ] ****** [414 done /442 queued / 16 running / 413 errors / 28.999999999999996% coverage ] ****** [414 done /442 queued / 16 running / 413 errors / 28.999999999999996% coverage ] ****** [415 done /443 queued / 16 running / 414 errors / 28.999999999999996% coverage ] ****** [415 done /443 queued / 16 running / 414 errors / 28.999999999999996% coverage ] ****** [416 done /445 queued / 16 running / 415 errors / 28.999999999999996% coverage ] ****** [416 done /445 queued / 16 running / 415 errors / 28.999999999999996% coverage ] ****** [417 done /445 queued / 16 running / 416 errors / 28.999999999999996% coverage ] ****** [417 done /445 queued / 16 running / 416 errors / 28.999999999999996% coverage ] ****** [418 done /447 queued / 16 running / 417 errors / 28.999999999999996% coverage ] ****** [418 done /447 queued / 16 running / 417 errors / 28.999999999999996% coverage ] ****** [419 done /448 queued / 16 running / 418 errors / 28.999999999999996% coverage ] ****** [419 done /448 queued / 16 running / 418 errors / 28.999999999999996% coverage ] ****** [420 done /449 queued / 16 running / 419 errors / 28.999999999999996% coverage ] ****** [420 done /449 queued / 16 running / 419 errors / 28.999999999999996% coverage ] ****** [421 done /450 queued / 16 running / 420 errors / 28.999999999999996% coverage ] ****** [421 done /450 queued / 16 running / 420 errors / 28.999999999999996% coverage ] ****** [422 done /450 queued / 16 running / 421 errors / 28.999999999999996% coverage ] ****** [422 done /450 queued / 16 running / 421 errors / 28.999999999999996% coverage ] ****** [423 done /451 queued / 16 running / 422 errors / 28.999999999999996% coverage ] ****** [423 done /451 queued / 16 running / 422 errors / 28.999999999999996% coverage ] ****** [424 done /451 queued / 16 running / 423 errors / 28.999999999999996% coverage ] ****** [424 done /451 queued / 16 running / 423 errors / 28.999999999999996% coverage ] ****** [425 done /451 queued / 16 running / 424 errors / 28.999999999999996% coverage ] ****** [425 done /451 queued / 16 running / 424 errors / 28.999999999999996% coverage ] ****** [426 done /452 queued / 16 running / 425 errors / 28.999999999999996% coverage ] ****** [426 done /452 queued / 16 running / 425 errors / 28.999999999999996% coverage ] ****** [427 done /453 queued / 16 running / 426 errors / 28.999999999999996% coverage ] ****** [427 done /453 queued / 16 running / 426 errors / 28.999999999999996% coverage ] ****** [428 done /456 queued / 16 running / 427 errors / 28.999999999999996% coverage ] ****** [428 done /456 queued / 16 running / 427 errors / 28.999999999999996% coverage ] ****** [429 done /458 queued / 16 running / 428 errors / 28.999999999999996% coverage ] ****** [429 done /458 queued / 16 running / 428 errors / 28.999999999999996% coverage ] ****** [430 done /459 queued / 16 running / 429 errors / 28.999999999999996% coverage ] ****** [430 done /459 queued / 16 running / 429 errors / 28.999999999999996% coverage ] ****** [431 done /460 queued / 16 running / 430 errors / 28.999999999999996% coverage ] ****** [431 done /460 queued / 16 running / 430 errors / 28.999999999999996% coverage ] ****** [432 done /462 queued / 16 running / 431 errors / 28.999999999999996% coverage ] ****** [432 done /462 queued / 16 running / 431 errors / 28.999999999999996% coverage ] ****** [433 done /464 queued / 16 running / 432 errors / 28.999999999999996% coverage ] ****** [433 done /464 queued / 16 running / 432 errors / 28.999999999999996% coverage ] ****** [434 done /465 queued / 16 running / 433 errors / 28.999999999999996% coverage ] ****** [434 done /465 queued / 16 running / 433 errors / 28.999999999999996% coverage ] ****** [435 done /466 queued / 16 running / 434 errors / 28.999999999999996% coverage ] ****** [435 done /466 queued / 16 running / 434 errors / 28.999999999999996% coverage ] ****** [436 done /467 queued / 16 running / 435 errors / 28.999999999999996% coverage ] ****** [436 done /467 queued / 16 running / 435 errors / 28.999999999999996% coverage ] ****** [437 done /468 queued / 16 running / 436 errors / 28.999999999999996% coverage ] ****** [437 done /468 queued / 16 running / 436 errors / 28.999999999999996% coverage ] ****** [438 done /468 queued / 16 running / 437 errors / 28.999999999999996% coverage ] ****** [438 done /468 queued / 16 running / 437 errors / 28.999999999999996% coverage ] ****** [439 done /469 queued / 16 running / 438 errors / 28.999999999999996% coverage ] ****** [439 done /469 queued / 16 running / 438 errors / 28.999999999999996% coverage ] ****** [440 done /470 queued / 16 running / 439 errors / 28.999999999999996% coverage ] ****** [440 done /470 queued / 16 running / 439 errors / 28.999999999999996% coverage ] ****** [441 done /472 queued / 16 running / 440 errors / 28.999999999999996% coverage ] ****** [441 done /472 queued / 16 running / 440 errors / 28.999999999999996% coverage ] ****** [442 done /473 queued / 16 running / 441 errors / 28.999999999999996% coverage ] ****** [442 done /473 queued / 16 running / 441 errors / 28.999999999999996% coverage ] ****** [443 done /473 queued / 16 running / 442 errors / 28.999999999999996% coverage ] ****** [443 done /473 queued / 16 running / 442 errors / 28.999999999999996% coverage ] ****** [444 done /475 queued / 16 running / 443 errors / 28.999999999999996% coverage ] ****** [444 done /475 queued / 16 running / 443 errors / 28.999999999999996% coverage ] ****** [445 done /476 queued / 16 running / 444 errors / 28.999999999999996% coverage ] ****** [445 done /476 queued / 16 running / 444 errors / 28.999999999999996% coverage ] ****** [446 done /476 queued / 16 running / 445 errors / 28.999999999999996% coverage ] ****** [446 done /476 queued / 16 running / 445 errors / 28.999999999999996% coverage ] ****** [447 done /476 queued / 16 running / 446 errors / 28.999999999999996% coverage ] ****** [447 done /476 queued / 16 running / 446 errors / 28.999999999999996% coverage ] ****** [448 done /479 queued / 16 running / 447 errors / 28.999999999999996% coverage ] ****** [448 done /479 queued / 16 running / 447 errors / 28.999999999999996% coverage ] ****** [449 done /480 queued / 16 running / 448 errors / 28.999999999999996% coverage ] ****** [449 done /480 queued / 16 running / 448 errors / 28.999999999999996% coverage ] ****** [450 done /482 queued / 16 running / 449 errors / 28.999999999999996% coverage ] ****** [450 done /482 queued / 16 running / 449 errors / 28.999999999999996% coverage ] ****** [451 done /484 queued / 16 running / 450 errors / 28.999999999999996% coverage ] ****** [451 done /484 queued / 16 running / 450 errors / 28.999999999999996% coverage ] ****** [452 done /485 queued / 16 running / 451 errors / 28.999999999999996% coverage ] ****** [452 done /485 queued / 16 running / 451 errors / 28.999999999999996% coverage ] ****** [453 done /486 queued / 16 running / 452 errors / 28.999999999999996% coverage ] ****** [453 done /486 queued / 16 running / 452 errors / 28.999999999999996% coverage ] ****** [454 done /490 queued / 16 running / 453 errors / 28.999999999999996% coverage ] ****** [454 done /490 queued / 16 running / 453 errors / 28.999999999999996% coverage ] ****** [455 done /491 queued / 16 running / 454 errors / 28.999999999999996% coverage ] ****** [455 done /491 queued / 16 running / 454 errors / 28.999999999999996% coverage ] ****** [456 done /493 queued / 16 running / 455 errors / 28.999999999999996% coverage ] ****** [456 done /493 queued / 16 running / 455 errors / 28.999999999999996% coverage ] ****** [457 done /494 queued / 16 running / 456 errors / 28.999999999999996% coverage ] ****** [457 done /494 queued / 16 running / 456 errors / 28.999999999999996% coverage ] ****** [458 done /495 queued / 16 running / 457 errors / 28.999999999999996% coverage ] ****** [458 done /495 queued / 16 running / 457 errors / 28.999999999999996% coverage ] ****** [459 done /495 queued / 16 running / 458 errors / 28.999999999999996% coverage ] ****** [459 done /495 queued / 16 running / 458 errors / 28.999999999999996% coverage ] ****** [460 done /496 queued / 16 running / 459 errors / 28.999999999999996% coverage ] ****** [460 done /496 queued / 16 running / 459 errors / 28.999999999999996% coverage ] ****** [461 done /497 queued / 16 running / 460 errors / 28.999999999999996% coverage ] ****** [461 done /497 queued / 16 running / 460 errors / 28.999999999999996% coverage ] ****** [462 done /498 queued / 16 running / 461 errors / 28.999999999999996% coverage ] ****** [462 done /498 queued / 16 running / 461 errors / 28.999999999999996% coverage ] ****** [463 done /500 queued / 16 running / 462 errors / 28.999999999999996% coverage ] ****** [463 done /500 queued / 16 running / 462 errors / 28.999999999999996% coverage ] ****** [464 done /503 queued / 16 running / 463 errors / 28.999999999999996% coverage ] ****** [464 done /503 queued / 16 running / 463 errors / 28.999999999999996% coverage ] ****** [465 done /503 queued / 16 running / 464 errors / 28.999999999999996% coverage ] ****** [465 done /503 queued / 16 running / 464 errors / 28.999999999999996% coverage ] ****** [466 done /505 queued / 16 running / 465 errors / 28.999999999999996% coverage ] ****** [466 done /505 queued / 16 running / 465 errors / 28.999999999999996% coverage ] ****** [467 done /506 queued / 16 running / 466 errors / 28.999999999999996% coverage ] ****** [467 done /506 queued / 16 running / 466 errors / 28.999999999999996% coverage ] ****** [468 done /506 queued / 16 running / 467 errors / 28.999999999999996% coverage ] ****** [468 done /506 queued / 16 running / 467 errors / 28.999999999999996% coverage ] ****** [469 done /506 queued / 16 running / 468 errors / 28.999999999999996% coverage ] ****** [469 done /506 queued / 16 running / 468 errors / 28.999999999999996% coverage ] ****** [470 done /507 queued / 16 running / 469 errors / 28.999999999999996% coverage ] ****** [470 done /507 queued / 16 running / 469 errors / 28.999999999999996% coverage ] ****** [471 done /508 queued / 16 running / 470 errors / 28.999999999999996% coverage ] ****** [471 done /508 queued / 16 running / 470 errors / 28.999999999999996% coverage ] ****** [472 done /509 queued / 16 running / 471 errors / 28.999999999999996% coverage ] ****** [472 done /509 queued / 16 running / 471 errors / 28.999999999999996% coverage ] ****** [473 done /510 queued / 16 running / 472 errors / 28.999999999999996% coverage ] ****** [473 done /510 queued / 16 running / 472 errors / 28.999999999999996% coverage ] ****** [474 done /510 queued / 16 running / 473 errors / 28.999999999999996% coverage ] ****** [474 done /510 queued / 16 running / 473 errors / 28.999999999999996% coverage ] ****** [475 done /511 queued / 16 running / 474 errors / 28.999999999999996% coverage ] ****** [475 done /511 queued / 16 running / 474 errors / 28.999999999999996% coverage ] ****** [476 done /512 queued / 16 running / 475 errors / 28.999999999999996% coverage ] ****** [476 done /512 queued / 16 running / 475 errors / 28.999999999999996% coverage ] ****** [477 done /512 queued / 16 running / 476 errors / 28.999999999999996% coverage ] ****** [477 done /512 queued / 16 running / 476 errors / 28.999999999999996% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","toString","apply","bound ","call","Date","RegExp","join","parseInt","sort"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0} start 0.0798 took 5.2573s
*-- Test Case {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0} start 5.4007 took 18.8053s
*-- Errors occured in test {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (46:2) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
// readdir(PREFIX) as ENTRIES
//   If fails, END
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $])
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.



module.exports = glob

var fs = require("fs")
, minimatch = require("minimatch")
, Minimatch = minimatch.Minimatch
, inherits = require("inherits")
, EE = require("events").EventEmitter
, path = require("path")
, isDir = {}
, assert = require("assert").ok

function glob (pattern, options, cb) {
  if (typeof options === "function") cb = options, options = {}
  if (!options) options = {}

  if (typeof options === "number") {
    deprecated()
    return
  }

  var g = new Glob(pattern, options, cb)
  return g.sync ? g.found : g
}

glob.fnmatch = deprecated

function deprecated () {
  throw new Error("glob's interface has changed. Please see the docs.")
}

glob.sync = globSync
function globSync (pattern, options) {
  if (typeof options === "number") {
    deprecated()
    return
  }

  options = options || {}
  options.sync = true
  return glob(pattern, options)
}

this._processingEmitQueue = false

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (!(this instanceof Glob)) {
    return new Glob(pattern, options, cb)
  }

  if (typeof options === "function") {
    cb = options
    options = null
  }

  if (typeof cb === "function") {
    this.on("error", cb)
    this.on("end", function (matches) {
      cb(null, matches)
    })
  }

  options = options || {}

  this._endEmitted = false
  this.EOF = {}
  this._emitQueue = []

  this.paused = false
  this._processingEmitQueue = false

  this.maxDepth = options.maxDepth || 1000
  this.maxLength = options.maxLength || Infinity
  this.cache = options.cache || {}
  this.statCache = options.statCache || {}

  this.changedCwd = false
  var cwd = process.cwd()
  if (!options.hasOwnProperty("cwd")) this.cwd = cwd
  else {
    this.cwd = options.cwd
    this.changedCwd = path.resolve(options.cwd) !== cwd
  }

  this.root = options.root || path.resolve(this.cwd, "/")
  this.root = path.resolve(this.root)
  if (process.platform === "win32")
    this.root = this.root.replace(/\\/g, "/")

  this.nomount = !!options.nomount

  if (!pattern) {
    throw new Error("must provide pattern")
  }

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/")) {
    if (options.noglobstar) {
      throw new Error("base matching requires globstar")
    }
    pattern = "**/" + pattern
  }

  this.strict = options.strict !== false
  this.dot = !!options.dot
  this.mark = !!options.mark
  this.sync = !!options.sync
  this.nounique = !!options.nounique
  this.nonull = !!options.nonull
  this.nosort = !!options.nosort
  this.nocase = !!options.nocase
  this.stat = !!options.stat

  this.debug = !!options.debug || !!options.globDebug
  if (this.debug)
    this.log = console.error

  this.silent = !!options.silent

  var mm = this.minimatch = new Minimatch(pattern, options)
  this.options = mm.options
  pattern = this.pattern = mm.pattern

  this.error = null
  this.aborted = false

  // list of all the patterns that ** has resolved do, so
  // we can avoid visiting multiple times.
  this._globstars = {}

  EE.call(this)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  this.minimatch.set.forEach(iterator.bind(this))
  function iterator (pattern, i, set) {
    this._process(pattern, 0, i, function (er) {
      if (er) this.emit("error", er)
      if (-- n <= 0) this._finish()
    })
  }
}

Glob.prototype.log = function () {}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)

  var nou = this.nounique
  , all = nou ? [] : {}

  for (var i = 0, l = this.matches.length; i < l; i ++) {
    var matches = this.matches[i]
    this.log("matches[%d] =", i, matches)
    // do like the shell, and spit out the literal glob
    if (!matches) {
      if (this.nonull) {
        var literal = this.minimatch.globSet[i]
        if (nou) all.push(literal)
        else all[literal] = true
      }
    } else {
      // had matches
      var m = Object.keys(matches)
      if (nou) all.push.apply(all, m)
      else m.forEach(function (m) {
        all[m] = true
      })
    }
  }

  if (!nou) all = Object.keys(all)

  if (!this.nosort) {
    all = all.sort(this.nocase ? alphasorti : alphasort)
  }

  if (this.mark) {
    // at *some* point we statted all of these
    all = all.map(this._mark, this)
  }

  this.log("emitting end", all)

  this.EOF = this.found = all
  this.emitMatch(this.EOF)
}

function alphasorti (a, b) {
  a = a.toLowerCase()
  b = b.toLowerCase()
  return alphasort(a, b)
}

function alphasort (a, b) {
  return a > b ? 1 : a < b ? -1 : 0
}

Glob.prototype._mark = function (p) {
  var c = this.cache[p]
  var m = p
  if (c) {
    var isDir = c === 2 || Array.isArray(c)
    var slash = p.slice(-1) === '/'

    if (isDir && !slash)
      m += '/'
    else if (!isDir && slash)
      m = m.slice(0, -1)

    if (m !== p) {
      this.statCache[m] = this.statCache[p]
      this.cache[m] = this.cache[p]
    }
  }

  return m
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit("abort")
}

Glob.prototype.pause = function () {
  if (this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = true
  this.emit("pause")
}

Glob.prototype.resume = function () {
  if (!this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = false
  this.emit("resume")
  this._processEmitQueue()
  //process.nextTick(this.emit.bind(this, "resume"))
}

Glob.prototype.emitMatch = function (m) {
  this.log('emitMatch', m)
  this._emitQueue.push(m)
  this._processEmitQueue()
}

Glob.prototype._processEmitQueue = function (m) {
  this.log("pEQ paused=%j processing=%j m=%j", this.paused,
           this._processingEmitQueue, m)
  var done = false
  while (!this._processingEmitQueue &&
         !this.paused) {
    this._processingEmitQueue = true
    var m = this._emitQueue.shift()
    this.log(">processEmitQueue", m === this.EOF ? ":EOF:" : m)
    if (!m) {
      this.log(">processEmitQueue, falsey m")
      this._processingEmitQueue = false
      break
    }

    if (m === this.EOF || !(this.mark && !this.stat)) {
      this.log("peq: unmarked, or eof")
      next.call(this, 0, false)
    } else if (this.statCache[m]) {
      var sc = this.statCache[m]
      var exists
      if (sc)
        exists = sc.isDirectory() ? 2 : 1
      this.log("peq: stat cached")
      next.call(this, exists, exists === 2)
    } else {
      this.log("peq: _stat, then next")
      this._stat(m, next)
    }

    function next(exists, isDir) {
      this.log("next", m, exists, isDir)
      var ev = m === this.EOF ? "end" : "match"

      // "end" can only happen once.
      assert(!this._endEmitted)
      if (ev === "end")
        this._endEmitted = true

      if (exists) {
        // Doesn't mean it necessarily doesn't exist, it's possible
        // we just didn't check because we don't care that much, or
        // this is EOF anyway.
        if (isDir && !m.match(/\/$/)) {
          m = m + "/"
        } else if (!isDir && m.match(/\/$/)) {
          m = m.replace(/\/+$/, "")
        }
      }
      this.log("emit", ev, m)
      this.emit(ev, m)
      this._processingEmitQueue = false
      if (done && m !== this.EOF && !this.paused)
        this._processEmitQueue()
    }
  }
  done = true
}

Glob.prototype._process = function (pattern, depth, index, cb_) {
  assert(this instanceof Glob)

  var cb = function cb (er, res) {
    assert(this instanceof Glob)
    if (this.paused) {
      if (!this._processQueue) {
        this._processQueue = []
        this.once("resume", function () {
          var q = this._processQueue
          this._processQueue = null
          q.forEach(function (cb) { cb() })
        })
      }
      this._processQueue.push(cb_.bind(this, er, res))
    } else {
      cb_.call(this, er, res)
    }
  }.bind(this)

  if (this.aborted) return cb()

  if (depth > this.maxDepth) return cb()

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === "string") {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      prefix = pattern.join("/")
      this._stat(prefix, function (exists, isDir) {
        // either it's there, or it isn't.
        // nothing more to do, either way.
        if (exists) {
          if (prefix && isAbsolute(prefix) && !this.nomount) {
            if (prefix.charAt(0) === "/") {
              prefix = path.join(this.root, prefix)
            } else {
              prefix = path.resolve(this.root, prefix)
            }
          }

          if (process.platform === "win32")
            prefix = prefix.replace(/\\/g, "/")

          this.matches[index] = this.matches[index] || {}
          this.matches[index][prefix] = true
          this.emitMatch(prefix)
        }
        return cb()
      })
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n)
      prefix = prefix.join("/")
      break
  }

  // get the list of entries.
  var read
  if (prefix === null) read = "."
  else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
    if (!prefix || !isAbsolute(prefix)) {
      prefix = path.join("/", prefix)
    }
    read = prefix = path.resolve(prefix)

    // if (process.platform === "win32")
    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\/g, "/")

    this.log('absolute: ', prefix, this.root, pattern, read)
  } else {
    read = prefix
  }

  this.log('readdir(%j)', read, this.cwd, this.root)

  return this._readdir(read, function (er, entries) {
    if (er) {
      // not a directory!
      // this means that, whatever else comes after this, it can never match
      return cb()
    }

    // globstar is special
    if (pattern[n] === minimatch.GLOBSTAR) {
      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]
      entries.forEach(function (e) {
        if (e.charAt(0) === "." && !this.dot) return
        // instead of the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))
        // below the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))
      }, this)

      s = s.filter(function (pattern) {
        var key = gsKey(pattern)
        var seen = !this._globstars[key]
        this._globstars[key] = true
        return seen
      }, this)

      if (!s.length)
        return cb()

      // now asyncForEach over this
      var l = s.length
      , errState = null
      s.forEach(function (gsPattern) {
        this._process(gsPattern, depth + 1, index, function (er) {
          if (errState) return
          if (er) return cb(errState = er)
          if (--l <= 0) return cb()
        })
      }, this)

      return
    }

    // not a globstar
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = pattern[n]
    var rawGlob = pattern[n]._glob
    , dotOk = this.dot || rawGlob.charAt(0) === "."

    entries = entries.filter(function (e) {
      return (e.charAt(0) !== "." || dotOk) &&
             e.match(pattern[n])
    })

    // If n === pattern.length - 1, then there's no need for the extra stat
    // *unless* the user has specified "mark" or "stat" explicitly.
    // We know that they exist, since the readdir returned them.
    if (n === pattern.length - 1 &&
        !this.mark &&
        !this.stat) {
      entries.forEach(function (e) {
        if (prefix) {
          if (prefix !== "/") e = prefix + "/" + e
          else e = prefix + e
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path.join(this.root, e)
        }

        if (process.platform === "win32")
          e = e.replace(/\\/g, "/")

        this.matches[index] = this.matches[index] || {}
        this.matches[index][e] = true
        this.emitMatch(e)
      }, this)
      return cb.call(this)
    }


    // now test all the remaining entries as stand-ins for that part
    // of the pattern.
    var l = entries.length
    , errState = null
    if (l === 0) return cb() // no matches possible
    entries.forEach(function (e) {
      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))
      this._process(p, depth + 1, index, function (er) {
        if (errState) return
        if (er) return cb(errState = er)
        if (--l === 0) return cb.call(this)
      })
    }, this)
  })

}

function gsKey (pattern) {
  return '**' + pattern.map(function (p) {
    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)
  }).join('/')
}

Glob.prototype._stat = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterStat(f, abs, cb, er)
  }

  this.log('stat', [this.cwd, f, '=', abs])

  if (!this.stat && this.cache.hasOwnProperty(f)) {
    var exists = this.cache[f]
    , isDir = exists && (Array.isArray(exists) || exists === 2)
    if (this.sync) return cb.call(this, !!exists, isDir)
    return process.nextTick(cb.bind(this, !!exists, isDir))
  }

  var stat = this.statCache[abs]
  if (this.sync || stat) {
    var er
    try {
      stat = fs.statSync(abs)
    } catch (e) {
      er = e
    }
    this._afterStat(f, abs, cb, er, stat)
  } else {
    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))
  }
}

Glob.prototype._afterStat = function (f, abs, cb, er, stat) {
  var exists
  assert(this instanceof Glob)

  if (abs.slice(-1) === "/" && stat && !stat.isDirectory()) {
    this.log("should be ENOTDIR, fake it")

    er = new Error("ENOTDIR, not a directory '" + abs + "'")
    er.path = abs
    er.code = "ENOTDIR"
    stat = null
  }

  var emit = !this.statCache[abs]
  this.statCache[abs] = stat

  if (er || !stat) {
    exists = false
  } else {
    exists = stat.isDirectory() ? 2 : 1
    if (emit)
      this.emit('stat', f, stat)
  }
  this.cache[f] = this.cache[f] || exists
  cb.call(this, !!exists, exists === 2)
}

Glob.prototype._readdir = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (isAbsolute(f)) {
    abs = f
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterReaddir(f, abs, cb, er)
  }

  this.log('readdir', [this.cwd, f, abs])
  if (this.cache.hasOwnProperty(f)) {
    var c = this.cache[f]
    if (Array.isArray(c)) {
      if (this.sync) return cb.call(this, null, c)
      return process.nextTick(cb.bind(this, null, c))
    }

    if (!c || c === 1) {
      // either ENOENT or ENOTDIR
      var code = c ? "ENOTDIR" : "ENOENT"
      , er = new Error((c ? "Not a directory" : "Not found") + ": " + f)
      er.path = f
      er.code = code
      this.log(f, er)
      if (this.sync) return cb.call(this, er)
      return process.nextTick(cb.bind(this, er))
    }

    // at this point, c === 2, meaning it's a dir, but we haven't
    // had to read it yet, or c === true, meaning it's *something*
    // but we don't have any idea what.  Need to read it, either way.
  }

  if (this.sync) {
    var er, entries
    try {
      entries = fs.readdirSync(abs)
    } catch (e) {
      er = e
    }
    return this._afterReaddir(f, abs, cb, er, entries)
  }

  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))
}

Glob.prototype._afterReaddir = function (f, abs, cb, er, entries) {
  assert(this instanceof Glob)
  if (entries && !er) {
    this.cache[f] = entries
    // if we haven't asked to stat everything for suresies, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.  This also gets us one step
    // further into ELOOP territory.
    if (!this.mark && !this.stat) {
      entries.forEach(function (e) {
        if (f === "/") e = f + e
        else e = f + "/" + e
        this.cache[e] = true
      }, this)
    }

    return cb.call(this, er, entries)
  }

  // now handle errors, and cache the information
  if (er) switch (er.code) {
    case "ENOTDIR": // totally normal. means it *does* exist.
      this.cache[f] = 1
      return cb.call(this, er)
    case "ENOENT": // not terribly unusual
    case "ELOOP":
    case "ENAMETOOLONG":
    case "UNKNOWN":
      this.cache[f] = false
      return cb.call(this, er)
    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) this.emit("error", er)
      if (!this.silent) console.error("glob error", er)
      return cb.call(this, er)
  }
}

var isAbsolute = process.platform === "win32" ? absWin : absUnix

function absWin (p) {
  if (absUnix(p)) return true
  // pull off the device/UNC bit from a windows path.
  // from node's lib/path.js
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/
    , result = splitDeviceRe.exec(p)
    , device = result[1] || ''
    , isUnc = device && device.charAt(1) !== ':'
    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute

  return isAbsolute
}

function absUnix (p) {
  return p.charAt(0) === "/" || p === ""
}
 at SyntaxError: Unexpected token (46:2)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switch_Base":0,"_bound":1}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"_bound":2} start 24.4025 took 20.7753s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"_bound":2}
* Error: Tropigate failed because SyntaxError: Unexpected token (46:2) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
// readdir(PREFIX) as ENTRIES
//   If fails, END
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $])
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.



module.exports = glob

var fs = require("fs")
, minimatch = require("minimatch")
, Minimatch = minimatch.Minimatch
, inherits = require("inherits")
, EE = require("events").EventEmitter
, path = require("path")
, isDir = {}
, assert = require("assert").ok

function glob (pattern, options, cb) {
  if (typeof options === "function") cb = options, options = {}
  if (!options) options = {}

  if (typeof options === "number") {
    deprecated()
    return
  }

  var g = new Glob(pattern, options, cb)
  return g.sync ? g.found : g
}

glob.fnmatch = deprecated

function deprecated () {
  throw new Error("glob's interface has changed. Please see the docs.")
}

glob.sync = globSync
function globSync (pattern, options) {
  if (typeof options === "number") {
    deprecated()
    return
  }

  options = options || {}
  options.sync = true
  return glob(pattern, options)
}

this._processingEmitQueue = false

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (!(this instanceof Glob)) {
    return new Glob(pattern, options, cb)
  }

  if (typeof options === "function") {
    cb = options
    options = null
  }

  if (typeof cb === "function") {
    this.on("error", cb)
    this.on("end", function (matches) {
      cb(null, matches)
    })
  }

  options = options || {}

  this._endEmitted = false
  this.EOF = {}
  this._emitQueue = []

  this.paused = false
  this._processingEmitQueue = false

  this.maxDepth = options.maxDepth || 1000
  this.maxLength = options.maxLength || Infinity
  this.cache = options.cache || {}
  this.statCache = options.statCache || {}

  this.changedCwd = false
  var cwd = process.cwd()
  if (!options.hasOwnProperty("cwd")) this.cwd = cwd
  else {
    this.cwd = options.cwd
    this.changedCwd = path.resolve(options.cwd) !== cwd
  }

  this.root = options.root || path.resolve(this.cwd, "/")
  this.root = path.resolve(this.root)
  if (process.platform === "win32")
    this.root = this.root.replace(/\\/g, "/")

  this.nomount = !!options.nomount

  if (!pattern) {
    throw new Error("must provide pattern")
  }

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/")) {
    if (options.noglobstar) {
      throw new Error("base matching requires globstar")
    }
    pattern = "**/" + pattern
  }

  this.strict = options.strict !== false
  this.dot = !!options.dot
  this.mark = !!options.mark
  this.sync = !!options.sync
  this.nounique = !!options.nounique
  this.nonull = !!options.nonull
  this.nosort = !!options.nosort
  this.nocase = !!options.nocase
  this.stat = !!options.stat

  this.debug = !!options.debug || !!options.globDebug
  if (this.debug)
    this.log = console.error

  this.silent = !!options.silent

  var mm = this.minimatch = new Minimatch(pattern, options)
  this.options = mm.options
  pattern = this.pattern = mm.pattern

  this.error = null
  this.aborted = false

  // list of all the patterns that ** has resolved do, so
  // we can avoid visiting multiple times.
  this._globstars = {}

  EE.call(this)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  this.minimatch.set.forEach(iterator.bind(this))
  function iterator (pattern, i, set) {
    this._process(pattern, 0, i, function (er) {
      if (er) this.emit("error", er)
      if (-- n <= 0) this._finish()
    })
  }
}

Glob.prototype.log = function () {}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)

  var nou = this.nounique
  , all = nou ? [] : {}

  for (var i = 0, l = this.matches.length; i < l; i ++) {
    var matches = this.matches[i]
    this.log("matches[%d] =", i, matches)
    // do like the shell, and spit out the literal glob
    if (!matches) {
      if (this.nonull) {
        var literal = this.minimatch.globSet[i]
        if (nou) all.push(literal)
        else all[literal] = true
      }
    } else {
      // had matches
      var m = Object.keys(matches)
      if (nou) all.push.apply(all, m)
      else m.forEach(function (m) {
        all[m] = true
      })
    }
  }

  if (!nou) all = Object.keys(all)

  if (!this.nosort) {
    all = all.sort(this.nocase ? alphasorti : alphasort)
  }

  if (this.mark) {
    // at *some* point we statted all of these
    all = all.map(this._mark, this)
  }

  this.log("emitting end", all)

  this.EOF = this.found = all
  this.emitMatch(this.EOF)
}

function alphasorti (a, b) {
  a = a.toLowerCase()
  b = b.toLowerCase()
  return alphasort(a, b)
}

function alphasort (a, b) {
  return a > b ? 1 : a < b ? -1 : 0
}

Glob.prototype._mark = function (p) {
  var c = this.cache[p]
  var m = p
  if (c) {
    var isDir = c === 2 || Array.isArray(c)
    var slash = p.slice(-1) === '/'

    if (isDir && !slash)
      m += '/'
    else if (!isDir && slash)
      m = m.slice(0, -1)

    if (m !== p) {
      this.statCache[m] = this.statCache[p]
      this.cache[m] = this.cache[p]
    }
  }

  return m
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit("abort")
}

Glob.prototype.pause = function () {
  if (this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = true
  this.emit("pause")
}

Glob.prototype.resume = function () {
  if (!this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = false
  this.emit("resume")
  this._processEmitQueue()
  //process.nextTick(this.emit.bind(this, "resume"))
}

Glob.prototype.emitMatch = function (m) {
  this.log('emitMatch', m)
  this._emitQueue.push(m)
  this._processEmitQueue()
}

Glob.prototype._processEmitQueue = function (m) {
  this.log("pEQ paused=%j processing=%j m=%j", this.paused,
           this._processingEmitQueue, m)
  var done = false
  while (!this._processingEmitQueue &&
         !this.paused) {
    this._processingEmitQueue = true
    var m = this._emitQueue.shift()
    this.log(">processEmitQueue", m === this.EOF ? ":EOF:" : m)
    if (!m) {
      this.log(">processEmitQueue, falsey m")
      this._processingEmitQueue = false
      break
    }

    if (m === this.EOF || !(this.mark && !this.stat)) {
      this.log("peq: unmarked, or eof")
      next.call(this, 0, false)
    } else if (this.statCache[m]) {
      var sc = this.statCache[m]
      var exists
      if (sc)
        exists = sc.isDirectory() ? 2 : 1
      this.log("peq: stat cached")
      next.call(this, exists, exists === 2)
    } else {
      this.log("peq: _stat, then next")
      this._stat(m, next)
    }

    function next(exists, isDir) {
      this.log("next", m, exists, isDir)
      var ev = m === this.EOF ? "end" : "match"

      // "end" can only happen once.
      assert(!this._endEmitted)
      if (ev === "end")
        this._endEmitted = true

      if (exists) {
        // Doesn't mean it necessarily doesn't exist, it's possible
        // we just didn't check because we don't care that much, or
        // this is EOF anyway.
        if (isDir && !m.match(/\/$/)) {
          m = m + "/"
        } else if (!isDir && m.match(/\/$/)) {
          m = m.replace(/\/+$/, "")
        }
      }
      this.log("emit", ev, m)
      this.emit(ev, m)
      this._processingEmitQueue = false
      if (done && m !== this.EOF && !this.paused)
        this._processEmitQueue()
    }
  }
  done = true
}

Glob.prototype._process = function (pattern, depth, index, cb_) {
  assert(this instanceof Glob)

  var cb = function cb (er, res) {
    assert(this instanceof Glob)
    if (this.paused) {
      if (!this._processQueue) {
        this._processQueue = []
        this.once("resume", function () {
          var q = this._processQueue
          this._processQueue = null
          q.forEach(function (cb) { cb() })
        })
      }
      this._processQueue.push(cb_.bind(this, er, res))
    } else {
      cb_.call(this, er, res)
    }
  }.bind(this)

  if (this.aborted) return cb()

  if (depth > this.maxDepth) return cb()

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === "string") {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      prefix = pattern.join("/")
      this._stat(prefix, function (exists, isDir) {
        // either it's there, or it isn't.
        // nothing more to do, either way.
        if (exists) {
          if (prefix && isAbsolute(prefix) && !this.nomount) {
            if (prefix.charAt(0) === "/") {
              prefix = path.join(this.root, prefix)
            } else {
              prefix = path.resolve(this.root, prefix)
            }
          }

          if (process.platform === "win32")
            prefix = prefix.replace(/\\/g, "/")

          this.matches[index] = this.matches[index] || {}
          this.matches[index][prefix] = true
          this.emitMatch(prefix)
        }
        return cb()
      })
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n)
      prefix = prefix.join("/")
      break
  }

  // get the list of entries.
  var read
  if (prefix === null) read = "."
  else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
    if (!prefix || !isAbsolute(prefix)) {
      prefix = path.join("/", prefix)
    }
    read = prefix = path.resolve(prefix)

    // if (process.platform === "win32")
    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\/g, "/")

    this.log('absolute: ', prefix, this.root, pattern, read)
  } else {
    read = prefix
  }

  this.log('readdir(%j)', read, this.cwd, this.root)

  return this._readdir(read, function (er, entries) {
    if (er) {
      // not a directory!
      // this means that, whatever else comes after this, it can never match
      return cb()
    }

    // globstar is special
    if (pattern[n] === minimatch.GLOBSTAR) {
      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]
      entries.forEach(function (e) {
        if (e.charAt(0) === "." && !this.dot) return
        // instead of the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))
        // below the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))
      }, this)

      s = s.filter(function (pattern) {
        var key = gsKey(pattern)
        var seen = !this._globstars[key]
        this._globstars[key] = true
        return seen
      }, this)

      if (!s.length)
        return cb()

      // now asyncForEach over this
      var l = s.length
      , errState = null
      s.forEach(function (gsPattern) {
        this._process(gsPattern, depth + 1, index, function (er) {
          if (errState) return
          if (er) return cb(errState = er)
          if (--l <= 0) return cb()
        })
      }, this)

      return
    }

    // not a globstar
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = pattern[n]
    var rawGlob = pattern[n]._glob
    , dotOk = this.dot || rawGlob.charAt(0) === "."

    entries = entries.filter(function (e) {
      return (e.charAt(0) !== "." || dotOk) &&
             e.match(pattern[n])
    })

    // If n === pattern.length - 1, then there's no need for the extra stat
    // *unless* the user has specified "mark" or "stat" explicitly.
    // We know that they exist, since the readdir returned them.
    if (n === pattern.length - 1 &&
        !this.mark &&
        !this.stat) {
      entries.forEach(function (e) {
        if (prefix) {
          if (prefix !== "/") e = prefix + "/" + e
          else e = prefix + e
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path.join(this.root, e)
        }

        if (process.platform === "win32")
          e = e.replace(/\\/g, "/")

        this.matches[index] = this.matches[index] || {}
        this.matches[index][e] = true
        this.emitMatch(e)
      }, this)
      return cb.call(this)
    }


    // now test all the remaining entries as stand-ins for that part
    // of the pattern.
    var l = entries.length
    , errState = null
    if (l === 0) return cb() // no matches possible
    entries.forEach(function (e) {
      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))
      this._process(p, depth + 1, index, function (er) {
        if (errState) return
        if (er) return cb(errState = er)
        if (--l === 0) return cb.call(this)
      })
    }, this)
  })

}

function gsKey (pattern) {
  return '**' + pattern.map(function (p) {
    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)
  }).join('/')
}

Glob.prototype._stat = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterStat(f, abs, cb, er)
  }

  this.log('stat', [this.cwd, f, '=', abs])

  if (!this.stat && this.cache.hasOwnProperty(f)) {
    var exists = this.cache[f]
    , isDir = exists && (Array.isArray(exists) || exists === 2)
    if (this.sync) return cb.call(this, !!exists, isDir)
    return process.nextTick(cb.bind(this, !!exists, isDir))
  }

  var stat = this.statCache[abs]
  if (this.sync || stat) {
    var er
    try {
      stat = fs.statSync(abs)
    } catch (e) {
      er = e
    }
    this._afterStat(f, abs, cb, er, stat)
  } else {
    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))
  }
}

Glob.prototype._afterStat = function (f, abs, cb, er, stat) {
  var exists
  assert(this instanceof Glob)

  if (abs.slice(-1) === "/" && stat && !stat.isDirectory()) {
    this.log("should be ENOTDIR, fake it")

    er = new Error("ENOTDIR, not a directory '" + abs + "'")
    er.path = abs
    er.code = "ENOTDIR"
    stat = null
  }

  var emit = !this.statCache[abs]
  this.statCache[abs] = stat

  if (er || !stat) {
    exists = false
  } else {
    exists = stat.isDirectory() ? 2 : 1
    if (emit)
      this.emit('stat', f, stat)
  }
  this.cache[f] = this.cache[f] || exists
  cb.call(this, !!exists, exists === 2)
}

Glob.prototype._readdir = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (isAbsolute(f)) {
    abs = f
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterReaddir(f, abs, cb, er)
  }

  this.log('readdir', [this.cwd, f, abs])
  if (this.cache.hasOwnProperty(f)) {
    var c = this.cache[f]
    if (Array.isArray(c)) {
      if (this.sync) return cb.call(this, null, c)
      return process.nextTick(cb.bind(this, null, c))
    }

    if (!c || c === 1) {
      // either ENOENT or ENOTDIR
      var code = c ? "ENOTDIR" : "ENOENT"
      , er = new Error((c ? "Not a directory" : "Not found") + ": " + f)
      er.path = f
      er.code = code
      this.log(f, er)
      if (this.sync) return cb.call(this, er)
      return process.nextTick(cb.bind(this, er))
    }

    // at this point, c === 2, meaning it's a dir, but we haven't
    // had to read it yet, or c === true, meaning it's *something*
    // but we don't have any idea what.  Need to read it, either way.
  }

  if (this.sync) {
    var er, entries
    try {
      entries = fs.readdirSync(abs)
    } catch (e) {
      er = e
    }
    return this._afterReaddir(f, abs, cb, er, entries)
  }

  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))
}

Glob.prototype._afterReaddir = function (f, abs, cb, er, entries) {
  assert(this instanceof Glob)
  if (entries && !er) {
    this.cache[f] = entries
    // if we haven't asked to stat everything for suresies, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.  This also gets us one step
    // further into ELOOP territory.
    if (!this.mark && !this.stat) {
      entries.forEach(function (e) {
        if (f === "/") e = f + e
        else e = f + "/" + e
        this.cache[e] = true
      }, this)
    }

    return cb.call(this, er, entries)
  }

  // now handle errors, and cache the information
  if (er) switch (er.code) {
    case "ENOTDIR": // totally normal. means it *does* exist.
      this.cache[f] = 1
      return cb.call(this, er)
    case "ENOENT": // not terribly unusual
    case "ELOOP":
    case "ENAMETOOLONG":
    case "UNKNOWN":
      this.cache[f] = false
      return cb.call(this, er)
    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) this.emit("error", er)
      if (!this.silent) console.error("glob error", er)
      return cb.call(this, er)
  }
}

var isAbsolute = process.platform === "win32" ? absWin : absUnix

function absWin (p) {
  if (absUnix(p)) return true
  // pull off the device/UNC bit from a windows path.
  // from node's lib/path.js
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/
    , result = splitDeviceRe.exec(p)
    , device = result[1] || ''
    , isUnc = device && device.charAt(1) !== ':'
    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute

  return isAbsolute
}

function absUnix (p) {
  return p.charAt(0) === "/" || p === ""
}
 at SyntaxError: Unexpected token (46:2)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"_bound":2}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"_bound":3,"ExpansionArg_int":0} start 45.3454 took 20.9775s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"_bound":3,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (46:2) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
// readdir(PREFIX) as ENTRIES
//   If fails, END
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $])
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.



module.exports = glob

var fs = require("fs")
, minimatch = require("minimatch")
, Minimatch = minimatch.Minimatch
, inherits = require("inherits")
, EE = require("events").EventEmitter
, path = require("path")
, isDir = {}
, assert = require("assert").ok

function glob (pattern, options, cb) {
  if (typeof options === "function") cb = options, options = {}
  if (!options) options = {}

  if (typeof options === "number") {
    deprecated()
    return
  }

  var g = new Glob(pattern, options, cb)
  return g.sync ? g.found : g
}

glob.fnmatch = deprecated

function deprecated () {
  throw new Error("glob's interface has changed. Please see the docs.")
}

glob.sync = globSync
function globSync (pattern, options) {
  if (typeof options === "number") {
    deprecated()
    return
  }

  options = options || {}
  options.sync = true
  return glob(pattern, options)
}

this._processingEmitQueue = false

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (!(this instanceof Glob)) {
    return new Glob(pattern, options, cb)
  }

  if (typeof options === "function") {
    cb = options
    options = null
  }

  if (typeof cb === "function") {
    this.on("error", cb)
    this.on("end", function (matches) {
      cb(null, matches)
    })
  }

  options = options || {}

  this._endEmitted = false
  this.EOF = {}
  this._emitQueue = []

  this.paused = false
  this._processingEmitQueue = false

  this.maxDepth = options.maxDepth || 1000
  this.maxLength = options.maxLength || Infinity
  this.cache = options.cache || {}
  this.statCache = options.statCache || {}

  this.changedCwd = false
  var cwd = process.cwd()
  if (!options.hasOwnProperty("cwd")) this.cwd = cwd
  else {
    this.cwd = options.cwd
    this.changedCwd = path.resolve(options.cwd) !== cwd
  }

  this.root = options.root || path.resolve(this.cwd, "/")
  this.root = path.resolve(this.root)
  if (process.platform === "win32")
    this.root = this.root.replace(/\\/g, "/")

  this.nomount = !!options.nomount

  if (!pattern) {
    throw new Error("must provide pattern")
  }

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/")) {
    if (options.noglobstar) {
      throw new Error("base matching requires globstar")
    }
    pattern = "**/" + pattern
  }

  this.strict = options.strict !== false
  this.dot = !!options.dot
  this.mark = !!options.mark
  this.sync = !!options.sync
  this.nounique = !!options.nounique
  this.nonull = !!options.nonull
  this.nosort = !!options.nosort
  this.nocase = !!options.nocase
  this.stat = !!options.stat

  this.debug = !!options.debug || !!options.globDebug
  if (this.debug)
    this.log = console.error

  this.silent = !!options.silent

  var mm = this.minimatch = new Minimatch(pattern, options)
  this.options = mm.options
  pattern = this.pattern = mm.pattern

  this.error = null
  this.aborted = false

  // list of all the patterns that ** has resolved do, so
  // we can avoid visiting multiple times.
  this._globstars = {}

  EE.call(this)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  this.minimatch.set.forEach(iterator.bind(this))
  function iterator (pattern, i, set) {
    this._process(pattern, 0, i, function (er) {
      if (er) this.emit("error", er)
      if (-- n <= 0) this._finish()
    })
  }
}

Glob.prototype.log = function () {}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)

  var nou = this.nounique
  , all = nou ? [] : {}

  for (var i = 0, l = this.matches.length; i < l; i ++) {
    var matches = this.matches[i]
    this.log("matches[%d] =", i, matches)
    // do like the shell, and spit out the literal glob
    if (!matches) {
      if (this.nonull) {
        var literal = this.minimatch.globSet[i]
        if (nou) all.push(literal)
        else all[literal] = true
      }
    } else {
      // had matches
      var m = Object.keys(matches)
      if (nou) all.push.apply(all, m)
      else m.forEach(function (m) {
        all[m] = true
      })
    }
  }

  if (!nou) all = Object.keys(all)

  if (!this.nosort) {
    all = all.sort(this.nocase ? alphasorti : alphasort)
  }

  if (this.mark) {
    // at *some* point we statted all of these
    all = all.map(this._mark, this)
  }

  this.log("emitting end", all)

  this.EOF = this.found = all
  this.emitMatch(this.EOF)
}

function alphasorti (a, b) {
  a = a.toLowerCase()
  b = b.toLowerCase()
  return alphasort(a, b)
}

function alphasort (a, b) {
  return a > b ? 1 : a < b ? -1 : 0
}

Glob.prototype._mark = function (p) {
  var c = this.cache[p]
  var m = p
  if (c) {
    var isDir = c === 2 || Array.isArray(c)
    var slash = p.slice(-1) === '/'

    if (isDir && !slash)
      m += '/'
    else if (!isDir && slash)
      m = m.slice(0, -1)

    if (m !== p) {
      this.statCache[m] = this.statCache[p]
      this.cache[m] = this.cache[p]
    }
  }

  return m
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit("abort")
}

Glob.prototype.pause = function () {
  if (this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = true
  this.emit("pause")
}

Glob.prototype.resume = function () {
  if (!this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = false
  this.emit("resume")
  this._processEmitQueue()
  //process.nextTick(this.emit.bind(this, "resume"))
}

Glob.prototype.emitMatch = function (m) {
  this.log('emitMatch', m)
  this._emitQueue.push(m)
  this._processEmitQueue()
}

Glob.prototype._processEmitQueue = function (m) {
  this.log("pEQ paused=%j processing=%j m=%j", this.paused,
           this._processingEmitQueue, m)
  var done = false
  while (!this._processingEmitQueue &&
         !this.paused) {
    this._processingEmitQueue = true
    var m = this._emitQueue.shift()
    this.log(">processEmitQueue", m === this.EOF ? ":EOF:" : m)
    if (!m) {
      this.log(">processEmitQueue, falsey m")
      this._processingEmitQueue = false
      break
    }

    if (m === this.EOF || !(this.mark && !this.stat)) {
      this.log("peq: unmarked, or eof")
      next.call(this, 0, false)
    } else if (this.statCache[m]) {
      var sc = this.statCache[m]
      var exists
      if (sc)
        exists = sc.isDirectory() ? 2 : 1
      this.log("peq: stat cached")
      next.call(this, exists, exists === 2)
    } else {
      this.log("peq: _stat, then next")
      this._stat(m, next)
    }

    function next(exists, isDir) {
      this.log("next", m, exists, isDir)
      var ev = m === this.EOF ? "end" : "match"

      // "end" can only happen once.
      assert(!this._endEmitted)
      if (ev === "end")
        this._endEmitted = true

      if (exists) {
        // Doesn't mean it necessarily doesn't exist, it's possible
        // we just didn't check because we don't care that much, or
        // this is EOF anyway.
        if (isDir && !m.match(/\/$/)) {
          m = m + "/"
        } else if (!isDir && m.match(/\/$/)) {
          m = m.replace(/\/+$/, "")
        }
      }
      this.log("emit", ev, m)
      this.emit(ev, m)
      this._processingEmitQueue = false
      if (done && m !== this.EOF && !this.paused)
        this._processEmitQueue()
    }
  }
  done = true
}

Glob.prototype._process = function (pattern, depth, index, cb_) {
  assert(this instanceof Glob)

  var cb = function cb (er, res) {
    assert(this instanceof Glob)
    if (this.paused) {
      if (!this._processQueue) {
        this._processQueue = []
        this.once("resume", function () {
          var q = this._processQueue
          this._processQueue = null
          q.forEach(function (cb) { cb() })
        })
      }
      this._processQueue.push(cb_.bind(this, er, res))
    } else {
      cb_.call(this, er, res)
    }
  }.bind(this)

  if (this.aborted) return cb()

  if (depth > this.maxDepth) return cb()

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === "string") {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      prefix = pattern.join("/")
      this._stat(prefix, function (exists, isDir) {
        // either it's there, or it isn't.
        // nothing more to do, either way.
        if (exists) {
          if (prefix && isAbsolute(prefix) && !this.nomount) {
            if (prefix.charAt(0) === "/") {
              prefix = path.join(this.root, prefix)
            } else {
              prefix = path.resolve(this.root, prefix)
            }
          }

          if (process.platform === "win32")
            prefix = prefix.replace(/\\/g, "/")

          this.matches[index] = this.matches[index] || {}
          this.matches[index][prefix] = true
          this.emitMatch(prefix)
        }
        return cb()
      })
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n)
      prefix = prefix.join("/")
      break
  }

  // get the list of entries.
  var read
  if (prefix === null) read = "."
  else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
    if (!prefix || !isAbsolute(prefix)) {
      prefix = path.join("/", prefix)
    }
    read = prefix = path.resolve(prefix)

    // if (process.platform === "win32")
    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\/g, "/")

    this.log('absolute: ', prefix, this.root, pattern, read)
  } else {
    read = prefix
  }

  this.log('readdir(%j)', read, this.cwd, this.root)

  return this._readdir(read, function (er, entries) {
    if (er) {
      // not a directory!
      // this means that, whatever else comes after this, it can never match
      return cb()
    }

    // globstar is special
    if (pattern[n] === minimatch.GLOBSTAR) {
      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]
      entries.forEach(function (e) {
        if (e.charAt(0) === "." && !this.dot) return
        // instead of the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))
        // below the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))
      }, this)

      s = s.filter(function (pattern) {
        var key = gsKey(pattern)
        var seen = !this._globstars[key]
        this._globstars[key] = true
        return seen
      }, this)

      if (!s.length)
        return cb()

      // now asyncForEach over this
      var l = s.length
      , errState = null
      s.forEach(function (gsPattern) {
        this._process(gsPattern, depth + 1, index, function (er) {
          if (errState) return
          if (er) return cb(errState = er)
          if (--l <= 0) return cb()
        })
      }, this)

      return
    }

    // not a globstar
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = pattern[n]
    var rawGlob = pattern[n]._glob
    , dotOk = this.dot || rawGlob.charAt(0) === "."

    entries = entries.filter(function (e) {
      return (e.charAt(0) !== "." || dotOk) &&
             e.match(pattern[n])
    })

    // If n === pattern.length - 1, then there's no need for the extra stat
    // *unless* the user has specified "mark" or "stat" explicitly.
    // We know that they exist, since the readdir returned them.
    if (n === pattern.length - 1 &&
        !this.mark &&
        !this.stat) {
      entries.forEach(function (e) {
        if (prefix) {
          if (prefix !== "/") e = prefix + "/" + e
          else e = prefix + e
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path.join(this.root, e)
        }

        if (process.platform === "win32")
          e = e.replace(/\\/g, "/")

        this.matches[index] = this.matches[index] || {}
        this.matches[index][e] = true
        this.emitMatch(e)
      }, this)
      return cb.call(this)
    }


    // now test all the remaining entries as stand-ins for that part
    // of the pattern.
    var l = entries.length
    , errState = null
    if (l === 0) return cb() // no matches possible
    entries.forEach(function (e) {
      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))
      this._process(p, depth + 1, index, function (er) {
        if (errState) return
        if (er) return cb(errState = er)
        if (--l === 0) return cb.call(this)
      })
    }, this)
  })

}

function gsKey (pattern) {
  return '**' + pattern.map(function (p) {
    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)
  }).join('/')
}

Glob.prototype._stat = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterStat(f, abs, cb, er)
  }

  this.log('stat', [this.cwd, f, '=', abs])

  if (!this.stat && this.cache.hasOwnProperty(f)) {
    var exists = this.cache[f]
    , isDir = exists && (Array.isArray(exists) || exists === 2)
    if (this.sync) return cb.call(this, !!exists, isDir)
    return process.nextTick(cb.bind(this, !!exists, isDir))
  }

  var stat = this.statCache[abs]
  if (this.sync || stat) {
    var er
    try {
      stat = fs.statSync(abs)
    } catch (e) {
      er = e
    }
    this._afterStat(f, abs, cb, er, stat)
  } else {
    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))
  }
}

Glob.prototype._afterStat = function (f, abs, cb, er, stat) {
  var exists
  assert(this instanceof Glob)

  if (abs.slice(-1) === "/" && stat && !stat.isDirectory()) {
    this.log("should be ENOTDIR, fake it")

    er = new Error("ENOTDIR, not a directory '" + abs + "'")
    er.path = abs
    er.code = "ENOTDIR"
    stat = null
  }

  var emit = !this.statCache[abs]
  this.statCache[abs] = stat

  if (er || !stat) {
    exists = false
  } else {
    exists = stat.isDirectory() ? 2 : 1
    if (emit)
      this.emit('stat', f, stat)
  }
  this.cache[f] = this.cache[f] || exists
  cb.call(this, !!exists, exists === 2)
}

Glob.prototype._readdir = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (isAbsolute(f)) {
    abs = f
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterReaddir(f, abs, cb, er)
  }

  this.log('readdir', [this.cwd, f, abs])
  if (this.cache.hasOwnProperty(f)) {
    var c = this.cache[f]
    if (Array.isArray(c)) {
      if (this.sync) return cb.call(this, null, c)
      return process.nextTick(cb.bind(this, null, c))
    }

    if (!c || c === 1) {
      // either ENOENT or ENOTDIR
      var code = c ? "ENOTDIR" : "ENOENT"
      , er = new Error((c ? "Not a directory" : "Not found") + ": " + f)
      er.path = f
      er.code = code
      this.log(f, er)
      if (this.sync) return cb.call(this, er)
      return process.nextTick(cb.bind(this, er))
    }

    // at this point, c === 2, meaning it's a dir, but we haven't
    // had to read it yet, or c === true, meaning it's *something*
    // but we don't have any idea what.  Need to read it, either way.
  }

  if (this.sync) {
    var er, entries
    try {
      entries = fs.readdirSync(abs)
    } catch (e) {
      er = e
    }
    return this._afterReaddir(f, abs, cb, er, entries)
  }

  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))
}

Glob.prototype._afterReaddir = function (f, abs, cb, er, entries) {
  assert(this instanceof Glob)
  if (entries && !er) {
    this.cache[f] = entries
    // if we haven't asked to stat everything for suresies, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.  This also gets us one step
    // further into ELOOP territory.
    if (!this.mark && !this.stat) {
      entries.forEach(function (e) {
        if (f === "/") e = f + e
        else e = f + "/" + e
        this.cache[e] = true
      }, this)
    }

    return cb.call(this, er, entries)
  }

  // now handle errors, and cache the information
  if (er) switch (er.code) {
    case "ENOTDIR": // totally normal. means it *does* exist.
      this.cache[f] = 1
      return cb.call(this, er)
    case "ENOENT": // not terribly unusual
    case "ELOOP":
    case "ENAMETOOLONG":
    case "UNKNOWN":
      this.cache[f] = false
      return cb.call(this, er)
    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) this.emit("error", er)
      if (!this.silent) console.error("glob error", er)
      return cb.call(this, er)
  }
}

var isAbsolute = process.platform === "win32" ? absWin : absUnix

function absWin (p) {
  if (absUnix(p)) return true
  // pull off the device/UNC bit from a windows path.
  // from node's lib/path.js
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/
    , result = splitDeviceRe.exec(p)
    , device = result[1] || ''
    , isUnc = device && device.charAt(1) !== ':'
    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute

  return isAbsolute
}

function absUnix (p) {
  return p.charAt(0) === "/" || p === ""
}
 at SyntaxError: Unexpected token (46:2)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4,"ExpansionArg_string":"PureString"} start 66.6201 took 21.3157s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (46:2) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
// readdir(PREFIX) as ENTRIES
//   If fails, END
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $])
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.



module.exports = glob

var fs = require("fs")
, minimatch = require("minimatch")
, Minimatch = minimatch.Minimatch
, inherits = require("inherits")
, EE = require("events").EventEmitter
, path = require("path")
, isDir = {}
, assert = require("assert").ok

function glob (pattern, options, cb) {
  if (typeof options === "function") cb = options, options = {}
  if (!options) options = {}

  if (typeof options === "number") {
    deprecated()
    return
  }

  var g = new Glob(pattern, options, cb)
  return g.sync ? g.found : g
}

glob.fnmatch = deprecated

function deprecated () {
  throw new Error("glob's interface has changed. Please see the docs.")
}

glob.sync = globSync
function globSync (pattern, options) {
  if (typeof options === "number") {
    deprecated()
    return
  }

  options = options || {}
  options.sync = true
  return glob(pattern, options)
}

this._processingEmitQueue = false

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (!(this instanceof Glob)) {
    return new Glob(pattern, options, cb)
  }

  if (typeof options === "function") {
    cb = options
    options = null
  }

  if (typeof cb === "function") {
    this.on("error", cb)
    this.on("end", function (matches) {
      cb(null, matches)
    })
  }

  options = options || {}

  this._endEmitted = false
  this.EOF = {}
  this._emitQueue = []

  this.paused = false
  this._processingEmitQueue = false

  this.maxDepth = options.maxDepth || 1000
  this.maxLength = options.maxLength || Infinity
  this.cache = options.cache || {}
  this.statCache = options.statCache || {}

  this.changedCwd = false
  var cwd = process.cwd()
  if (!options.hasOwnProperty("cwd")) this.cwd = cwd
  else {
    this.cwd = options.cwd
    this.changedCwd = path.resolve(options.cwd) !== cwd
  }

  this.root = options.root || path.resolve(this.cwd, "/")
  this.root = path.resolve(this.root)
  if (process.platform === "win32")
    this.root = this.root.replace(/\\/g, "/")

  this.nomount = !!options.nomount

  if (!pattern) {
    throw new Error("must provide pattern")
  }

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/")) {
    if (options.noglobstar) {
      throw new Error("base matching requires globstar")
    }
    pattern = "**/" + pattern
  }

  this.strict = options.strict !== false
  this.dot = !!options.dot
  this.mark = !!options.mark
  this.sync = !!options.sync
  this.nounique = !!options.nounique
  this.nonull = !!options.nonull
  this.nosort = !!options.nosort
  this.nocase = !!options.nocase
  this.stat = !!options.stat

  this.debug = !!options.debug || !!options.globDebug
  if (this.debug)
    this.log = console.error

  this.silent = !!options.silent

  var mm = this.minimatch = new Minimatch(pattern, options)
  this.options = mm.options
  pattern = this.pattern = mm.pattern

  this.error = null
  this.aborted = false

  // list of all the patterns that ** has resolved do, so
  // we can avoid visiting multiple times.
  this._globstars = {}

  EE.call(this)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  this.minimatch.set.forEach(iterator.bind(this))
  function iterator (pattern, i, set) {
    this._process(pattern, 0, i, function (er) {
      if (er) this.emit("error", er)
      if (-- n <= 0) this._finish()
    })
  }
}

Glob.prototype.log = function () {}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)

  var nou = this.nounique
  , all = nou ? [] : {}

  for (var i = 0, l = this.matches.length; i < l; i ++) {
    var matches = this.matches[i]
    this.log("matches[%d] =", i, matches)
    // do like the shell, and spit out the literal glob
    if (!matches) {
      if (this.nonull) {
        var literal = this.minimatch.globSet[i]
        if (nou) all.push(literal)
        else all[literal] = true
      }
    } else {
      // had matches
      var m = Object.keys(matches)
      if (nou) all.push.apply(all, m)
      else m.forEach(function (m) {
        all[m] = true
      })
    }
  }

  if (!nou) all = Object.keys(all)

  if (!this.nosort) {
    all = all.sort(this.nocase ? alphasorti : alphasort)
  }

  if (this.mark) {
    // at *some* point we statted all of these
    all = all.map(this._mark, this)
  }

  this.log("emitting end", all)

  this.EOF = this.found = all
  this.emitMatch(this.EOF)
}

function alphasorti (a, b) {
  a = a.toLowerCase()
  b = b.toLowerCase()
  return alphasort(a, b)
}

function alphasort (a, b) {
  return a > b ? 1 : a < b ? -1 : 0
}

Glob.prototype._mark = function (p) {
  var c = this.cache[p]
  var m = p
  if (c) {
    var isDir = c === 2 || Array.isArray(c)
    var slash = p.slice(-1) === '/'

    if (isDir && !slash)
      m += '/'
    else if (!isDir && slash)
      m = m.slice(0, -1)

    if (m !== p) {
      this.statCache[m] = this.statCache[p]
      this.cache[m] = this.cache[p]
    }
  }

  return m
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit("abort")
}

Glob.prototype.pause = function () {
  if (this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = true
  this.emit("pause")
}

Glob.prototype.resume = function () {
  if (!this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = false
  this.emit("resume")
  this._processEmitQueue()
  //process.nextTick(this.emit.bind(this, "resume"))
}

Glob.prototype.emitMatch = function (m) {
  this.log('emitMatch', m)
  this._emitQueue.push(m)
  this._processEmitQueue()
}

Glob.prototype._processEmitQueue = function (m) {
  this.log("pEQ paused=%j processing=%j m=%j", this.paused,
           this._processingEmitQueue, m)
  var done = false
  while (!this._processingEmitQueue &&
         !this.paused) {
    this._processingEmitQueue = true
    var m = this._emitQueue.shift()
    this.log(">processEmitQueue", m === this.EOF ? ":EOF:" : m)
    if (!m) {
      this.log(">processEmitQueue, falsey m")
      this._processingEmitQueue = false
      break
    }

    if (m === this.EOF || !(this.mark && !this.stat)) {
      this.log("peq: unmarked, or eof")
      next.call(this, 0, false)
    } else if (this.statCache[m]) {
      var sc = this.statCache[m]
      var exists
      if (sc)
        exists = sc.isDirectory() ? 2 : 1
      this.log("peq: stat cached")
      next.call(this, exists, exists === 2)
    } else {
      this.log("peq: _stat, then next")
      this._stat(m, next)
    }

    function next(exists, isDir) {
      this.log("next", m, exists, isDir)
      var ev = m === this.EOF ? "end" : "match"

      // "end" can only happen once.
      assert(!this._endEmitted)
      if (ev === "end")
        this._endEmitted = true

      if (exists) {
        // Doesn't mean it necessarily doesn't exist, it's possible
        // we just didn't check because we don't care that much, or
        // this is EOF anyway.
        if (isDir && !m.match(/\/$/)) {
          m = m + "/"
        } else if (!isDir && m.match(/\/$/)) {
          m = m.replace(/\/+$/, "")
        }
      }
      this.log("emit", ev, m)
      this.emit(ev, m)
      this._processingEmitQueue = false
      if (done && m !== this.EOF && !this.paused)
        this._processEmitQueue()
    }
  }
  done = true
}

Glob.prototype._process = function (pattern, depth, index, cb_) {
  assert(this instanceof Glob)

  var cb = function cb (er, res) {
    assert(this instanceof Glob)
    if (this.paused) {
      if (!this._processQueue) {
        this._processQueue = []
        this.once("resume", function () {
          var q = this._processQueue
          this._processQueue = null
          q.forEach(function (cb) { cb() })
        })
      }
      this._processQueue.push(cb_.bind(this, er, res))
    } else {
      cb_.call(this, er, res)
    }
  }.bind(this)

  if (this.aborted) return cb()

  if (depth > this.maxDepth) return cb()

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === "string") {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      prefix = pattern.join("/")
      this._stat(prefix, function (exists, isDir) {
        // either it's there, or it isn't.
        // nothing more to do, either way.
        if (exists) {
          if (prefix && isAbsolute(prefix) && !this.nomount) {
            if (prefix.charAt(0) === "/") {
              prefix = path.join(this.root, prefix)
            } else {
              prefix = path.resolve(this.root, prefix)
            }
          }

          if (process.platform === "win32")
            prefix = prefix.replace(/\\/g, "/")

          this.matches[index] = this.matches[index] || {}
          this.matches[index][prefix] = true
          this.emitMatch(prefix)
        }
        return cb()
      })
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n)
      prefix = prefix.join("/")
      break
  }

  // get the list of entries.
  var read
  if (prefix === null) read = "."
  else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
    if (!prefix || !isAbsolute(prefix)) {
      prefix = path.join("/", prefix)
    }
    read = prefix = path.resolve(prefix)

    // if (process.platform === "win32")
    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\/g, "/")

    this.log('absolute: ', prefix, this.root, pattern, read)
  } else {
    read = prefix
  }

  this.log('readdir(%j)', read, this.cwd, this.root)

  return this._readdir(read, function (er, entries) {
    if (er) {
      // not a directory!
      // this means that, whatever else comes after this, it can never match
      return cb()
    }

    // globstar is special
    if (pattern[n] === minimatch.GLOBSTAR) {
      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]
      entries.forEach(function (e) {
        if (e.charAt(0) === "." && !this.dot) return
        // instead of the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))
        // below the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))
      }, this)

      s = s.filter(function (pattern) {
        var key = gsKey(pattern)
        var seen = !this._globstars[key]
        this._globstars[key] = true
        return seen
      }, this)

      if (!s.length)
        return cb()

      // now asyncForEach over this
      var l = s.length
      , errState = null
      s.forEach(function (gsPattern) {
        this._process(gsPattern, depth + 1, index, function (er) {
          if (errState) return
          if (er) return cb(errState = er)
          if (--l <= 0) return cb()
        })
      }, this)

      return
    }

    // not a globstar
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = pattern[n]
    var rawGlob = pattern[n]._glob
    , dotOk = this.dot || rawGlob.charAt(0) === "."

    entries = entries.filter(function (e) {
      return (e.charAt(0) !== "." || dotOk) &&
             e.match(pattern[n])
    })

    // If n === pattern.length - 1, then there's no need for the extra stat
    // *unless* the user has specified "mark" or "stat" explicitly.
    // We know that they exist, since the readdir returned them.
    if (n === pattern.length - 1 &&
        !this.mark &&
        !this.stat) {
      entries.forEach(function (e) {
        if (prefix) {
          if (prefix !== "/") e = prefix + "/" + e
          else e = prefix + e
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path.join(this.root, e)
        }

        if (process.platform === "win32")
          e = e.replace(/\\/g, "/")

        this.matches[index] = this.matches[index] || {}
        this.matches[index][e] = true
        this.emitMatch(e)
      }, this)
      return cb.call(this)
    }


    // now test all the remaining entries as stand-ins for that part
    // of the pattern.
    var l = entries.length
    , errState = null
    if (l === 0) return cb() // no matches possible
    entries.forEach(function (e) {
      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))
      this._process(p, depth + 1, index, function (er) {
        if (errState) return
        if (er) return cb(errState = er)
        if (--l === 0) return cb.call(this)
      })
    }, this)
  })

}

function gsKey (pattern) {
  return '**' + pattern.map(function (p) {
    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)
  }).join('/')
}

Glob.prototype._stat = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterStat(f, abs, cb, er)
  }

  this.log('stat', [this.cwd, f, '=', abs])

  if (!this.stat && this.cache.hasOwnProperty(f)) {
    var exists = this.cache[f]
    , isDir = exists && (Array.isArray(exists) || exists === 2)
    if (this.sync) return cb.call(this, !!exists, isDir)
    return process.nextTick(cb.bind(this, !!exists, isDir))
  }

  var stat = this.statCache[abs]
  if (this.sync || stat) {
    var er
    try {
      stat = fs.statSync(abs)
    } catch (e) {
      er = e
    }
    this._afterStat(f, abs, cb, er, stat)
  } else {
    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))
  }
}

Glob.prototype._afterStat = function (f, abs, cb, er, stat) {
  var exists
  assert(this instanceof Glob)

  if (abs.slice(-1) === "/" && stat && !stat.isDirectory()) {
    this.log("should be ENOTDIR, fake it")

    er = new Error("ENOTDIR, not a directory '" + abs + "'")
    er.path = abs
    er.code = "ENOTDIR"
    stat = null
  }

  var emit = !this.statCache[abs]
  this.statCache[abs] = stat

  if (er || !stat) {
    exists = false
  } else {
    exists = stat.isDirectory() ? 2 : 1
    if (emit)
      this.emit('stat', f, stat)
  }
  this.cache[f] = this.cache[f] || exists
  cb.call(this, !!exists, exists === 2)
}

Glob.prototype._readdir = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (isAbsolute(f)) {
    abs = f
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterReaddir(f, abs, cb, er)
  }

  this.log('readdir', [this.cwd, f, abs])
  if (this.cache.hasOwnProperty(f)) {
    var c = this.cache[f]
    if (Array.isArray(c)) {
      if (this.sync) return cb.call(this, null, c)
      return process.nextTick(cb.bind(this, null, c))
    }

    if (!c || c === 1) {
      // either ENOENT or ENOTDIR
      var code = c ? "ENOTDIR" : "ENOENT"
      , er = new Error((c ? "Not a directory" : "Not found") + ": " + f)
      er.path = f
      er.code = code
      this.log(f, er)
      if (this.sync) return cb.call(this, er)
      return process.nextTick(cb.bind(this, er))
    }

    // at this point, c === 2, meaning it's a dir, but we haven't
    // had to read it yet, or c === true, meaning it's *something*
    // but we don't have any idea what.  Need to read it, either way.
  }

  if (this.sync) {
    var er, entries
    try {
      entries = fs.readdirSync(abs)
    } catch (e) {
      er = e
    }
    return this._afterReaddir(f, abs, cb, er, entries)
  }

  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))
}

Glob.prototype._afterReaddir = function (f, abs, cb, er, entries) {
  assert(this instanceof Glob)
  if (entries && !er) {
    this.cache[f] = entries
    // if we haven't asked to stat everything for suresies, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.  This also gets us one step
    // further into ELOOP territory.
    if (!this.mark && !this.stat) {
      entries.forEach(function (e) {
        if (f === "/") e = f + e
        else e = f + "/" + e
        this.cache[e] = true
      }, this)
    }

    return cb.call(this, er, entries)
  }

  // now handle errors, and cache the information
  if (er) switch (er.code) {
    case "ENOTDIR": // totally normal. means it *does* exist.
      this.cache[f] = 1
      return cb.call(this, er)
    case "ENOENT": // not terribly unusual
    case "ELOOP":
    case "ENAMETOOLONG":
    case "UNKNOWN":
      this.cache[f] = false
      return cb.call(this, er)
    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) this.emit("error", er)
      if (!this.silent) console.error("glob error", er)
      return cb.call(this, er)
  }
}

var isAbsolute = process.platform === "win32" ? absWin : absUnix

function absWin (p) {
  if (absUnix(p)) return true
  // pull off the device/UNC bit from a windows path.
  // from node's lib/path.js
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/
    , result = splitDeviceRe.exec(p)
    , device = result[1] || ''
    , isUnc = device && device.charAt(1) !== ':'
    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute

  return isAbsolute
}

function absUnix (p) {
  return p.charAt(0) === "/" || p === ""
}
 at SyntaxError: Unexpected token (46:2)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5,"ExpansionArg_array_length":0} start 88.0599 took 25.3469s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (46:2) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
// readdir(PREFIX) as ENTRIES
//   If fails, END
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $])
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.



module.exports = glob

var fs = require("fs")
, minimatch = require("minimatch")
, Minimatch = minimatch.Minimatch
, inherits = require("inherits")
, EE = require("events").EventEmitter
, path = require("path")
, isDir = {}
, assert = require("assert").ok

function glob (pattern, options, cb) {
  if (typeof options === "function") cb = options, options = {}
  if (!options) options = {}

  if (typeof options === "number") {
    deprecated()
    return
  }

  var g = new Glob(pattern, options, cb)
  return g.sync ? g.found : g
}

glob.fnmatch = deprecated

function deprecated () {
  throw new Error("glob's interface has changed. Please see the docs.")
}

glob.sync = globSync
function globSync (pattern, options) {
  if (typeof options === "number") {
    deprecated()
    return
  }

  options = options || {}
  options.sync = true
  return glob(pattern, options)
}

this._processingEmitQueue = false

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (!(this instanceof Glob)) {
    return new Glob(pattern, options, cb)
  }

  if (typeof options === "function") {
    cb = options
    options = null
  }

  if (typeof cb === "function") {
    this.on("error", cb)
    this.on("end", function (matches) {
      cb(null, matches)
    })
  }

  options = options || {}

  this._endEmitted = false
  this.EOF = {}
  this._emitQueue = []

  this.paused = false
  this._processingEmitQueue = false

  this.maxDepth = options.maxDepth || 1000
  this.maxLength = options.maxLength || Infinity
  this.cache = options.cache || {}
  this.statCache = options.statCache || {}

  this.changedCwd = false
  var cwd = process.cwd()
  if (!options.hasOwnProperty("cwd")) this.cwd = cwd
  else {
    this.cwd = options.cwd
    this.changedCwd = path.resolve(options.cwd) !== cwd
  }

  this.root = options.root || path.resolve(this.cwd, "/")
  this.root = path.resolve(this.root)
  if (process.platform === "win32")
    this.root = this.root.replace(/\\/g, "/")

  this.nomount = !!options.nomount

  if (!pattern) {
    throw new Error("must provide pattern")
  }

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/")) {
    if (options.noglobstar) {
      throw new Error("base matching requires globstar")
    }
    pattern = "**/" + pattern
  }

  this.strict = options.strict !== false
  this.dot = !!options.dot
  this.mark = !!options.mark
  this.sync = !!options.sync
  this.nounique = !!options.nounique
  this.nonull = !!options.nonull
  this.nosort = !!options.nosort
  this.nocase = !!options.nocase
  this.stat = !!options.stat

  this.debug = !!options.debug || !!options.globDebug
  if (this.debug)
    this.log = console.error

  this.silent = !!options.silent

  var mm = this.minimatch = new Minimatch(pattern, options)
  this.options = mm.options
  pattern = this.pattern = mm.pattern

  this.error = null
  this.aborted = false

  // list of all the patterns that ** has resolved do, so
  // we can avoid visiting multiple times.
  this._globstars = {}

  EE.call(this)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  this.minimatch.set.forEach(iterator.bind(this))
  function iterator (pattern, i, set) {
    this._process(pattern, 0, i, function (er) {
      if (er) this.emit("error", er)
      if (-- n <= 0) this._finish()
    })
  }
}

Glob.prototype.log = function () {}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)

  var nou = this.nounique
  , all = nou ? [] : {}

  for (var i = 0, l = this.matches.length; i < l; i ++) {
    var matches = this.matches[i]
    this.log("matches[%d] =", i, matches)
    // do like the shell, and spit out the literal glob
    if (!matches) {
      if (this.nonull) {
        var literal = this.minimatch.globSet[i]
        if (nou) all.push(literal)
        else all[literal] = true
      }
    } else {
      // had matches
      var m = Object.keys(matches)
      if (nou) all.push.apply(all, m)
      else m.forEach(function (m) {
        all[m] = true
      })
    }
  }

  if (!nou) all = Object.keys(all)

  if (!this.nosort) {
    all = all.sort(this.nocase ? alphasorti : alphasort)
  }

  if (this.mark) {
    // at *some* point we statted all of these
    all = all.map(this._mark, this)
  }

  this.log("emitting end", all)

  this.EOF = this.found = all
  this.emitMatch(this.EOF)
}

function alphasorti (a, b) {
  a = a.toLowerCase()
  b = b.toLowerCase()
  return alphasort(a, b)
}

function alphasort (a, b) {
  return a > b ? 1 : a < b ? -1 : 0
}

Glob.prototype._mark = function (p) {
  var c = this.cache[p]
  var m = p
  if (c) {
    var isDir = c === 2 || Array.isArray(c)
    var slash = p.slice(-1) === '/'

    if (isDir && !slash)
      m += '/'
    else if (!isDir && slash)
      m = m.slice(0, -1)

    if (m !== p) {
      this.statCache[m] = this.statCache[p]
      this.cache[m] = this.cache[p]
    }
  }

  return m
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit("abort")
}

Glob.prototype.pause = function () {
  if (this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = true
  this.emit("pause")
}

Glob.prototype.resume = function () {
  if (!this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = false
  this.emit("resume")
  this._processEmitQueue()
  //process.nextTick(this.emit.bind(this, "resume"))
}

Glob.prototype.emitMatch = function (m) {
  this.log('emitMatch', m)
  this._emitQueue.push(m)
  this._processEmitQueue()
}

Glob.prototype._processEmitQueue = function (m) {
  this.log("pEQ paused=%j processing=%j m=%j", this.paused,
           this._processingEmitQueue, m)
  var done = false
  while (!this._processingEmitQueue &&
         !this.paused) {
    this._processingEmitQueue = true
    var m = this._emitQueue.shift()
    this.log(">processEmitQueue", m === this.EOF ? ":EOF:" : m)
    if (!m) {
      this.log(">processEmitQueue, falsey m")
      this._processingEmitQueue = false
      break
    }

    if (m === this.EOF || !(this.mark && !this.stat)) {
      this.log("peq: unmarked, or eof")
      next.call(this, 0, false)
    } else if (this.statCache[m]) {
      var sc = this.statCache[m]
      var exists
      if (sc)
        exists = sc.isDirectory() ? 2 : 1
      this.log("peq: stat cached")
      next.call(this, exists, exists === 2)
    } else {
      this.log("peq: _stat, then next")
      this._stat(m, next)
    }

    function next(exists, isDir) {
      this.log("next", m, exists, isDir)
      var ev = m === this.EOF ? "end" : "match"

      // "end" can only happen once.
      assert(!this._endEmitted)
      if (ev === "end")
        this._endEmitted = true

      if (exists) {
        // Doesn't mean it necessarily doesn't exist, it's possible
        // we just didn't check because we don't care that much, or
        // this is EOF anyway.
        if (isDir && !m.match(/\/$/)) {
          m = m + "/"
        } else if (!isDir && m.match(/\/$/)) {
          m = m.replace(/\/+$/, "")
        }
      }
      this.log("emit", ev, m)
      this.emit(ev, m)
      this._processingEmitQueue = false
      if (done && m !== this.EOF && !this.paused)
        this._processEmitQueue()
    }
  }
  done = true
}

Glob.prototype._process = function (pattern, depth, index, cb_) {
  assert(this instanceof Glob)

  var cb = function cb (er, res) {
    assert(this instanceof Glob)
    if (this.paused) {
      if (!this._processQueue) {
        this._processQueue = []
        this.once("resume", function () {
          var q = this._processQueue
          this._processQueue = null
          q.forEach(function (cb) { cb() })
        })
      }
      this._processQueue.push(cb_.bind(this, er, res))
    } else {
      cb_.call(this, er, res)
    }
  }.bind(this)

  if (this.aborted) return cb()

  if (depth > this.maxDepth) return cb()

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === "string") {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      prefix = pattern.join("/")
      this._stat(prefix, function (exists, isDir) {
        // either it's there, or it isn't.
        // nothing more to do, either way.
        if (exists) {
          if (prefix && isAbsolute(prefix) && !this.nomount) {
            if (prefix.charAt(0) === "/") {
              prefix = path.join(this.root, prefix)
            } else {
              prefix = path.resolve(this.root, prefix)
            }
          }

          if (process.platform === "win32")
            prefix = prefix.replace(/\\/g, "/")

          this.matches[index] = this.matches[index] || {}
          this.matches[index][prefix] = true
          this.emitMatch(prefix)
        }
        return cb()
      })
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n)
      prefix = prefix.join("/")
      break
  }

  // get the list of entries.
  var read
  if (prefix === null) read = "."
  else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
    if (!prefix || !isAbsolute(prefix)) {
      prefix = path.join("/", prefix)
    }
    read = prefix = path.resolve(prefix)

    // if (process.platform === "win32")
    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\/g, "/")

    this.log('absolute: ', prefix, this.root, pattern, read)
  } else {
    read = prefix
  }

  this.log('readdir(%j)', read, this.cwd, this.root)

  return this._readdir(read, function (er, entries) {
    if (er) {
      // not a directory!
      // this means that, whatever else comes after this, it can never match
      return cb()
    }

    // globstar is special
    if (pattern[n] === minimatch.GLOBSTAR) {
      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]
      entries.forEach(function (e) {
        if (e.charAt(0) === "." && !this.dot) return
        // instead of the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))
        // below the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))
      }, this)

      s = s.filter(function (pattern) {
        var key = gsKey(pattern)
        var seen = !this._globstars[key]
        this._globstars[key] = true
        return seen
      }, this)

      if (!s.length)
        return cb()

      // now asyncForEach over this
      var l = s.length
      , errState = null
      s.forEach(function (gsPattern) {
        this._process(gsPattern, depth + 1, index, function (er) {
          if (errState) return
          if (er) return cb(errState = er)
          if (--l <= 0) return cb()
        })
      }, this)

      return
    }

    // not a globstar
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = pattern[n]
    var rawGlob = pattern[n]._glob
    , dotOk = this.dot || rawGlob.charAt(0) === "."

    entries = entries.filter(function (e) {
      return (e.charAt(0) !== "." || dotOk) &&
             e.match(pattern[n])
    })

    // If n === pattern.length - 1, then there's no need for the extra stat
    // *unless* the user has specified "mark" or "stat" explicitly.
    // We know that they exist, since the readdir returned them.
    if (n === pattern.length - 1 &&
        !this.mark &&
        !this.stat) {
      entries.forEach(function (e) {
        if (prefix) {
          if (prefix !== "/") e = prefix + "/" + e
          else e = prefix + e
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path.join(this.root, e)
        }

        if (process.platform === "win32")
          e = e.replace(/\\/g, "/")

        this.matches[index] = this.matches[index] || {}
        this.matches[index][e] = true
        this.emitMatch(e)
      }, this)
      return cb.call(this)
    }


    // now test all the remaining entries as stand-ins for that part
    // of the pattern.
    var l = entries.length
    , errState = null
    if (l === 0) return cb() // no matches possible
    entries.forEach(function (e) {
      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))
      this._process(p, depth + 1, index, function (er) {
        if (errState) return
        if (er) return cb(errState = er)
        if (--l === 0) return cb.call(this)
      })
    }, this)
  })

}

function gsKey (pattern) {
  return '**' + pattern.map(function (p) {
    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)
  }).join('/')
}

Glob.prototype._stat = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterStat(f, abs, cb, er)
  }

  this.log('stat', [this.cwd, f, '=', abs])

  if (!this.stat && this.cache.hasOwnProperty(f)) {
    var exists = this.cache[f]
    , isDir = exists && (Array.isArray(exists) || exists === 2)
    if (this.sync) return cb.call(this, !!exists, isDir)
    return process.nextTick(cb.bind(this, !!exists, isDir))
  }

  var stat = this.statCache[abs]
  if (this.sync || stat) {
    var er
    try {
      stat = fs.statSync(abs)
    } catch (e) {
      er = e
    }
    this._afterStat(f, abs, cb, er, stat)
  } else {
    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))
  }
}

Glob.prototype._afterStat = function (f, abs, cb, er, stat) {
  var exists
  assert(this instanceof Glob)

  if (abs.slice(-1) === "/" && stat && !stat.isDirectory()) {
    this.log("should be ENOTDIR, fake it")

    er = new Error("ENOTDIR, not a directory '" + abs + "'")
    er.path = abs
    er.code = "ENOTDIR"
    stat = null
  }

  var emit = !this.statCache[abs]
  this.statCache[abs] = stat

  if (er || !stat) {
    exists = false
  } else {
    exists = stat.isDirectory() ? 2 : 1
    if (emit)
      this.emit('stat', f, stat)
  }
  this.cache[f] = this.cache[f] || exists
  cb.call(this, !!exists, exists === 2)
}

Glob.prototype._readdir = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (isAbsolute(f)) {
    abs = f
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterReaddir(f, abs, cb, er)
  }

  this.log('readdir', [this.cwd, f, abs])
  if (this.cache.hasOwnProperty(f)) {
    var c = this.cache[f]
    if (Array.isArray(c)) {
      if (this.sync) return cb.call(this, null, c)
      return process.nextTick(cb.bind(this, null, c))
    }

    if (!c || c === 1) {
      // either ENOENT or ENOTDIR
      var code = c ? "ENOTDIR" : "ENOENT"
      , er = new Error((c ? "Not a directory" : "Not found") + ": " + f)
      er.path = f
      er.code = code
      this.log(f, er)
      if (this.sync) return cb.call(this, er)
      return process.nextTick(cb.bind(this, er))
    }

    // at this point, c === 2, meaning it's a dir, but we haven't
    // had to read it yet, or c === true, meaning it's *something*
    // but we don't have any idea what.  Need to read it, either way.
  }

  if (this.sync) {
    var er, entries
    try {
      entries = fs.readdirSync(abs)
    } catch (e) {
      er = e
    }
    return this._afterReaddir(f, abs, cb, er, entries)
  }

  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))
}

Glob.prototype._afterReaddir = function (f, abs, cb, er, entries) {
  assert(this instanceof Glob)
  if (entries && !er) {
    this.cache[f] = entries
    // if we haven't asked to stat everything for suresies, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.  This also gets us one step
    // further into ELOOP territory.
    if (!this.mark && !this.stat) {
      entries.forEach(function (e) {
        if (f === "/") e = f + e
        else e = f + "/" + e
        this.cache[e] = true
      }, this)
    }

    return cb.call(this, er, entries)
  }

  // now handle errors, and cache the information
  if (er) switch (er.code) {
    case "ENOTDIR": // totally normal. means it *does* exist.
      this.cache[f] = 1
      return cb.call(this, er)
    case "ENOENT": // not terribly unusual
    case "ELOOP":
    case "ENAMETOOLONG":
    case "UNKNOWN":
      this.cache[f] = false
      return cb.call(this, er)
    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) this.emit("error", er)
      if (!this.silent) console.error("glob error", er)
      return cb.call(this, er)
  }
}

var isAbsolute = process.platform === "win32" ? absWin : absUnix

function absWin (p) {
  if (absUnix(p)) return true
  // pull off the device/UNC bit from a windows path.
  // from node's lib/path.js
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/
    , result = splitDeviceRe.exec(p)
    , device = result[1] || ''
    , isUnc = device && device.charAt(1) !== ':'
    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute

  return isAbsolute
}

function absUnix (p) {
  return p.charAt(0) === "/" || p === ""
}
 at SyntaxError: Unexpected token (46:2)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6,"ExpansionArg_bool":false} start 113.5798 took 12.1675s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (46:2) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
// readdir(PREFIX) as ENTRIES
//   If fails, END
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $])
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.



module.exports = glob

var fs = require("fs")
, minimatch = require("minimatch")
, Minimatch = minimatch.Minimatch
, inherits = require("inherits")
, EE = require("events").EventEmitter
, path = require("path")
, isDir = {}
, assert = require("assert").ok

function glob (pattern, options, cb) {
  if (typeof options === "function") cb = options, options = {}
  if (!options) options = {}

  if (typeof options === "number") {
    deprecated()
    return
  }

  var g = new Glob(pattern, options, cb)
  return g.sync ? g.found : g
}

glob.fnmatch = deprecated

function deprecated () {
  throw new Error("glob's interface has changed. Please see the docs.")
}

glob.sync = globSync
function globSync (pattern, options) {
  if (typeof options === "number") {
    deprecated()
    return
  }

  options = options || {}
  options.sync = true
  return glob(pattern, options)
}

this._processingEmitQueue = false

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (!(this instanceof Glob)) {
    return new Glob(pattern, options, cb)
  }

  if (typeof options === "function") {
    cb = options
    options = null
  }

  if (typeof cb === "function") {
    this.on("error", cb)
    this.on("end", function (matches) {
      cb(null, matches)
    })
  }

  options = options || {}

  this._endEmitted = false
  this.EOF = {}
  this._emitQueue = []

  this.paused = false
  this._processingEmitQueue = false

  this.maxDepth = options.maxDepth || 1000
  this.maxLength = options.maxLength || Infinity
  this.cache = options.cache || {}
  this.statCache = options.statCache || {}

  this.changedCwd = false
  var cwd = process.cwd()
  if (!options.hasOwnProperty("cwd")) this.cwd = cwd
  else {
    this.cwd = options.cwd
    this.changedCwd = path.resolve(options.cwd) !== cwd
  }

  this.root = options.root || path.resolve(this.cwd, "/")
  this.root = path.resolve(this.root)
  if (process.platform === "win32")
    this.root = this.root.replace(/\\/g, "/")

  this.nomount = !!options.nomount

  if (!pattern) {
    throw new Error("must provide pattern")
  }

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/")) {
    if (options.noglobstar) {
      throw new Error("base matching requires globstar")
    }
    pattern = "**/" + pattern
  }

  this.strict = options.strict !== false
  this.dot = !!options.dot
  this.mark = !!options.mark
  this.sync = !!options.sync
  this.nounique = !!options.nounique
  this.nonull = !!options.nonull
  this.nosort = !!options.nosort
  this.nocase = !!options.nocase
  this.stat = !!options.stat

  this.debug = !!options.debug || !!options.globDebug
  if (this.debug)
    this.log = console.error

  this.silent = !!options.silent

  var mm = this.minimatch = new Minimatch(pattern, options)
  this.options = mm.options
  pattern = this.pattern = mm.pattern

  this.error = null
  this.aborted = false

  // list of all the patterns that ** has resolved do, so
  // we can avoid visiting multiple times.
  this._globstars = {}

  EE.call(this)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  this.minimatch.set.forEach(iterator.bind(this))
  function iterator (pattern, i, set) {
    this._process(pattern, 0, i, function (er) {
      if (er) this.emit("error", er)
      if (-- n <= 0) this._finish()
    })
  }
}

Glob.prototype.log = function () {}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)

  var nou = this.nounique
  , all = nou ? [] : {}

  for (var i = 0, l = this.matches.length; i < l; i ++) {
    var matches = this.matches[i]
    this.log("matches[%d] =", i, matches)
    // do like the shell, and spit out the literal glob
    if (!matches) {
      if (this.nonull) {
        var literal = this.minimatch.globSet[i]
        if (nou) all.push(literal)
        else all[literal] = true
      }
    } else {
      // had matches
      var m = Object.keys(matches)
      if (nou) all.push.apply(all, m)
      else m.forEach(function (m) {
        all[m] = true
      })
    }
  }

  if (!nou) all = Object.keys(all)

  if (!this.nosort) {
    all = all.sort(this.nocase ? alphasorti : alphasort)
  }

  if (this.mark) {
    // at *some* point we statted all of these
    all = all.map(this._mark, this)
  }

  this.log("emitting end", all)

  this.EOF = this.found = all
  this.emitMatch(this.EOF)
}

function alphasorti (a, b) {
  a = a.toLowerCase()
  b = b.toLowerCase()
  return alphasort(a, b)
}

function alphasort (a, b) {
  return a > b ? 1 : a < b ? -1 : 0
}

Glob.prototype._mark = function (p) {
  var c = this.cache[p]
  var m = p
  if (c) {
    var isDir = c === 2 || Array.isArray(c)
    var slash = p.slice(-1) === '/'

    if (isDir && !slash)
      m += '/'
    else if (!isDir && slash)
      m = m.slice(0, -1)

    if (m !== p) {
      this.statCache[m] = this.statCache[p]
      this.cache[m] = this.cache[p]
    }
  }

  return m
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit("abort")
}

Glob.prototype.pause = function () {
  if (this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = true
  this.emit("pause")
}

Glob.prototype.resume = function () {
  if (!this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = false
  this.emit("resume")
  this._processEmitQueue()
  //process.nextTick(this.emit.bind(this, "resume"))
}

Glob.prototype.emitMatch = function (m) {
  this.log('emitMatch', m)
  this._emitQueue.push(m)
  this._processEmitQueue()
}

Glob.prototype._processEmitQueue = function (m) {
  this.log("pEQ paused=%j processing=%j m=%j", this.paused,
           this._processingEmitQueue, m)
  var done = false
  while (!this._processingEmitQueue &&
         !this.paused) {
    this._processingEmitQueue = true
    var m = this._emitQueue.shift()
    this.log(">processEmitQueue", m === this.EOF ? ":EOF:" : m)
    if (!m) {
      this.log(">processEmitQueue, falsey m")
      this._processingEmitQueue = false
      break
    }

    if (m === this.EOF || !(this.mark && !this.stat)) {
      this.log("peq: unmarked, or eof")
      next.call(this, 0, false)
    } else if (this.statCache[m]) {
      var sc = this.statCache[m]
      var exists
      if (sc)
        exists = sc.isDirectory() ? 2 : 1
      this.log("peq: stat cached")
      next.call(this, exists, exists === 2)
    } else {
      this.log("peq: _stat, then next")
      this._stat(m, next)
    }

    function next(exists, isDir) {
      this.log("next", m, exists, isDir)
      var ev = m === this.EOF ? "end" : "match"

      // "end" can only happen once.
      assert(!this._endEmitted)
      if (ev === "end")
        this._endEmitted = true

      if (exists) {
        // Doesn't mean it necessarily doesn't exist, it's possible
        // we just didn't check because we don't care that much, or
        // this is EOF anyway.
        if (isDir && !m.match(/\/$/)) {
          m = m + "/"
        } else if (!isDir && m.match(/\/$/)) {
          m = m.replace(/\/+$/, "")
        }
      }
      this.log("emit", ev, m)
      this.emit(ev, m)
      this._processingEmitQueue = false
      if (done && m !== this.EOF && !this.paused)
        this._processEmitQueue()
    }
  }
  done = true
}

Glob.prototype._process = function (pattern, depth, index, cb_) {
  assert(this instanceof Glob)

  var cb = function cb (er, res) {
    assert(this instanceof Glob)
    if (this.paused) {
      if (!this._processQueue) {
        this._processQueue = []
        this.once("resume", function () {
          var q = this._processQueue
          this._processQueue = null
          q.forEach(function (cb) { cb() })
        })
      }
      this._processQueue.push(cb_.bind(this, er, res))
    } else {
      cb_.call(this, er, res)
    }
  }.bind(this)

  if (this.aborted) return cb()

  if (depth > this.maxDepth) return cb()

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === "string") {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      prefix = pattern.join("/")
      this._stat(prefix, function (exists, isDir) {
        // either it's there, or it isn't.
        // nothing more to do, either way.
        if (exists) {
          if (prefix && isAbsolute(prefix) && !this.nomount) {
            if (prefix.charAt(0) === "/") {
              prefix = path.join(this.root, prefix)
            } else {
              prefix = path.resolve(this.root, prefix)
            }
          }

          if (process.platform === "win32")
            prefix = prefix.replace(/\\/g, "/")

          this.matches[index] = this.matches[index] || {}
          this.matches[index][prefix] = true
          this.emitMatch(prefix)
        }
        return cb()
      })
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n)
      prefix = prefix.join("/")
      break
  }

  // get the list of entries.
  var read
  if (prefix === null) read = "."
  else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
    if (!prefix || !isAbsolute(prefix)) {
      prefix = path.join("/", prefix)
    }
    read = prefix = path.resolve(prefix)

    // if (process.platform === "win32")
    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\/g, "/")

    this.log('absolute: ', prefix, this.root, pattern, read)
  } else {
    read = prefix
  }

  this.log('readdir(%j)', read, this.cwd, this.root)

  return this._readdir(read, function (er, entries) {
    if (er) {
      // not a directory!
      // this means that, whatever else comes after this, it can never match
      return cb()
    }

    // globstar is special
    if (pattern[n] === minimatch.GLOBSTAR) {
      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]
      entries.forEach(function (e) {
        if (e.charAt(0) === "." && !this.dot) return
        // instead of the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))
        // below the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))
      }, this)

      s = s.filter(function (pattern) {
        var key = gsKey(pattern)
        var seen = !this._globstars[key]
        this._globstars[key] = true
        return seen
      }, this)

      if (!s.length)
        return cb()

      // now asyncForEach over this
      var l = s.length
      , errState = null
      s.forEach(function (gsPattern) {
        this._process(gsPattern, depth + 1, index, function (er) {
          if (errState) return
          if (er) return cb(errState = er)
          if (--l <= 0) return cb()
        })
      }, this)

      return
    }

    // not a globstar
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = pattern[n]
    var rawGlob = pattern[n]._glob
    , dotOk = this.dot || rawGlob.charAt(0) === "."

    entries = entries.filter(function (e) {
      return (e.charAt(0) !== "." || dotOk) &&
             e.match(pattern[n])
    })

    // If n === pattern.length - 1, then there's no need for the extra stat
    // *unless* the user has specified "mark" or "stat" explicitly.
    // We know that they exist, since the readdir returned them.
    if (n === pattern.length - 1 &&
        !this.mark &&
        !this.stat) {
      entries.forEach(function (e) {
        if (prefix) {
          if (prefix !== "/") e = prefix + "/" + e
          else e = prefix + e
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path.join(this.root, e)
        }

        if (process.platform === "win32")
          e = e.replace(/\\/g, "/")

        this.matches[index] = this.matches[index] || {}
        this.matches[index][e] = true
        this.emitMatch(e)
      }, this)
      return cb.call(this)
    }


    // now test all the remaining entries as stand-ins for that part
    // of the pattern.
    var l = entries.length
    , errState = null
    if (l === 0) return cb() // no matches possible
    entries.forEach(function (e) {
      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))
      this._process(p, depth + 1, index, function (er) {
        if (errState) return
        if (er) return cb(errState = er)
        if (--l === 0) return cb.call(this)
      })
    }, this)
  })

}

function gsKey (pattern) {
  return '**' + pattern.map(function (p) {
    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)
  }).join('/')
}

Glob.prototype._stat = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterStat(f, abs, cb, er)
  }

  this.log('stat', [this.cwd, f, '=', abs])

  if (!this.stat && this.cache.hasOwnProperty(f)) {
    var exists = this.cache[f]
    , isDir = exists && (Array.isArray(exists) || exists === 2)
    if (this.sync) return cb.call(this, !!exists, isDir)
    return process.nextTick(cb.bind(this, !!exists, isDir))
  }

  var stat = this.statCache[abs]
  if (this.sync || stat) {
    var er
    try {
      stat = fs.statSync(abs)
    } catch (e) {
      er = e
    }
    this._afterStat(f, abs, cb, er, stat)
  } else {
    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))
  }
}

Glob.prototype._afterStat = function (f, abs, cb, er, stat) {
  var exists
  assert(this instanceof Glob)

  if (abs.slice(-1) === "/" && stat && !stat.isDirectory()) {
    this.log("should be ENOTDIR, fake it")

    er = new Error("ENOTDIR, not a directory '" + abs + "'")
    er.path = abs
    er.code = "ENOTDIR"
    stat = null
  }

  var emit = !this.statCache[abs]
  this.statCache[abs] = stat

  if (er || !stat) {
    exists = false
  } else {
    exists = stat.isDirectory() ? 2 : 1
    if (emit)
      this.emit('stat', f, stat)
  }
  this.cache[f] = this.cache[f] || exists
  cb.call(this, !!exists, exists === 2)
}

Glob.prototype._readdir = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (isAbsolute(f)) {
    abs = f
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterReaddir(f, abs, cb, er)
  }

  this.log('readdir', [this.cwd, f, abs])
  if (this.cache.hasOwnProperty(f)) {
    var c = this.cache[f]
    if (Array.isArray(c)) {
      if (this.sync) return cb.call(this, null, c)
      return process.nextTick(cb.bind(this, null, c))
    }

    if (!c || c === 1) {
      // either ENOENT or ENOTDIR
      var code = c ? "ENOTDIR" : "ENOENT"
      , er = new Error((c ? "Not a directory" : "Not found") + ": " + f)
      er.path = f
      er.code = code
      this.log(f, er)
      if (this.sync) return cb.call(this, er)
      return process.nextTick(cb.bind(this, er))
    }

    // at this point, c === 2, meaning it's a dir, but we haven't
    // had to read it yet, or c === true, meaning it's *something*
    // but we don't have any idea what.  Need to read it, either way.
  }

  if (this.sync) {
    var er, entries
    try {
      entries = fs.readdirSync(abs)
    } catch (e) {
      er = e
    }
    return this._afterReaddir(f, abs, cb, er, entries)
  }

  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))
}

Glob.prototype._afterReaddir = function (f, abs, cb, er, entries) {
  assert(this instanceof Glob)
  if (entries && !er) {
    this.cache[f] = entries
    // if we haven't asked to stat everything for suresies, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.  This also gets us one step
    // further into ELOOP territory.
    if (!this.mark && !this.stat) {
      entries.forEach(function (e) {
        if (f === "/") e = f + e
        else e = f + "/" + e
        this.cache[e] = true
      }, this)
    }

    return cb.call(this, er, entries)
  }

  // now handle errors, and cache the information
  if (er) switch (er.code) {
    case "ENOTDIR": // totally normal. means it *does* exist.
      this.cache[f] = 1
      return cb.call(this, er)
    case "ENOENT": // not terribly unusual
    case "ELOOP":
    case "ENAMETOOLONG":
    case "UNKNOWN":
      this.cache[f] = false
      return cb.call(this, er)
    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) this.emit("error", er)
      if (!this.silent) console.error("glob error", er)
      return cb.call(this, er)
  }
}

var isAbsolute = process.platform === "win32" ? absWin : absUnix

function absWin (p) {
  if (absUnix(p)) return true
  // pull off the device/UNC bit from a windows path.
  // from node's lib/path.js
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/
    , result = splitDeviceRe.exec(p)
    , device = result[1] || ''
    , isUnc = device && device.charAt(1) !== ':'
    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute

  return isAbsolute
}

function absUnix (p) {
  return p.charAt(0) === "/" || p === ""
}
 at SyntaxError: Unexpected token (46:2)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7,"ExpansionArg_array_element_0_type":0} start 113.5083 took 26.2456s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (46:2) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
// readdir(PREFIX) as ENTRIES
//   If fails, END
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $])
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.



module.exports = glob

var fs = require("fs")
, minimatch = require("minimatch")
, Minimatch = minimatch.Minimatch
, inherits = require("inherits")
, EE = require("events").EventEmitter
, path = require("path")
, isDir = {}
, assert = require("assert").ok

function glob (pattern, options, cb) {
  if (typeof options === "function") cb = options, options = {}
  if (!options) options = {}

  if (typeof options === "number") {
    deprecated()
    return
  }

  var g = new Glob(pattern, options, cb)
  return g.sync ? g.found : g
}

glob.fnmatch = deprecated

function deprecated () {
  throw new Error("glob's interface has changed. Please see the docs.")
}

glob.sync = globSync
function globSync (pattern, options) {
  if (typeof options === "number") {
    deprecated()
    return
  }

  options = options || {}
  options.sync = true
  return glob(pattern, options)
}

this._processingEmitQueue = false

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (!(this instanceof Glob)) {
    return new Glob(pattern, options, cb)
  }

  if (typeof options === "function") {
    cb = options
    options = null
  }

  if (typeof cb === "function") {
    this.on("error", cb)
    this.on("end", function (matches) {
      cb(null, matches)
    })
  }

  options = options || {}

  this._endEmitted = false
  this.EOF = {}
  this._emitQueue = []

  this.paused = false
  this._processingEmitQueue = false

  this.maxDepth = options.maxDepth || 1000
  this.maxLength = options.maxLength || Infinity
  this.cache = options.cache || {}
  this.statCache = options.statCache || {}

  this.changedCwd = false
  var cwd = process.cwd()
  if (!options.hasOwnProperty("cwd")) this.cwd = cwd
  else {
    this.cwd = options.cwd
    this.changedCwd = path.resolve(options.cwd) !== cwd
  }

  this.root = options.root || path.resolve(this.cwd, "/")
  this.root = path.resolve(this.root)
  if (process.platform === "win32")
    this.root = this.root.replace(/\\/g, "/")

  this.nomount = !!options.nomount

  if (!pattern) {
    throw new Error("must provide pattern")
  }

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/")) {
    if (options.noglobstar) {
      throw new Error("base matching requires globstar")
    }
    pattern = "**/" + pattern
  }

  this.strict = options.strict !== false
  this.dot = !!options.dot
  this.mark = !!options.mark
  this.sync = !!options.sync
  this.nounique = !!options.nounique
  this.nonull = !!options.nonull
  this.nosort = !!options.nosort
  this.nocase = !!options.nocase
  this.stat = !!options.stat

  this.debug = !!options.debug || !!options.globDebug
  if (this.debug)
    this.log = console.error

  this.silent = !!options.silent

  var mm = this.minimatch = new Minimatch(pattern, options)
  this.options = mm.options
  pattern = this.pattern = mm.pattern

  this.error = null
  this.aborted = false

  // list of all the patterns that ** has resolved do, so
  // we can avoid visiting multiple times.
  this._globstars = {}

  EE.call(this)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  this.minimatch.set.forEach(iterator.bind(this))
  function iterator (pattern, i, set) {
    this._process(pattern, 0, i, function (er) {
      if (er) this.emit("error", er)
      if (-- n <= 0) this._finish()
    })
  }
}

Glob.prototype.log = function () {}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)

  var nou = this.nounique
  , all = nou ? [] : {}

  for (var i = 0, l = this.matches.length; i < l; i ++) {
    var matches = this.matches[i]
    this.log("matches[%d] =", i, matches)
    // do like the shell, and spit out the literal glob
    if (!matches) {
      if (this.nonull) {
        var literal = this.minimatch.globSet[i]
        if (nou) all.push(literal)
        else all[literal] = true
      }
    } else {
      // had matches
      var m = Object.keys(matches)
      if (nou) all.push.apply(all, m)
      else m.forEach(function (m) {
        all[m] = true
      })
    }
  }

  if (!nou) all = Object.keys(all)

  if (!this.nosort) {
    all = all.sort(this.nocase ? alphasorti : alphasort)
  }

  if (this.mark) {
    // at *some* point we statted all of these
    all = all.map(this._mark, this)
  }

  this.log("emitting end", all)

  this.EOF = this.found = all
  this.emitMatch(this.EOF)
}

function alphasorti (a, b) {
  a = a.toLowerCase()
  b = b.toLowerCase()
  return alphasort(a, b)
}

function alphasort (a, b) {
  return a > b ? 1 : a < b ? -1 : 0
}

Glob.prototype._mark = function (p) {
  var c = this.cache[p]
  var m = p
  if (c) {
    var isDir = c === 2 || Array.isArray(c)
    var slash = p.slice(-1) === '/'

    if (isDir && !slash)
      m += '/'
    else if (!isDir && slash)
      m = m.slice(0, -1)

    if (m !== p) {
      this.statCache[m] = this.statCache[p]
      this.cache[m] = this.cache[p]
    }
  }

  return m
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit("abort")
}

Glob.prototype.pause = function () {
  if (this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = true
  this.emit("pause")
}

Glob.prototype.resume = function () {
  if (!this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = false
  this.emit("resume")
  this._processEmitQueue()
  //process.nextTick(this.emit.bind(this, "resume"))
}

Glob.prototype.emitMatch = function (m) {
  this.log('emitMatch', m)
  this._emitQueue.push(m)
  this._processEmitQueue()
}

Glob.prototype._processEmitQueue = function (m) {
  this.log("pEQ paused=%j processing=%j m=%j", this.paused,
           this._processingEmitQueue, m)
  var done = false
  while (!this._processingEmitQueue &&
         !this.paused) {
    this._processingEmitQueue = true
    var m = this._emitQueue.shift()
    this.log(">processEmitQueue", m === this.EOF ? ":EOF:" : m)
    if (!m) {
      this.log(">processEmitQueue, falsey m")
      this._processingEmitQueue = false
      break
    }

    if (m === this.EOF || !(this.mark && !this.stat)) {
      this.log("peq: unmarked, or eof")
      next.call(this, 0, false)
    } else if (this.statCache[m]) {
      var sc = this.statCache[m]
      var exists
      if (sc)
        exists = sc.isDirectory() ? 2 : 1
      this.log("peq: stat cached")
      next.call(this, exists, exists === 2)
    } else {
      this.log("peq: _stat, then next")
      this._stat(m, next)
    }

    function next(exists, isDir) {
      this.log("next", m, exists, isDir)
      var ev = m === this.EOF ? "end" : "match"

      // "end" can only happen once.
      assert(!this._endEmitted)
      if (ev === "end")
        this._endEmitted = true

      if (exists) {
        // Doesn't mean it necessarily doesn't exist, it's possible
        // we just didn't check because we don't care that much, or
        // this is EOF anyway.
        if (isDir && !m.match(/\/$/)) {
          m = m + "/"
        } else if (!isDir && m.match(/\/$/)) {
          m = m.replace(/\/+$/, "")
        }
      }
      this.log("emit", ev, m)
      this.emit(ev, m)
      this._processingEmitQueue = false
      if (done && m !== this.EOF && !this.paused)
        this._processEmitQueue()
    }
  }
  done = true
}

Glob.prototype._process = function (pattern, depth, index, cb_) {
  assert(this instanceof Glob)

  var cb = function cb (er, res) {
    assert(this instanceof Glob)
    if (this.paused) {
      if (!this._processQueue) {
        this._processQueue = []
        this.once("resume", function () {
          var q = this._processQueue
          this._processQueue = null
          q.forEach(function (cb) { cb() })
        })
      }
      this._processQueue.push(cb_.bind(this, er, res))
    } else {
      cb_.call(this, er, res)
    }
  }.bind(this)

  if (this.aborted) return cb()

  if (depth > this.maxDepth) return cb()

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === "string") {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      prefix = pattern.join("/")
      this._stat(prefix, function (exists, isDir) {
        // either it's there, or it isn't.
        // nothing more to do, either way.
        if (exists) {
          if (prefix && isAbsolute(prefix) && !this.nomount) {
            if (prefix.charAt(0) === "/") {
              prefix = path.join(this.root, prefix)
            } else {
              prefix = path.resolve(this.root, prefix)
            }
          }

          if (process.platform === "win32")
            prefix = prefix.replace(/\\/g, "/")

          this.matches[index] = this.matches[index] || {}
          this.matches[index][prefix] = true
          this.emitMatch(prefix)
        }
        return cb()
      })
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n)
      prefix = prefix.join("/")
      break
  }

  // get the list of entries.
  var read
  if (prefix === null) read = "."
  else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
    if (!prefix || !isAbsolute(prefix)) {
      prefix = path.join("/", prefix)
    }
    read = prefix = path.resolve(prefix)

    // if (process.platform === "win32")
    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\/g, "/")

    this.log('absolute: ', prefix, this.root, pattern, read)
  } else {
    read = prefix
  }

  this.log('readdir(%j)', read, this.cwd, this.root)

  return this._readdir(read, function (er, entries) {
    if (er) {
      // not a directory!
      // this means that, whatever else comes after this, it can never match
      return cb()
    }

    // globstar is special
    if (pattern[n] === minimatch.GLOBSTAR) {
      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]
      entries.forEach(function (e) {
        if (e.charAt(0) === "." && !this.dot) return
        // instead of the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))
        // below the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))
      }, this)

      s = s.filter(function (pattern) {
        var key = gsKey(pattern)
        var seen = !this._globstars[key]
        this._globstars[key] = true
        return seen
      }, this)

      if (!s.length)
        return cb()

      // now asyncForEach over this
      var l = s.length
      , errState = null
      s.forEach(function (gsPattern) {
        this._process(gsPattern, depth + 1, index, function (er) {
          if (errState) return
          if (er) return cb(errState = er)
          if (--l <= 0) return cb()
        })
      }, this)

      return
    }

    // not a globstar
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = pattern[n]
    var rawGlob = pattern[n]._glob
    , dotOk = this.dot || rawGlob.charAt(0) === "."

    entries = entries.filter(function (e) {
      return (e.charAt(0) !== "." || dotOk) &&
             e.match(pattern[n])
    })

    // If n === pattern.length - 1, then there's no need for the extra stat
    // *unless* the user has specified "mark" or "stat" explicitly.
    // We know that they exist, since the readdir returned them.
    if (n === pattern.length - 1 &&
        !this.mark &&
        !this.stat) {
      entries.forEach(function (e) {
        if (prefix) {
          if (prefix !== "/") e = prefix + "/" + e
          else e = prefix + e
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path.join(this.root, e)
        }

        if (process.platform === "win32")
          e = e.replace(/\\/g, "/")

        this.matches[index] = this.matches[index] || {}
        this.matches[index][e] = true
        this.emitMatch(e)
      }, this)
      return cb.call(this)
    }


    // now test all the remaining entries as stand-ins for that part
    // of the pattern.
    var l = entries.length
    , errState = null
    if (l === 0) return cb() // no matches possible
    entries.forEach(function (e) {
      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))
      this._process(p, depth + 1, index, function (er) {
        if (errState) return
        if (er) return cb(errState = er)
        if (--l === 0) return cb.call(this)
      })
    }, this)
  })

}

function gsKey (pattern) {
  return '**' + pattern.map(function (p) {
    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)
  }).join('/')
}

Glob.prototype._stat = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterStat(f, abs, cb, er)
  }

  this.log('stat', [this.cwd, f, '=', abs])

  if (!this.stat && this.cache.hasOwnProperty(f)) {
    var exists = this.cache[f]
    , isDir = exists && (Array.isArray(exists) || exists === 2)
    if (this.sync) return cb.call(this, !!exists, isDir)
    return process.nextTick(cb.bind(this, !!exists, isDir))
  }

  var stat = this.statCache[abs]
  if (this.sync || stat) {
    var er
    try {
      stat = fs.statSync(abs)
    } catch (e) {
      er = e
    }
    this._afterStat(f, abs, cb, er, stat)
  } else {
    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))
  }
}

Glob.prototype._afterStat = function (f, abs, cb, er, stat) {
  var exists
  assert(this instanceof Glob)

  if (abs.slice(-1) === "/" && stat && !stat.isDirectory()) {
    this.log("should be ENOTDIR, fake it")

    er = new Error("ENOTDIR, not a directory '" + abs + "'")
    er.path = abs
    er.code = "ENOTDIR"
    stat = null
  }

  var emit = !this.statCache[abs]
  this.statCache[abs] = stat

  if (er || !stat) {
    exists = false
  } else {
    exists = stat.isDirectory() ? 2 : 1
    if (emit)
      this.emit('stat', f, stat)
  }
  this.cache[f] = this.cache[f] || exists
  cb.call(this, !!exists, exists === 2)
}

Glob.prototype._readdir = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (isAbsolute(f)) {
    abs = f
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterReaddir(f, abs, cb, er)
  }

  this.log('readdir', [this.cwd, f, abs])
  if (this.cache.hasOwnProperty(f)) {
    var c = this.cache[f]
    if (Array.isArray(c)) {
      if (this.sync) return cb.call(this, null, c)
      return process.nextTick(cb.bind(this, null, c))
    }

    if (!c || c === 1) {
      // either ENOENT or ENOTDIR
      var code = c ? "ENOTDIR" : "ENOENT"
      , er = new Error((c ? "Not a directory" : "Not found") + ": " + f)
      er.path = f
      er.code = code
      this.log(f, er)
      if (this.sync) return cb.call(this, er)
      return process.nextTick(cb.bind(this, er))
    }

    // at this point, c === 2, meaning it's a dir, but we haven't
    // had to read it yet, or c === true, meaning it's *something*
    // but we don't have any idea what.  Need to read it, either way.
  }

  if (this.sync) {
    var er, entries
    try {
      entries = fs.readdirSync(abs)
    } catch (e) {
      er = e
    }
    return this._afterReaddir(f, abs, cb, er, entries)
  }

  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))
}

Glob.prototype._afterReaddir = function (f, abs, cb, er, entries) {
  assert(this instanceof Glob)
  if (entries && !er) {
    this.cache[f] = entries
    // if we haven't asked to stat everything for suresies, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.  This also gets us one step
    // further into ELOOP territory.
    if (!this.mark && !this.stat) {
      entries.forEach(function (e) {
        if (f === "/") e = f + e
        else e = f + "/" + e
        this.cache[e] = true
      }, this)
    }

    return cb.call(this, er, entries)
  }

  // now handle errors, and cache the information
  if (er) switch (er.code) {
    case "ENOTDIR": // totally normal. means it *does* exist.
      this.cache[f] = 1
      return cb.call(this, er)
    case "ENOENT": // not terribly unusual
    case "ELOOP":
    case "ENAMETOOLONG":
    case "UNKNOWN":
      this.cache[f] = false
      return cb.call(this, er)
    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) this.emit("error", er)
      if (!this.silent) console.error("glob error", er)
      return cb.call(this, er)
  }
}

var isAbsolute = process.platform === "win32" ? absWin : absUnix

function absWin (p) {
  if (absUnix(p)) return true
  // pull off the device/UNC bit from a windows path.
  // from node's lib/path.js
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/
    , result = splitDeviceRe.exec(p)
    , device = result[1] || ''
    , isUnc = device && device.charAt(1) !== ':'
    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute

  return isAbsolute
}

function absUnix (p) {
  return p.charAt(0) === "/" || p === ""
}
 at SyntaxError: Unexpected token (46:2)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":8,"ExpansionArg_array_element_0_int":0} start 140.0753 took 24.0263s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":8,"ExpansionArg_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (46:2) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
// readdir(PREFIX) as ENTRIES
//   If fails, END
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $])
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.



module.exports = glob

var fs = require("fs")
, minimatch = require("minimatch")
, Minimatch = minimatch.Minimatch
, inherits = require("inherits")
, EE = require("events").EventEmitter
, path = require("path")
, isDir = {}
, assert = require("assert").ok

function glob (pattern, options, cb) {
  if (typeof options === "function") cb = options, options = {}
  if (!options) options = {}

  if (typeof options === "number") {
    deprecated()
    return
  }

  var g = new Glob(pattern, options, cb)
  return g.sync ? g.found : g
}

glob.fnmatch = deprecated

function deprecated () {
  throw new Error("glob's interface has changed. Please see the docs.")
}

glob.sync = globSync
function globSync (pattern, options) {
  if (typeof options === "number") {
    deprecated()
    return
  }

  options = options || {}
  options.sync = true
  return glob(pattern, options)
}

this._processingEmitQueue = false

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (!(this instanceof Glob)) {
    return new Glob(pattern, options, cb)
  }

  if (typeof options === "function") {
    cb = options
    options = null
  }

  if (typeof cb === "function") {
    this.on("error", cb)
    this.on("end", function (matches) {
      cb(null, matches)
    })
  }

  options = options || {}

  this._endEmitted = false
  this.EOF = {}
  this._emitQueue = []

  this.paused = false
  this._processingEmitQueue = false

  this.maxDepth = options.maxDepth || 1000
  this.maxLength = options.maxLength || Infinity
  this.cache = options.cache || {}
  this.statCache = options.statCache || {}

  this.changedCwd = false
  var cwd = process.cwd()
  if (!options.hasOwnProperty("cwd")) this.cwd = cwd
  else {
    this.cwd = options.cwd
    this.changedCwd = path.resolve(options.cwd) !== cwd
  }

  this.root = options.root || path.resolve(this.cwd, "/")
  this.root = path.resolve(this.root)
  if (process.platform === "win32")
    this.root = this.root.replace(/\\/g, "/")

  this.nomount = !!options.nomount

  if (!pattern) {
    throw new Error("must provide pattern")
  }

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/")) {
    if (options.noglobstar) {
      throw new Error("base matching requires globstar")
    }
    pattern = "**/" + pattern
  }

  this.strict = options.strict !== false
  this.dot = !!options.dot
  this.mark = !!options.mark
  this.sync = !!options.sync
  this.nounique = !!options.nounique
  this.nonull = !!options.nonull
  this.nosort = !!options.nosort
  this.nocase = !!options.nocase
  this.stat = !!options.stat

  this.debug = !!options.debug || !!options.globDebug
  if (this.debug)
    this.log = console.error

  this.silent = !!options.silent

  var mm = this.minimatch = new Minimatch(pattern, options)
  this.options = mm.options
  pattern = this.pattern = mm.pattern

  this.error = null
  this.aborted = false

  // list of all the patterns that ** has resolved do, so
  // we can avoid visiting multiple times.
  this._globstars = {}

  EE.call(this)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  this.minimatch.set.forEach(iterator.bind(this))
  function iterator (pattern, i, set) {
    this._process(pattern, 0, i, function (er) {
      if (er) this.emit("error", er)
      if (-- n <= 0) this._finish()
    })
  }
}

Glob.prototype.log = function () {}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)

  var nou = this.nounique
  , all = nou ? [] : {}

  for (var i = 0, l = this.matches.length; i < l; i ++) {
    var matches = this.matches[i]
    this.log("matches[%d] =", i, matches)
    // do like the shell, and spit out the literal glob
    if (!matches) {
      if (this.nonull) {
        var literal = this.minimatch.globSet[i]
        if (nou) all.push(literal)
        else all[literal] = true
      }
    } else {
      // had matches
      var m = Object.keys(matches)
      if (nou) all.push.apply(all, m)
      else m.forEach(function (m) {
        all[m] = true
      })
    }
  }

  if (!nou) all = Object.keys(all)

  if (!this.nosort) {
    all = all.sort(this.nocase ? alphasorti : alphasort)
  }

  if (this.mark) {
    // at *some* point we statted all of these
    all = all.map(this._mark, this)
  }

  this.log("emitting end", all)

  this.EOF = this.found = all
  this.emitMatch(this.EOF)
}

function alphasorti (a, b) {
  a = a.toLowerCase()
  b = b.toLowerCase()
  return alphasort(a, b)
}

function alphasort (a, b) {
  return a > b ? 1 : a < b ? -1 : 0
}

Glob.prototype._mark = function (p) {
  var c = this.cache[p]
  var m = p
  if (c) {
    var isDir = c === 2 || Array.isArray(c)
    var slash = p.slice(-1) === '/'

    if (isDir && !slash)
      m += '/'
    else if (!isDir && slash)
      m = m.slice(0, -1)

    if (m !== p) {
      this.statCache[m] = this.statCache[p]
      this.cache[m] = this.cache[p]
    }
  }

  return m
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit("abort")
}

Glob.prototype.pause = function () {
  if (this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = true
  this.emit("pause")
}

Glob.prototype.resume = function () {
  if (!this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = false
  this.emit("resume")
  this._processEmitQueue()
  //process.nextTick(this.emit.bind(this, "resume"))
}

Glob.prototype.emitMatch = function (m) {
  this.log('emitMatch', m)
  this._emitQueue.push(m)
  this._processEmitQueue()
}

Glob.prototype._processEmitQueue = function (m) {
  this.log("pEQ paused=%j processing=%j m=%j", this.paused,
           this._processingEmitQueue, m)
  var done = false
  while (!this._processingEmitQueue &&
         !this.paused) {
    this._processingEmitQueue = true
    var m = this._emitQueue.shift()
    this.log(">processEmitQueue", m === this.EOF ? ":EOF:" : m)
    if (!m) {
      this.log(">processEmitQueue, falsey m")
      this._processingEmitQueue = false
      break
    }

    if (m === this.EOF || !(this.mark && !this.stat)) {
      this.log("peq: unmarked, or eof")
      next.call(this, 0, false)
    } else if (this.statCache[m]) {
      var sc = this.statCache[m]
      var exists
      if (sc)
        exists = sc.isDirectory() ? 2 : 1
      this.log("peq: stat cached")
      next.call(this, exists, exists === 2)
    } else {
      this.log("peq: _stat, then next")
      this._stat(m, next)
    }

    function next(exists, isDir) {
      this.log("next", m, exists, isDir)
      var ev = m === this.EOF ? "end" : "match"

      // "end" can only happen once.
      assert(!this._endEmitted)
      if (ev === "end")
        this._endEmitted = true

      if (exists) {
        // Doesn't mean it necessarily doesn't exist, it's possible
        // we just didn't check because we don't care that much, or
        // this is EOF anyway.
        if (isDir && !m.match(/\/$/)) {
          m = m + "/"
        } else if (!isDir && m.match(/\/$/)) {
          m = m.replace(/\/+$/, "")
        }
      }
      this.log("emit", ev, m)
      this.emit(ev, m)
      this._processingEmitQueue = false
      if (done && m !== this.EOF && !this.paused)
        this._processEmitQueue()
    }
  }
  done = true
}

Glob.prototype._process = function (pattern, depth, index, cb_) {
  assert(this instanceof Glob)

  var cb = function cb (er, res) {
    assert(this instanceof Glob)
    if (this.paused) {
      if (!this._processQueue) {
        this._processQueue = []
        this.once("resume", function () {
          var q = this._processQueue
          this._processQueue = null
          q.forEach(function (cb) { cb() })
        })
      }
      this._processQueue.push(cb_.bind(this, er, res))
    } else {
      cb_.call(this, er, res)
    }
  }.bind(this)

  if (this.aborted) return cb()

  if (depth > this.maxDepth) return cb()

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === "string") {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      prefix = pattern.join("/")
      this._stat(prefix, function (exists, isDir) {
        // either it's there, or it isn't.
        // nothing more to do, either way.
        if (exists) {
          if (prefix && isAbsolute(prefix) && !this.nomount) {
            if (prefix.charAt(0) === "/") {
              prefix = path.join(this.root, prefix)
            } else {
              prefix = path.resolve(this.root, prefix)
            }
          }

          if (process.platform === "win32")
            prefix = prefix.replace(/\\/g, "/")

          this.matches[index] = this.matches[index] || {}
          this.matches[index][prefix] = true
          this.emitMatch(prefix)
        }
        return cb()
      })
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n)
      prefix = prefix.join("/")
      break
  }

  // get the list of entries.
  var read
  if (prefix === null) read = "."
  else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
    if (!prefix || !isAbsolute(prefix)) {
      prefix = path.join("/", prefix)
    }
    read = prefix = path.resolve(prefix)

    // if (process.platform === "win32")
    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\/g, "/")

    this.log('absolute: ', prefix, this.root, pattern, read)
  } else {
    read = prefix
  }

  this.log('readdir(%j)', read, this.cwd, this.root)

  return this._readdir(read, function (er, entries) {
    if (er) {
      // not a directory!
      // this means that, whatever else comes after this, it can never match
      return cb()
    }

    // globstar is special
    if (pattern[n] === minimatch.GLOBSTAR) {
      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]
      entries.forEach(function (e) {
        if (e.charAt(0) === "." && !this.dot) return
        // instead of the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))
        // below the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))
      }, this)

      s = s.filter(function (pattern) {
        var key = gsKey(pattern)
        var seen = !this._globstars[key]
        this._globstars[key] = true
        return seen
      }, this)

      if (!s.length)
        return cb()

      // now asyncForEach over this
      var l = s.length
      , errState = null
      s.forEach(function (gsPattern) {
        this._process(gsPattern, depth + 1, index, function (er) {
          if (errState) return
          if (er) return cb(errState = er)
          if (--l <= 0) return cb()
        })
      }, this)

      return
    }

    // not a globstar
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = pattern[n]
    var rawGlob = pattern[n]._glob
    , dotOk = this.dot || rawGlob.charAt(0) === "."

    entries = entries.filter(function (e) {
      return (e.charAt(0) !== "." || dotOk) &&
             e.match(pattern[n])
    })

    // If n === pattern.length - 1, then there's no need for the extra stat
    // *unless* the user has specified "mark" or "stat" explicitly.
    // We know that they exist, since the readdir returned them.
    if (n === pattern.length - 1 &&
        !this.mark &&
        !this.stat) {
      entries.forEach(function (e) {
        if (prefix) {
          if (prefix !== "/") e = prefix + "/" + e
          else e = prefix + e
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path.join(this.root, e)
        }

        if (process.platform === "win32")
          e = e.replace(/\\/g, "/")

        this.matches[index] = this.matches[index] || {}
        this.matches[index][e] = true
        this.emitMatch(e)
      }, this)
      return cb.call(this)
    }


    // now test all the remaining entries as stand-ins for that part
    // of the pattern.
    var l = entries.length
    , errState = null
    if (l === 0) return cb() // no matches possible
    entries.forEach(function (e) {
      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))
      this._process(p, depth + 1, index, function (er) {
        if (errState) return
        if (er) return cb(errState = er)
        if (--l === 0) return cb.call(this)
      })
    }, this)
  })

}

function gsKey (pattern) {
  return '**' + pattern.map(function (p) {
    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)
  }).join('/')
}

Glob.prototype._stat = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterStat(f, abs, cb, er)
  }

  this.log('stat', [this.cwd, f, '=', abs])

  if (!this.stat && this.cache.hasOwnProperty(f)) {
    var exists = this.cache[f]
    , isDir = exists && (Array.isArray(exists) || exists === 2)
    if (this.sync) return cb.call(this, !!exists, isDir)
    return process.nextTick(cb.bind(this, !!exists, isDir))
  }

  var stat = this.statCache[abs]
  if (this.sync || stat) {
    var er
    try {
      stat = fs.statSync(abs)
    } catch (e) {
      er = e
    }
    this._afterStat(f, abs, cb, er, stat)
  } else {
    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))
  }
}

Glob.prototype._afterStat = function (f, abs, cb, er, stat) {
  var exists
  assert(this instanceof Glob)

  if (abs.slice(-1) === "/" && stat && !stat.isDirectory()) {
    this.log("should be ENOTDIR, fake it")

    er = new Error("ENOTDIR, not a directory '" + abs + "'")
    er.path = abs
    er.code = "ENOTDIR"
    stat = null
  }

  var emit = !this.statCache[abs]
  this.statCache[abs] = stat

  if (er || !stat) {
    exists = false
  } else {
    exists = stat.isDirectory() ? 2 : 1
    if (emit)
      this.emit('stat', f, stat)
  }
  this.cache[f] = this.cache[f] || exists
  cb.call(this, !!exists, exists === 2)
}

Glob.prototype._readdir = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (isAbsolute(f)) {
    abs = f
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterReaddir(f, abs, cb, er)
  }

  this.log('readdir', [this.cwd, f, abs])
  if (this.cache.hasOwnProperty(f)) {
    var c = this.cache[f]
    if (Array.isArray(c)) {
      if (this.sync) return cb.call(this, null, c)
      return process.nextTick(cb.bind(this, null, c))
    }

    if (!c || c === 1) {
      // either ENOENT or ENOTDIR
      var code = c ? "ENOTDIR" : "ENOENT"
      , er = new Error((c ? "Not a directory" : "Not found") + ": " + f)
      er.path = f
      er.code = code
      this.log(f, er)
      if (this.sync) return cb.call(this, er)
      return process.nextTick(cb.bind(this, er))
    }

    // at this point, c === 2, meaning it's a dir, but we haven't
    // had to read it yet, or c === true, meaning it's *something*
    // but we don't have any idea what.  Need to read it, either way.
  }

  if (this.sync) {
    var er, entries
    try {
      entries = fs.readdirSync(abs)
    } catch (e) {
      er = e
    }
    return this._afterReaddir(f, abs, cb, er, entries)
  }

  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))
}

Glob.prototype._afterReaddir = function (f, abs, cb, er, entries) {
  assert(this instanceof Glob)
  if (entries && !er) {
    this.cache[f] = entries
    // if we haven't asked to stat everything for suresies, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.  This also gets us one step
    // further into ELOOP territory.
    if (!this.mark && !this.stat) {
      entries.forEach(function (e) {
        if (f === "/") e = f + e
        else e = f + "/" + e
        this.cache[e] = true
      }, this)
    }

    return cb.call(this, er, entries)
  }

  // now handle errors, and cache the information
  if (er) switch (er.code) {
    case "ENOTDIR": // totally normal. means it *does* exist.
      this.cache[f] = 1
      return cb.call(this, er)
    case "ENOENT": // not terribly unusual
    case "ELOOP":
    case "ENAMETOOLONG":
    case "UNKNOWN":
      this.cache[f] = false
      return cb.call(this, er)
    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) this.emit("error", er)
      if (!this.silent) console.error("glob error", er)
      return cb.call(this, er)
  }
}

var isAbsolute = process.platform === "win32" ? absWin : absUnix

function absWin (p) {
  if (absUnix(p)) return true
  // pull off the device/UNC bit from a windows path.
  // from node's lib/path.js
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/
    , result = splitDeviceRe.exec(p)
    , device = result[1] || ''
    , isUnc = device && device.charAt(1) !== ':'
    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute

  return isAbsolute
}

function absUnix (p) {
  return p.charAt(0) === "/" || p === ""
}
 at SyntaxError: Unexpected token (46:2)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":8}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":9,"ExpansionArg_array_element_1_type":0} start 139.9829 took 27.3211s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":9,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (46:2) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
// readdir(PREFIX) as ENTRIES
//   If fails, END
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $])
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.



module.exports = glob

var fs = require("fs")
, minimatch = require("minimatch")
, Minimatch = minimatch.Minimatch
, inherits = require("inherits")
, EE = require("events").EventEmitter
, path = require("path")
, isDir = {}
, assert = require("assert").ok

function glob (pattern, options, cb) {
  if (typeof options === "function") cb = options, options = {}
  if (!options) options = {}

  if (typeof options === "number") {
    deprecated()
    return
  }

  var g = new Glob(pattern, options, cb)
  return g.sync ? g.found : g
}

glob.fnmatch = deprecated

function deprecated () {
  throw new Error("glob's interface has changed. Please see the docs.")
}

glob.sync = globSync
function globSync (pattern, options) {
  if (typeof options === "number") {
    deprecated()
    return
  }

  options = options || {}
  options.sync = true
  return glob(pattern, options)
}

this._processingEmitQueue = false

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (!(this instanceof Glob)) {
    return new Glob(pattern, options, cb)
  }

  if (typeof options === "function") {
    cb = options
    options = null
  }

  if (typeof cb === "function") {
    this.on("error", cb)
    this.on("end", function (matches) {
      cb(null, matches)
    })
  }

  options = options || {}

  this._endEmitted = false
  this.EOF = {}
  this._emitQueue = []

  this.paused = false
  this._processingEmitQueue = false

  this.maxDepth = options.maxDepth || 1000
  this.maxLength = options.maxLength || Infinity
  this.cache = options.cache || {}
  this.statCache = options.statCache || {}

  this.changedCwd = false
  var cwd = process.cwd()
  if (!options.hasOwnProperty("cwd")) this.cwd = cwd
  else {
    this.cwd = options.cwd
    this.changedCwd = path.resolve(options.cwd) !== cwd
  }

  this.root = options.root || path.resolve(this.cwd, "/")
  this.root = path.resolve(this.root)
  if (process.platform === "win32")
    this.root = this.root.replace(/\\/g, "/")

  this.nomount = !!options.nomount

  if (!pattern) {
    throw new Error("must provide pattern")
  }

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/")) {
    if (options.noglobstar) {
      throw new Error("base matching requires globstar")
    }
    pattern = "**/" + pattern
  }

  this.strict = options.strict !== false
  this.dot = !!options.dot
  this.mark = !!options.mark
  this.sync = !!options.sync
  this.nounique = !!options.nounique
  this.nonull = !!options.nonull
  this.nosort = !!options.nosort
  this.nocase = !!options.nocase
  this.stat = !!options.stat

  this.debug = !!options.debug || !!options.globDebug
  if (this.debug)
    this.log = console.error

  this.silent = !!options.silent

  var mm = this.minimatch = new Minimatch(pattern, options)
  this.options = mm.options
  pattern = this.pattern = mm.pattern

  this.error = null
  this.aborted = false

  // list of all the patterns that ** has resolved do, so
  // we can avoid visiting multiple times.
  this._globstars = {}

  EE.call(this)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  this.minimatch.set.forEach(iterator.bind(this))
  function iterator (pattern, i, set) {
    this._process(pattern, 0, i, function (er) {
      if (er) this.emit("error", er)
      if (-- n <= 0) this._finish()
    })
  }
}

Glob.prototype.log = function () {}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)

  var nou = this.nounique
  , all = nou ? [] : {}

  for (var i = 0, l = this.matches.length; i < l; i ++) {
    var matches = this.matches[i]
    this.log("matches[%d] =", i, matches)
    // do like the shell, and spit out the literal glob
    if (!matches) {
      if (this.nonull) {
        var literal = this.minimatch.globSet[i]
        if (nou) all.push(literal)
        else all[literal] = true
      }
    } else {
      // had matches
      var m = Object.keys(matches)
      if (nou) all.push.apply(all, m)
      else m.forEach(function (m) {
        all[m] = true
      })
    }
  }

  if (!nou) all = Object.keys(all)

  if (!this.nosort) {
    all = all.sort(this.nocase ? alphasorti : alphasort)
  }

  if (this.mark) {
    // at *some* point we statted all of these
    all = all.map(this._mark, this)
  }

  this.log("emitting end", all)

  this.EOF = this.found = all
  this.emitMatch(this.EOF)
}

function alphasorti (a, b) {
  a = a.toLowerCase()
  b = b.toLowerCase()
  return alphasort(a, b)
}

function alphasort (a, b) {
  return a > b ? 1 : a < b ? -1 : 0
}

Glob.prototype._mark = function (p) {
  var c = this.cache[p]
  var m = p
  if (c) {
    var isDir = c === 2 || Array.isArray(c)
    var slash = p.slice(-1) === '/'

    if (isDir && !slash)
      m += '/'
    else if (!isDir && slash)
      m = m.slice(0, -1)

    if (m !== p) {
      this.statCache[m] = this.statCache[p]
      this.cache[m] = this.cache[p]
    }
  }

  return m
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit("abort")
}

Glob.prototype.pause = function () {
  if (this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = true
  this.emit("pause")
}

Glob.prototype.resume = function () {
  if (!this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = false
  this.emit("resume")
  this._processEmitQueue()
  //process.nextTick(this.emit.bind(this, "resume"))
}

Glob.prototype.emitMatch = function (m) {
  this.log('emitMatch', m)
  this._emitQueue.push(m)
  this._processEmitQueue()
}

Glob.prototype._processEmitQueue = function (m) {
  this.log("pEQ paused=%j processing=%j m=%j", this.paused,
           this._processingEmitQueue, m)
  var done = false
  while (!this._processingEmitQueue &&
         !this.paused) {
    this._processingEmitQueue = true
    var m = this._emitQueue.shift()
    this.log(">processEmitQueue", m === this.EOF ? ":EOF:" : m)
    if (!m) {
      this.log(">processEmitQueue, falsey m")
      this._processingEmitQueue = false
      break
    }

    if (m === this.EOF || !(this.mark && !this.stat)) {
      this.log("peq: unmarked, or eof")
      next.call(this, 0, false)
    } else if (this.statCache[m]) {
      var sc = this.statCache[m]
      var exists
      if (sc)
        exists = sc.isDirectory() ? 2 : 1
      this.log("peq: stat cached")
      next.call(this, exists, exists === 2)
    } else {
      this.log("peq: _stat, then next")
      this._stat(m, next)
    }

    function next(exists, isDir) {
      this.log("next", m, exists, isDir)
      var ev = m === this.EOF ? "end" : "match"

      // "end" can only happen once.
      assert(!this._endEmitted)
      if (ev === "end")
        this._endEmitted = true

      if (exists) {
        // Doesn't mean it necessarily doesn't exist, it's possible
        // we just didn't check because we don't care that much, or
        // this is EOF anyway.
        if (isDir && !m.match(/\/$/)) {
          m = m + "/"
        } else if (!isDir && m.match(/\/$/)) {
          m = m.replace(/\/+$/, "")
        }
      }
      this.log("emit", ev, m)
      this.emit(ev, m)
      this._processingEmitQueue = false
      if (done && m !== this.EOF && !this.paused)
        this._processEmitQueue()
    }
  }
  done = true
}

Glob.prototype._process = function (pattern, depth, index, cb_) {
  assert(this instanceof Glob)

  var cb = function cb (er, res) {
    assert(this instanceof Glob)
    if (this.paused) {
      if (!this._processQueue) {
        this._processQueue = []
        this.once("resume", function () {
          var q = this._processQueue
          this._processQueue = null
          q.forEach(function (cb) { cb() })
        })
      }
      this._processQueue.push(cb_.bind(this, er, res))
    } else {
      cb_.call(this, er, res)
    }
  }.bind(this)

  if (this.aborted) return cb()

  if (depth > this.maxDepth) return cb()

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === "string") {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      prefix = pattern.join("/")
      this._stat(prefix, function (exists, isDir) {
        // either it's there, or it isn't.
        // nothing more to do, either way.
        if (exists) {
          if (prefix && isAbsolute(prefix) && !this.nomount) {
            if (prefix.charAt(0) === "/") {
              prefix = path.join(this.root, prefix)
            } else {
              prefix = path.resolve(this.root, prefix)
            }
          }

          if (process.platform === "win32")
            prefix = prefix.replace(/\\/g, "/")

          this.matches[index] = this.matches[index] || {}
          this.matches[index][prefix] = true
          this.emitMatch(prefix)
        }
        return cb()
      })
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n)
      prefix = prefix.join("/")
      break
  }

  // get the list of entries.
  var read
  if (prefix === null) read = "."
  else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
    if (!prefix || !isAbsolute(prefix)) {
      prefix = path.join("/", prefix)
    }
    read = prefix = path.resolve(prefix)

    // if (process.platform === "win32")
    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\/g, "/")

    this.log('absolute: ', prefix, this.root, pattern, read)
  } else {
    read = prefix
  }

  this.log('readdir(%j)', read, this.cwd, this.root)

  return this._readdir(read, function (er, entries) {
    if (er) {
      // not a directory!
      // this means that, whatever else comes after this, it can never match
      return cb()
    }

    // globstar is special
    if (pattern[n] === minimatch.GLOBSTAR) {
      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]
      entries.forEach(function (e) {
        if (e.charAt(0) === "." && !this.dot) return
        // instead of the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))
        // below the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))
      }, this)

      s = s.filter(function (pattern) {
        var key = gsKey(pattern)
        var seen = !this._globstars[key]
        this._globstars[key] = true
        return seen
      }, this)

      if (!s.length)
        return cb()

      // now asyncForEach over this
      var l = s.length
      , errState = null
      s.forEach(function (gsPattern) {
        this._process(gsPattern, depth + 1, index, function (er) {
          if (errState) return
          if (er) return cb(errState = er)
          if (--l <= 0) return cb()
        })
      }, this)

      return
    }

    // not a globstar
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = pattern[n]
    var rawGlob = pattern[n]._glob
    , dotOk = this.dot || rawGlob.charAt(0) === "."

    entries = entries.filter(function (e) {
      return (e.charAt(0) !== "." || dotOk) &&
             e.match(pattern[n])
    })

    // If n === pattern.length - 1, then there's no need for the extra stat
    // *unless* the user has specified "mark" or "stat" explicitly.
    // We know that they exist, since the readdir returned them.
    if (n === pattern.length - 1 &&
        !this.mark &&
        !this.stat) {
      entries.forEach(function (e) {
        if (prefix) {
          if (prefix !== "/") e = prefix + "/" + e
          else e = prefix + e
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path.join(this.root, e)
        }

        if (process.platform === "win32")
          e = e.replace(/\\/g, "/")

        this.matches[index] = this.matches[index] || {}
        this.matches[index][e] = true
        this.emitMatch(e)
      }, this)
      return cb.call(this)
    }


    // now test all the remaining entries as stand-ins for that part
    // of the pattern.
    var l = entries.length
    , errState = null
    if (l === 0) return cb() // no matches possible
    entries.forEach(function (e) {
      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))
      this._process(p, depth + 1, index, function (er) {
        if (errState) return
        if (er) return cb(errState = er)
        if (--l === 0) return cb.call(this)
      })
    }, this)
  })

}

function gsKey (pattern) {
  return '**' + pattern.map(function (p) {
    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)
  }).join('/')
}

Glob.prototype._stat = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterStat(f, abs, cb, er)
  }

  this.log('stat', [this.cwd, f, '=', abs])

  if (!this.stat && this.cache.hasOwnProperty(f)) {
    var exists = this.cache[f]
    , isDir = exists && (Array.isArray(exists) || exists === 2)
    if (this.sync) return cb.call(this, !!exists, isDir)
    return process.nextTick(cb.bind(this, !!exists, isDir))
  }

  var stat = this.statCache[abs]
  if (this.sync || stat) {
    var er
    try {
      stat = fs.statSync(abs)
    } catch (e) {
      er = e
    }
    this._afterStat(f, abs, cb, er, stat)
  } else {
    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))
  }
}

Glob.prototype._afterStat = function (f, abs, cb, er, stat) {
  var exists
  assert(this instanceof Glob)

  if (abs.slice(-1) === "/" && stat && !stat.isDirectory()) {
    this.log("should be ENOTDIR, fake it")

    er = new Error("ENOTDIR, not a directory '" + abs + "'")
    er.path = abs
    er.code = "ENOTDIR"
    stat = null
  }

  var emit = !this.statCache[abs]
  this.statCache[abs] = stat

  if (er || !stat) {
    exists = false
  } else {
    exists = stat.isDirectory() ? 2 : 1
    if (emit)
      this.emit('stat', f, stat)
  }
  this.cache[f] = this.cache[f] || exists
  cb.call(this, !!exists, exists === 2)
}

Glob.prototype._readdir = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (isAbsolute(f)) {
    abs = f
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterReaddir(f, abs, cb, er)
  }

  this.log('readdir', [this.cwd, f, abs])
  if (this.cache.hasOwnProperty(f)) {
    var c = this.cache[f]
    if (Array.isArray(c)) {
      if (this.sync) return cb.call(this, null, c)
      return process.nextTick(cb.bind(this, null, c))
    }

    if (!c || c === 1) {
      // either ENOENT or ENOTDIR
      var code = c ? "ENOTDIR" : "ENOENT"
      , er = new Error((c ? "Not a directory" : "Not found") + ": " + f)
      er.path = f
      er.code = code
      this.log(f, er)
      if (this.sync) return cb.call(this, er)
      return process.nextTick(cb.bind(this, er))
    }

    // at this point, c === 2, meaning it's a dir, but we haven't
    // had to read it yet, or c === true, meaning it's *something*
    // but we don't have any idea what.  Need to read it, either way.
  }

  if (this.sync) {
    var er, entries
    try {
      entries = fs.readdirSync(abs)
    } catch (e) {
      er = e
    }
    return this._afterReaddir(f, abs, cb, er, entries)
  }

  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))
}

Glob.prototype._afterReaddir = function (f, abs, cb, er, entries) {
  assert(this instanceof Glob)
  if (entries && !er) {
    this.cache[f] = entries
    // if we haven't asked to stat everything for suresies, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.  This also gets us one step
    // further into ELOOP territory.
    if (!this.mark && !this.stat) {
      entries.forEach(function (e) {
        if (f === "/") e = f + e
        else e = f + "/" + e
        this.cache[e] = true
      }, this)
    }

    return cb.call(this, er, entries)
  }

  // now handle errors, and cache the information
  if (er) switch (er.code) {
    case "ENOTDIR": // totally normal. means it *does* exist.
      this.cache[f] = 1
      return cb.call(this, er)
    case "ENOENT": // not terribly unusual
    case "ELOOP":
    case "ENAMETOOLONG":
    case "UNKNOWN":
      this.cache[f] = false
      return cb.call(this, er)
    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) this.emit("error", er)
      if (!this.silent) console.error("glob error", er)
      return cb.call(this, er)
  }
}

var isAbsolute = process.platform === "win32" ? absWin : absUnix

function absWin (p) {
  if (absUnix(p)) return true
  // pull off the device/UNC bit from a windows path.
  // from node's lib/path.js
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/
    , result = splitDeviceRe.exec(p)
    , device = result[1] || ''
    , isUnc = device && device.charAt(1) !== ':'
    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute

  return isAbsolute
}

function absUnix (p) {
  return p.charAt(0) === "/" || p === ""
}
 at SyntaxError: Unexpected token (46:2)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
