/root/Targets/react-bubbles
└─┬ react-bubbles@0.0.1 
  ├─┬ babel-core@6.18.2 
  │ ├─┬ babel-code-frame@6.26.0 
  │ │ ├─┬ chalk@1.1.3 
  │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ └── supports-color@2.0.0 
  │ │ ├── esutils@2.0.2 
  │ │ └── js-tokens@3.0.2 
  │ ├─┬ babel-generator@6.26.0 
  │ │ ├─┬ detect-indent@4.0.0 
  │ │ │ └─┬ repeating@2.0.1 
  │ │ │   └─┬ is-finite@1.0.2 
  │ │ │     └── number-is-nan@1.0.1 
  │ │ ├── jsesc@1.3.0 
  │ │ └── trim-right@1.0.1 
  │ ├── babel-helpers@6.24.1 
  │ ├── babel-messages@6.23.0 
  │ ├─┬ babel-register@6.26.0 
  │ │ ├── babel-core@6.26.0 
  │ │ ├── core-js@2.5.1 
  │ │ ├─┬ home-or-tmp@2.0.0 
  │ │ │ ├── os-homedir@1.0.2 
  │ │ │ └── os-tmpdir@1.0.2 
  │ │ └── source-map-support@0.4.18 
  │ ├─┬ babel-runtime@6.26.0 
  │ │ └── regenerator-runtime@0.11.0 
  │ ├── babel-template@6.26.0 
  │ ├─┬ babel-traverse@6.26.0 
  │ │ ├── globals@9.18.0 
  │ │ └── invariant@2.2.2 
  │ ├─┬ babel-types@6.26.0 
  │ │ └── to-fast-properties@1.0.3 
  │ ├── babylon@6.18.0 
  │ ├── convert-source-map@1.5.0 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├── json5@0.5.1 
  │ ├── lodash@4.17.4 
  │ ├─┬ minimatch@3.0.4 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ ├── path-is-absolute@1.0.1 
  │ ├── private@0.1.7 
  │ ├── slash@1.0.0 
  │ └── source-map@0.5.7 
  ├─┬ babel-eslint@7.0.0 
  │ └── lodash.pickby@4.6.0 
  ├─┬ babel-loader@6.2.5 
  │ ├─┬ loader-utils@0.2.17 
  │ │ ├── big.js@3.2.0 
  │ │ └── emojis-list@2.1.0 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ └── object-assign@4.1.1 
  ├─┬ babel-preset-es2015@6.16.0 
  │ ├── babel-plugin-check-es2015-constants@6.22.0 
  │ ├── babel-plugin-transform-es2015-arrow-functions@6.22.0 
  │ ├── babel-plugin-transform-es2015-block-scoped-functions@6.22.0 
  │ ├── babel-plugin-transform-es2015-block-scoping@6.26.0 
  │ ├─┬ babel-plugin-transform-es2015-classes@6.24.1 
  │ │ ├── babel-helper-define-map@6.26.0 
  │ │ ├── babel-helper-function-name@6.24.1 
  │ │ ├── babel-helper-optimise-call-expression@6.24.1 
  │ │ └── babel-helper-replace-supers@6.24.1 
  │ ├── babel-plugin-transform-es2015-computed-properties@6.24.1 
  │ ├── babel-plugin-transform-es2015-destructuring@6.23.0 
  │ ├── babel-plugin-transform-es2015-duplicate-keys@6.24.1 
  │ ├── babel-plugin-transform-es2015-for-of@6.23.0 
  │ ├── babel-plugin-transform-es2015-function-name@6.24.1 
  │ ├── babel-plugin-transform-es2015-literals@6.22.0 
  │ ├── babel-plugin-transform-es2015-modules-amd@6.24.1 
  │ ├─┬ babel-plugin-transform-es2015-modules-commonjs@6.26.0 
  │ │ └── babel-plugin-transform-strict-mode@6.24.1 
  │ ├─┬ babel-plugin-transform-es2015-modules-systemjs@6.24.1 
  │ │ └── babel-helper-hoist-variables@6.24.1 
  │ ├── babel-plugin-transform-es2015-modules-umd@6.24.1 
  │ ├── babel-plugin-transform-es2015-object-super@6.24.1 
  │ ├─┬ babel-plugin-transform-es2015-parameters@6.24.1 
  │ │ ├── babel-helper-call-delegate@6.24.1 
  │ │ └── babel-helper-get-function-arity@6.24.1 
  │ ├── babel-plugin-transform-es2015-shorthand-properties@6.24.1 
  │ ├── babel-plugin-transform-es2015-spread@6.22.0 
  │ ├─┬ babel-plugin-transform-es2015-sticky-regex@6.24.1 
  │ │ └── babel-helper-regex@6.26.0 
  │ ├── babel-plugin-transform-es2015-template-literals@6.22.0 
  │ ├── babel-plugin-transform-es2015-typeof-symbol@6.23.0 
  │ ├─┬ babel-plugin-transform-es2015-unicode-regex@6.24.1 
  │ │ └─┬ regexpu-core@2.0.0 
  │ │   ├── regenerate@1.3.3 
  │ │   ├── regjsgen@0.2.0 
  │ │   └─┬ regjsparser@0.1.5 
  │ │     └── jsesc@0.5.0 
  │ └─┬ babel-plugin-transform-regenerator@6.26.0 
  │   └── regenerator-transform@0.10.1 
  ├─┬ babel-preset-react@6.16.0 
  │ ├── babel-plugin-syntax-flow@6.18.0 
  │ ├── babel-plugin-syntax-jsx@6.18.0 
  │ ├── babel-plugin-transform-flow-strip-types@6.22.0 
  │ ├── babel-plugin-transform-react-display-name@6.25.0 
  │ ├─┬ babel-plugin-transform-react-jsx@6.24.1 
  │ │ └── babel-helper-builder-react-jsx@6.26.0 
  │ ├── babel-plugin-transform-react-jsx-self@6.22.0 
  │ └── babel-plugin-transform-react-jsx-source@6.22.0 
  ├─┬ babel-preset-stage-0@6.16.0 
  │ ├─┬ babel-plugin-transform-do-expressions@6.22.0 
  │ │ └── babel-plugin-syntax-do-expressions@6.13.0 
  │ ├─┬ babel-plugin-transform-function-bind@6.22.0 
  │ │ └── babel-plugin-syntax-function-bind@6.13.0 
  │ └─┬ babel-preset-stage-1@6.24.1 
  │   ├─┬ babel-plugin-transform-class-constructor-call@6.24.1 
  │   │ └── babel-plugin-syntax-class-constructor-call@6.18.0 
  │   ├─┬ babel-plugin-transform-export-extensions@6.22.0 
  │   │ └── babel-plugin-syntax-export-extensions@6.13.0 
  │   └─┬ babel-preset-stage-2@6.24.1 
  │     ├── babel-plugin-syntax-dynamic-import@6.18.0 
  │     ├─┬ babel-plugin-transform-class-properties@6.24.1 
  │     │ └── babel-plugin-syntax-class-properties@6.13.0 
  │     ├─┬ babel-plugin-transform-decorators@6.24.1 
  │     │ ├─┬ babel-helper-explode-class@6.24.1 
  │     │ │ └── babel-helper-bindify-decorators@6.24.1 
  │     │ └── babel-plugin-syntax-decorators@6.13.0 
  │     └─┬ babel-preset-stage-3@6.24.1 
  │       ├── babel-plugin-syntax-trailing-function-commas@6.22.0 
  │       ├─┬ babel-plugin-transform-async-generator-functions@6.24.1 
  │       │ ├── babel-helper-remap-async-to-generator@6.24.1 
  │       │ └── babel-plugin-syntax-async-generators@6.13.0 
  │       ├─┬ babel-plugin-transform-async-to-generator@6.24.1 
  │       │ └── babel-plugin-syntax-async-functions@6.13.0 
  │       ├─┬ babel-plugin-transform-exponentiation-operator@6.24.1 
  │       │ ├─┬ babel-helper-builder-binary-assignment-operator-visitor@6.24.1 
  │       │ │ └── babel-helper-explode-assignable-expression@6.24.1 
  │       │ └── babel-plugin-syntax-exponentiation-operator@6.13.0 
  │       └─┬ babel-plugin-transform-object-rest-spread@6.26.0 
  │         └── babel-plugin-syntax-object-rest-spread@6.13.0 
  ├── immutable@3.8.1 
  ├─┬ raf@3.3.0 
  │ └── performance-now@0.2.0 
  ├─┬ react@0.14.9 
  │ ├─┬ envify@3.4.1 
  │ │ ├─┬ jstransform@11.0.3 
  │ │ │ ├── base62@1.2.0 
  │ │ │ ├─┬ commoner@0.10.8 
  │ │ │ │ ├── commander@2.11.0 
  │ │ │ │ ├─┬ detective@4.5.0 
  │ │ │ │ │ ├── acorn@4.0.13 
  │ │ │ │ │ └── defined@1.0.0 
  │ │ │ │ ├─┬ glob@5.0.15 
  │ │ │ │ │ ├─┬ inflight@1.0.6 
  │ │ │ │ │ │ └── wrappy@1.0.2 
  │ │ │ │ │ └── once@1.4.0 
  │ │ │ │ ├── iconv-lite@0.4.19 
  │ │ │ │ ├── q@1.5.0 
  │ │ │ │ └─┬ recast@0.11.23 
  │ │ │ │   ├── ast-types@0.9.6 
  │ │ │ │   └── esprima@3.1.3 
  │ │ │ ├── esprima-fb@15001.1.0-dev-harmony-fb 
  │ │ │ ├── object-assign@2.1.1 
  │ │ │ └── source-map@0.4.4 
  │ │ └── through@2.3.8 
  │ └─┬ fbjs@0.6.1 
  │   ├── core-js@1.2.7 
  │   ├── loose-envify@1.3.1 
  │   ├─┬ promise@7.3.1 
  │   │ └── asap@2.0.6 
  │   ├── ua-parser-js@0.7.14 
  │   └── whatwg-fetch@0.9.0 
  ├── react-dom@0.14.9 
  └─┬ webpack@1.13.2 
    ├── acorn@3.3.0 
    ├── async@1.5.2 
    ├── clone@1.0.2 
    ├─┬ enhanced-resolve@0.9.1 
    │ ├── graceful-fs@4.1.11 
    │ └── memory-fs@0.2.0 
    ├── interpret@0.6.6 
    ├─┬ memory-fs@0.3.0 
    │ ├─┬ errno@0.1.4 
    │ │ └── prr@0.0.0 
    │ └─┬ readable-stream@2.3.3 
    │   ├── core-util-is@1.0.2 
    │   ├── inherits@2.0.3 
    │   ├── isarray@1.0.0 
    │   ├── process-nextick-args@1.0.7 
    │   ├── safe-buffer@5.1.1 
    │   ├── string_decoder@1.0.3 
    │   └── util-deprecate@1.0.2 
    ├─┬ node-libs-browser@0.6.0 
    │ ├── assert@1.4.1 
    │ ├─┬ browserify-zlib@0.1.4 
    │ │ └── pako@0.2.9 
    │ ├─┬ buffer@4.9.1 
    │ │ ├── base64-js@1.2.1 
    │ │ └── ieee754@1.1.8 
    │ ├─┬ console-browserify@1.1.0 
    │ │ └── date-now@0.1.4 
    │ ├── constants-browserify@0.0.1 
    │ ├─┬ crypto-browserify@3.2.8 
    │ │ ├── pbkdf2-compat@2.0.1 
    │ │ ├── ripemd160@0.2.0 
    │ │ └── sha.js@2.2.6 
    │ ├── domain-browser@1.1.7 
    │ ├── events@1.1.1 
    │ ├─┬ http-browserify@1.7.0 
    │ │ └── Base64@0.2.1 
    │ ├── https-browserify@0.0.0 
    │ ├── os-browserify@0.1.2 
    │ ├── path-browserify@0.0.0 
    │ ├── process@0.11.10 
    │ ├── punycode@1.4.1 
    │ ├── querystring-es3@0.2.1 
    │ ├─┬ readable-stream@1.1.14 
    │ │ └── isarray@0.0.1 
    │ ├─┬ stream-browserify@1.0.0 
    │ │ └─┬ readable-stream@1.1.14 
    │ │   ├── isarray@0.0.1 
    │ │   └── string_decoder@0.10.31 
    │ ├── string_decoder@0.10.31 
    │ ├── timers-browserify@1.4.2 
    │ ├── tty-browserify@0.0.0 
    │ ├─┬ url@0.10.3 
    │ │ ├── punycode@1.3.2 
    │ │ └── querystring@0.2.0 
    │ ├─┬ util@0.10.3 
    │ │ └── inherits@2.0.1 
    │ └─┬ vm-browserify@0.0.4 
    │   └── indexof@0.0.1 
    ├─┬ optimist@0.6.1 
    │ └── wordwrap@0.0.3 
    ├─┬ supports-color@3.2.3 
    │ └── has-flag@1.0.0 
    ├── tapable@0.1.10 
    ├─┬ uglify-js@2.6.4 
    │ ├── async@0.2.10 
    │ ├── uglify-to-browserify@1.0.2 
    │ └─┬ yargs@3.10.0 
    │   ├── camelcase@1.2.1 
    │   ├─┬ cliui@2.1.0 
    │   │ ├─┬ center-align@0.1.3 
    │   │ │ ├─┬ align-text@0.1.4 
    │   │ │ │ ├── longest@1.0.1 
    │   │ │ │ └── repeat-string@1.6.1 
    │   │ │ └── lazy-cache@1.0.4 
    │   │ ├── right-align@0.1.3 
    │   │ └── wordwrap@0.0.2 
    │   ├── decamelize@1.2.0 
    │   └── window-size@0.1.0 
    ├─┬ watchpack@0.2.9 
    │ ├── async@0.9.2 
    │ └─┬ chokidar@1.7.0 
    │   ├─┬ anymatch@1.3.2 
    │   │ ├─┬ micromatch@2.3.11 
    │   │ │ ├─┬ arr-diff@2.0.0 
    │   │ │ │ └── arr-flatten@1.1.0 
    │   │ │ ├── array-unique@0.2.1 
    │   │ │ ├─┬ braces@1.8.5 
    │   │ │ │ ├─┬ expand-range@1.8.2 
    │   │ │ │ │ └─┬ fill-range@2.2.3 
    │   │ │ │ │   ├── is-number@2.1.0 
    │   │ │ │ │   ├── isobject@2.1.0 
    │   │ │ │ │   └─┬ randomatic@1.1.7 
    │   │ │ │ │     ├─┬ is-number@3.0.0 
    │   │ │ │ │     │ └── kind-of@3.2.2 
    │   │ │ │ │     └── kind-of@4.0.0 
    │   │ │ │ ├── preserve@0.2.0 
    │   │ │ │ └── repeat-element@1.1.2 
    │   │ │ ├─┬ expand-brackets@0.1.5 
    │   │ │ │ └── is-posix-bracket@0.1.1 
    │   │ │ ├── extglob@0.3.2 
    │   │ │ ├── filename-regex@2.0.1 
    │   │ │ ├─┬ kind-of@3.2.2 
    │   │ │ │ └── is-buffer@1.1.5 
    │   │ │ ├─┬ object.omit@2.0.1 
    │   │ │ │ ├─┬ for-own@0.1.5 
    │   │ │ │ │ └── for-in@1.0.2 
    │   │ │ │ └── is-extendable@0.1.1 
    │   │ │ ├─┬ parse-glob@3.0.4 
    │   │ │ │ ├── glob-base@0.3.0 
    │   │ │ │ └── is-dotfile@1.0.3 
    │   │ │ └─┬ regex-cache@0.4.4 
    │   │ │   └─┬ is-equal-shallow@0.1.3 
    │   │ │     └── is-primitive@2.0.0 
    │   │ └─┬ normalize-path@2.1.1 
    │   │   └── remove-trailing-separator@1.1.0 
    │   ├── async-each@1.0.1 
    │   ├── glob-parent@2.0.0 
    │   ├─┬ is-binary-path@1.0.1 
    │   │ └── binary-extensions@1.10.0 
    │   ├─┬ is-glob@2.0.1 
    │   │ └── is-extglob@1.0.0 
    │   └─┬ readdirp@2.1.0 
    │     └── set-immediate-shim@1.0.1 
    └─┬ webpack-core@0.6.9 
      ├── source-list-map@0.1.8 
      └─┬ source-map@0.4.4 
        └── amdefine@1.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-bubbles/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0248 took 2.2473s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (234:12) on program import React, { Component } from 'react';
import { List, fromJS } from 'immutable';
import { moveCaretToTheEnd, startBubbleEditing, endBubbleEditing, isBubbleEditing } from './selection';
import { isUniqueBubble, getNodeIndexOf, prepareContent } from './utils';
import BubbleRecord from './bubbleRecord';
import KEYCODES from './keyCodes';

/**
 * @class Bubbles
 * @augments Component
 */
export default class Bubbles extends Component {
    constructor(props) {
        super(props);

        this.onKeyDown = this.onKeyDown.bind(this);
        this.onEnter = this.onEnter.bind(this);
        this.onBackSpace = this.onBackSpace.bind(this);
        this.onClick = this.onClick.bind(this);
        this.attachEvents = this.attachEvents.bind(this);
        this.deattachEvents = this.deattachEvents.bind(this);
        this.onPaste = this.onPaste.bind(this);

        this.state = { bubbles: List() };
    }

    /**
     * Append bubble by the index.
     * @param {string} content
     * @param {number} [index]
     */
    appendBubble(content, index) {
        content = prepareContent(content);

        if (!isUniqueBubble(this.state.bubbles, content)) {
            moveCaretToTheEnd(this.editor);
        } else if (index !== undefined) {
            this.setState({ bubbles: this.state.bubbles.set(index, new BubbleRecord({ content })) });
        } else {
            this.setState({ bubbles: this.state.bubbles.push(new BubbleRecord({ content })) });
        }

        this.props.onChange && this.props.onChange(this.state.bubbles.toList());
    }

    /**
     * Remove bubble by index.
     * @param {number} [index]
     */
    removeBubble(index) {
        if (index !== undefined) {
            this.setState({ bubbles: this.state.bubbles.delete(index) });
        } else {
            this.setState({ bubbles: this.state.bubbles.pop() });
        }

        this.props.onChange && this.props.onChange(this.state.bubbles.toList());
    }

    /**
     * KeyDown handler.
     * @param {Event} e
     */
    onKeyDown(e) {
        switch (e.keyCode) {
            case KEYCODES.ENTER:
            case KEYCODES.SPACE:
                this.onEnter(e);
                break;

            case KEYCODES.BACKSPACE:
                this.onBackSpace(e);
                break;
        }
    }

    onEnter(e) {
        this.finishEditingBubbles();
        this.convertTextNodesToBubbles();
        moveCaretToTheEnd(this.editor);

        e.preventDefault();
    }

    onBackSpace(e) {
        const selection = window.getSelection();
        const focusNode = selection.focusNode;
        const prevNode = focusNode.previousSibling;
        const node = focusNode.parentNode;
        const code = focusNode.textContent.charCodeAt(0);

        if (isBubbleEditing(node)) {
            if (selection.toString() === focusNode.textContent) {
                const nodeIndex = getNodeIndexOf(this.editor, node);
                this.removeBubble(nodeIndex);
                moveCaretToTheEnd(this.editor);

                e.preventDefault();
            }
        }

        if (code === KEYCODES.ZEROWIDTHSPACE && focusNode.textContent.length === 1) {
            if (prevNode && prevNode.nodeType === Node.ELEMENT_NODE) {
                this.removeBubble();

                e.preventDefault();
            }
        }
    }

    onClick(e) {
        const node = e.target;

        if (node !== this.editor && !isBubbleEditing(node)) {
            startBubbleEditing(node);
        }

        if (node === this.editor) {
            moveCaretToTheEnd(this.editor);
        }
    }

    onBlur() {
        this.finishEditingBubbles();
        this.convertTextNodesToBubbles();
    }

    onPaste(e) {
        e.preventDefault();

        if (e.clipboardData && e.clipboardData.types && e.clipboardData.getData) {
            const data = e.clipboardData.getData('text/plain');
            const content = prepareContent(data);

            if (isUniqueBubble(this.state.bubbles, content)) {
                const record = new BubbleRecord({content});

                this.setState({
                    bubbles: this.state.bubbles.push(record)
                }, () => this.props.onChange(this.state.bubbles.toList()));
            }
        }
    }

    /**
     * Converts edited bubbles to bubbles.
     */
    finishEditingBubbles() {
        const editingNodes = [];

        this.editor.childNodes.forEach((node) => {
             if (node.nodeType === Node.ELEMENT_NODE && isBubbleEditing(node)) {
                 editingNodes.push(node);
             }
        });

        editingNodes.forEach((node) => {
            const content = prepareContent(node.textContent);
            const nodeIndex = getNodeIndexOf(this.editor, node);
            const listIndex = this.state.bubbles.findIndex((item) => item.get('content') === content);

            if (listIndex !== -1 && nodeIndex !== listIndex) {
                this.removeBubble(nodeIndex);
            } else {
                this.appendBubble(content, nodeIndex);
            }

            endBubbleEditing(node);
        });
    }

    /**
     * Converts text in the editor to bubbles.
     */
    convertTextNodesToBubbles() {
        const textNodes = [];

        this.editor.childNodes.forEach((node) => {
            if (node.nodeType === Node.TEXT_NODE) {
                textNodes.push(node);
            }
        });

        textNodes.forEach((node) => {
            const content = prepareContent(node.textContent);

            if (content.length > 0) {
                this.appendBubble(content);
            }

            node.remove();
        });
    }

    attachEvents() {
        this.editor.addEventListener('keydown', this.onKeyDown, false);
        this.editor.addEventListener('click', this.onClick, false);
        this.editor.addEventListener('paste', this.onPaste, false);
    }

    deattachEvents() {
        this.editor.removeEventListener('keydown', this.onKeyDown, false);
        this.editor.removeEventListener('click', this.onClick, false);
        this.editor.removeEventListener('paste', this.onPaste, false);
    }

    componentDidMount() {
        this.attachEvents();

        const bubbles = this.props.bubbles;

        if (bubbles && bubbles.length > 0) {
            const bubbleRecords = fromJS(bubbles).map(bubble => new BubbleRecord({ content: prepareContent(bubble) }));
            this.setState({ bubbles: this.state.bubbles.merge(bubbleRecords) }, () => moveCaretToTheEnd(this.editor));
        }
    }

    componentWillUnmount() {
        this.deattachEvents();
    }

    render() {
        const bubbleComponent = this.props.bubbleComponent;
        const bubbles = this.state.bubbles.map((bubble) => {
            const content = bubble.get('content');

            return React.createElement(bubbleComponent, {
                key: content,
                content
            });
        });

        return (
            <div
                spellCheck="false"
                suppressContentEditableWarning="true"
                contentEditable
                onBlur={ () => this.onBlur() }
                ref={ (node) => this.editor = node }
                className={ this.props.class }
            >
                { bubbles }
            </div>
        )
    }
}
 at SyntaxError: Unexpected token (234:12)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
