/root/Targets/natelogg
└─┬ natelogg@1.0.10 
  ├── ejs@2.4.2 
  ├─┬ express@4.14.0 
  │ ├─┬ accepts@1.3.4 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.1 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├─┬ debug@2.2.0 
  │ │ └── ms@0.7.1 
  │ ├── depd@1.1.1 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.7.0 
  │ ├─┬ finalhandler@0.5.0 
  │ │ ├── statuses@1.3.1 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.3.0 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@1.1.5 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.4.0 
  │ ├── qs@6.2.0 
  │ ├── range-parser@1.2.0 
  │ ├─┬ send@0.14.1 
  │ │ ├── destroy@1.0.4 
  │ │ ├─┬ http-errors@1.5.1 
  │ │ │ ├── inherits@2.0.3 
  │ │ │ └── setprototypeof@1.0.2 
  │ │ └── mime@1.3.4 
  │ ├─┬ serve-static@1.11.2 
  │ │ └─┬ send@0.14.2 
  │ │   └── ms@0.7.2 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.1.1 
  ├── minimist@1.2.0 
  ├── moment@2.13.0 
  ├─┬ morgan@1.7.0 
  │ ├── basic-auth@1.0.4 
  │ └── on-headers@1.0.1 
  ├── ramda@0.24.1 
  ├─┬ socket.io@1.4.8 
  │ ├─┬ engine.io@1.6.11 
  │ │ ├─┬ accepts@1.1.4 
  │ │ │ ├─┬ mime-types@2.0.14 
  │ │ │ │ └── mime-db@1.12.0 
  │ │ │ └── negotiator@0.4.9 
  │ │ ├── base64id@0.1.0 
  │ │ ├─┬ engine.io-parser@1.2.4 
  │ │ │ ├── after@0.8.1 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ ├── base64-arraybuffer@0.1.2 
  │ │ │ ├── blob@0.0.4 
  │ │ │ ├── has-binary@0.1.6 
  │ │ │ └── utf8@2.1.0 
  │ │ └─┬ ws@1.1.0 
  │ │   ├── options@0.0.6 
  │ │   └── ultron@1.0.2 
  │ ├─┬ has-binary@0.1.7 
  │ │ └── isarray@0.0.1 
  │ ├─┬ socket.io-adapter@0.4.0 
  │ │ └─┬ socket.io-parser@2.2.2 
  │ │   ├── debug@0.7.4 
  │ │   └── json3@3.2.6 
  │ ├─┬ socket.io-client@1.4.8 
  │ │ ├── backo2@1.0.2 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.2.0 
  │ │ ├─┬ engine.io-client@1.6.11 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├── has-cors@1.1.0 
  │ │ │ ├── parsejson@0.0.1 
  │ │ │ ├── parseqs@0.0.2 
  │ │ │ ├── ws@1.0.1 
  │ │ │ ├── xmlhttprequest-ssl@1.5.1 
  │ │ │ └── yeast@0.1.2 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseuri@0.0.4 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ └── to-array@0.1.4 
  │ └─┬ socket.io-parser@2.2.6 
  │   ├── benchmark@1.0.0 
  │   ├── component-emitter@1.1.2 
  │   └── json3@3.3.2 
  └── tail@1.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/natelogg/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.063 took 2.6815s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var express         = require('express');
var socketio        = require('socket.io');
var morgan          = require('morgan');
var fs              = require('fs');
var minimist        = require('minimist');
var Tail            = require('tail').Tail;
var formatters      = require(__dirname + '/formatters');
var R               = require('ramda');
var app             = express();
var watchers        = {};
var options         = minimist(process.argv.slice(2));
var homeDir         = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
var config;

try {
    config          = require(homeDir + '/.natelogg/config');
}catch(e) {
    console.error('Could not load config file. Make sure you have a config file at ~/.natelogg/config');
    process.exit();
}

var BaseMonitors    = require('./baseMonitors');
var LiveReloaders   = require('./liveReloaders');

if (options.enableInspector) {
    if (typeof config.portAppMap === 'undefined') {
        console.error('Cannot use node --inspect mode without "portAppMap" in config file.');
        process.exit();
    } else {
        options.portAppMap  = config.portAppMap;
    }
}

var port = config.port || 9000;

app.set('view engine', 'ejs');
app.set('views', __dirname + '/views');
app.use(morgan('dev'));
app.use('/static', express.static(__dirname + '/static'));

app.get('/', function (req, res) {
    fs.readdir(config.logDirectory, function(err, logs) {
        if(err) {
           return res.send('Can\'t read log directory ' + config.logDirectory);
        }

        res.render('main', {
            logs: logs,
            options: options
        });
    });
});

app.get('/newtab', function (req, res) {
    res.location('/' + req.query.url);
});

var server = app.listen(port, function () {
    console.log('Natelogg started on port %s', port);
});
var io = socketio(server);

io.on('connection', onConnect);

function onConnect(socket) {
    var formatter;

    console.log('Client websocket connected.');

    console.log('Creating log event handlers');
    socket._lineHandler = function(data) {
        if(formatter) {
            data = formatter.handleLogLine(data);
        }
        if(data) {
            socket.emit('logData', data);
        }
    };

    socket._errHandler = function(err) {
        socket.emit('logData', data);
    };

    socket.on('setFormatter', function(data) {
        formatter = new formatters[data.formatter]({});
    });

    socket.on('setFormatterOptions', function(data) {
        var options = eval('(' + data.options + ')');
        formatter = new formatters[data.formatter](options);
    });

    socket.on('toggleLog', function(data) {
        var watcher;

        if(data.enabled) {
            console.log('Log %s is now being watched.', data.log);

            if(!watchers[data.log]) {
                console.log('Watcher does not exist for log %s. Creating now.', data.log);
                watcher = new Tail(config.logDirectory + '/' + data.log, {
                    fromBeginning : false,
                    follow        : true
                });

                watcher._log          = data.log;
                watcher._lineHandlers = [];
                watcher._errHandlers  = [];

                watcher.on('line', function(data) {
                    watcher._lineHandlers.forEach(function(handler) {
                        handler(data);
                    });
                });

                watcher.on('error', function(err) {
                    watcher._errHandlers.forEach(function(handler) {
                        handler(err);
                    });
                });

                watchers[data.log] = watcher;
            }else {
                watcher = watchers[data.log];
            }

            subscribe(watcher);
        }else {
            console.log('Log %s is no longer being watched.', data.log);
            watcher = watchers[data.log];
            unsubscribe(watcher);
        }
    });

    if (!options.enableLiveReload || socketBelongsToLogger(socket)) {
        //base app monitoring - report crashes to the ui
        var baseMonitors = new BaseMonitors(config, socket);

        socket.on('disconnect', function() {
            console.log('Client websocket disconnected.');
            console.log('Unsubscribing from all log events.');
            Object.keys(watchers).forEach(function(watcher) {
                watcher = watchers[watcher];
                unsubscribe(watcher);
            });

            baseMonitors.destroy();
        });

    }

    if (options.enableLiveReload) {
        //live reloaders - refreshes ui after build complete
        var liveReloaders = new LiveReloaders(config, socket);

        socket.on('disconnect', function() {
            liveReloaders.destroy();
        });
    }

    function socketBelongsToLogger(socket) {
        return R.pathSatisfies(
            (origin) => {
                return origin.indexOf('http://log.') >= 0 ||
                    origin.indexOf('http://localhost:9000') >= 0
            },
            ['handshake', 'headers', 'referer'],
            socket
        );
    }

    function subscribe(watcher) {
        console.log('Subscribing to log events for %s.', watcher._log);
        watcher._lineHandlers.push(socket._lineHandler);
        watcher._errHandlers.push(socket._errHandler);
    }

    function unsubscribe(watcher) {
        var lineHandlerPos = watcher._lineHandlers.indexOf(socket._lineHandler);
        var errHandlerPos  = watcher._errHandlers.indexOf(socket._errHandler);

        console.log('Unsubscribing from log events for %s.', watcher._log);
        if(lineHandlerPos > -1) {
            watcher._lineHandlers.splice(lineHandlerPos, 1);
        }
        if(errHandlerPos > -1) {
            watcher._errHandlers.splice(errHandlerPos, 1);
        }
        if(!watcher._lineHandlers.length && !watcher._errHandlers.length) {
            console.log('No more handlers are bound to the watcher for %s. Killing watcher.', watcher._log);
            delete watchers[watchers._log];
        }
    }
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
